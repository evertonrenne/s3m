/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/model/output/OpenTSDBWriter.java;<<<<<<< MINE
    private String host;
    private Integer port;
    private Map<String, String> tags;
    private String tagName;
    private Socket socket;

    String addTags(String resultString) throws UnknownHostException {
        resultString = addTag(resultString, "host", java.net.InetAddress.getLocalHost().getHostName());
        if (tags != null)
            for (Map.Entry<String, String> tagEntry : tags.entrySet()) {
                resultString = addTag(resultString, tagEntry.getKey(), tagEntry.getValue());
            }
        return resultString;
    }

    String addTag(String resultString, String tagName, String tagValue) {
        String tagFormat = " %s=%s";
        resultString += String.format(tagFormat, tagName, tagValue);
        return resultString;
    }

    String getResultString(String className, String attributeName, long epoch, Object value) {
        String resultStringFormat = "put %s.%s %d %s";
        return String.format(resultStringFormat, className, attributeName, epoch, value);
    }

    String getResultString(String className, String attributeName, long epoch, Object value, String tagName, String tagValue) {
        String taggedResultStringFormat = "put %s.%s %d %s %s=%s";
        return String.format(taggedResultStringFormat, className, attributeName, epoch, value, tagName, tagValue);
    }

    List<String> resultParser(Result result) throws UnknownHostException {
        List<String> resultStrings = new LinkedList<String>();
        Map<String, Object> values = result.getValues();
        if (values == null)
            return resultStrings;

        String attributeName = result.getAttributeName();
        String className = result.getClassNameAlias() == null ? result.getClassName() : result.getClassNameAlias();
        if (values.containsKey(attributeName) && values.size() == 1) {
            String resultString = getResultString(className, attributeName, (long)(result.getEpoch()/1000L), values.get(attributeName));
            resultString = addTags(resultString);
            if (getTypeNames().size() > 0) {
                resultString = addTag(resultString, StringUtils.join(getTypeNames(), ""), getConcatedTypeNameValues(result.getTypeName()));
            }
            resultStrings.add(resultString);
        } else {
            for (Map.Entry<String, Object> valueEntry: values.entrySet() ) {
                String resultString = getResultString(className, attributeName, (long)(result.getEpoch()/1000L), valueEntry.getValue(), tagName, valueEntry.getKey());
                resultString = addTags(resultString);
                if (getTypeNames().size() > 0) {
                    resultString = addTag(resultString, StringUtils.join(getTypeNames(), ""), getConcatedTypeNameValues(result.getTypeName()));
                }
                resultStrings.add(resultString);
            }
        }
        return resultStrings;
    }

    @Override
    public void doWrite(Query query) throws Exception {
        DataOutputStream out;
        try {
            out = new DataOutputStream(socket.getOutputStream());
        } catch (IOException e) {
            log.error("error getting the output stream", e);
            throw e;
        }
=======
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/model/output/OpenTSDBWriter.java;<<<<<<< MINE
        for (Result result : query.getResults()) {
            for(String resultString: resultParser(result)) {
                if (isDebugEnabled())
                    System.out.println(resultString);
                try {
                    out.writeBytes(resultString + "\n"); 
                } catch (IOException e) {
                    log.error("error writing result to the output stream", e);
                    throw e;
                }
            }
        }
        try {
            out.flush();
        } catch (IOException e) {
            log.error("flush failed");
            throw e;
        }
        InputStreamReader socketInputStream = new InputStreamReader(socket.getInputStream());
        BufferedReader bufferedSocketInputStream = new BufferedReader(socketInputStream);
        String line;
        while (socketInputStream.ready() && (line = bufferedSocketInputStream.readLine()) != null) {
            log.warn("OpenTSDB says: " + line); 
        }
    }
=======
    protected Socket            socket;
    protected DataOutputStream  out;
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/model/output/OpenTSDBWriter.java;<<<<<<< MINE
=======
    /**
     * Add the hostname tag "host" with the name of the host by default since OpenTSDB otherwise does not have this
     * information.
     */
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/model/output/OpenTSDBWriter.java;<<<<<<< MINE
=======
    /**
     * Prepare for sending metrics.
     */
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/model/output/OpenTSDBWriter.java;<<<<<<< MINE
=======
    /**
     * Shutdown the sender as it will no longer be used to send metrics.
     */
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/util/JmxUtils.java;<<<<<<< MINE
=======
		clean = clean.replace("/", "_");
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/util/JmxUtils.java;<<<<<<< MINE
=======
	 * Given a typeName string, create a Map with every key and value in the typeName.
	 * For example:
	 *
	 * typeName=name=PS Eden Space,type=MemoryPool
	 *
	 * Returns a Map with the following key/value pairs (excluding the quotes):
	 *
	 *  "name"  =>  "PS Eden Space"
	 *  "type"  =>  "MemoryPool"
	 *
	 * @param typeNameStr
	 *            the type name str
	 * @return Map<String, String> of type-name-key / value pairs.
	 */
	public static Map<String, String>   getTypeNameValueMap (String typeNameStr) {
		if ( typeNameStr == null ) {
			return  java.util.Collections.EMPTY_MAP;
		}

		HashMap result = new HashMap();
		String[] tokens = typeNameStr.split(",");

		for (String oneToken : tokens) {
			if ( oneToken.length() > 0 ) {
				String[] keyValue = splitTypeNameValue(oneToken);
				result.put(keyValue[0], keyValue[1]);
			}
		}
		return result;
	}

	/**
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/src/com/googlecode/jmxtrans/util/JmxConnectionFactory.java;<<<<<<< MINE
=======
            conn.getMBeanServerConnection().getMBeanCount();
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_1a750dd_4d726a9/rev_1a750dd-4d726a9/test/com/googlecode/jmxtrans/util/JmxUtilsTests.java;<<<<<<< MINE
=======
 * @author Arthur Naseef Date: 02/23/2014
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_fe2250d_92e252b/rev_fe2250d-92e252b/src/com/googlecode/jmxtrans/model/output/LibratoWriter.java;<<<<<<< MINE
=======
		this.httpUserAgent =
				"jmxtrans-standalone/1 " + "(" +
						System.getProperty("java.vm.name") + "/" + System.getProperty("java.version") + "; " +
						System.getProperty("os.name") + "-" + System.getProperty("os.arch") + "/" + System.getProperty("os.version")
						+ ")";
>>>>>>> YOURS
/home/ramdisk/experiment2/projects/jmxtrans/revisions/rev_fe2250d_92e252b/rev_fe2250d-92e252b/src/com/googlecode/jmxtrans/model/output/LibratoWriter.java;<<<<<<< MINE
=======
			urlConnection.setRequestProperty("User-Agent", httpUserAgent);
>>>>>>> YOURS
