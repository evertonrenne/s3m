file;ssmergeConf;linedbasedConf
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_0662940_c8839ee/rev_0662940-c8839ee/src/main/java/org/elasticsearch/repositories/s3/S3Repository.java;<<<<<<< MINE
        logger.debug("using bucket [{}], region [{}], endpoint [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}]", bucket, region, endpoint, chunkSize, serverSideEncryption, bufferSize);
        blobStore = new S3BlobStore(settings, s3Service.client(endpoint, region, repositorySettings.settings().get("access_key"), repositorySettings.settings().get("secret_key")), bucket, region, serverSideEncryption, bufferSize);
=======
        Integer maxRetries = repositorySettings.settings().getAsInt("max_retries", componentSettings.getAsInt("max_retries", 3));
>>>>>>> YOURS;<<<<<<< MINE
        logger.debug("using bucket [{}], region [{}], endpoint [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}]", bucket, region, endpoint, chunkSize, serverSideEncryption, bufferSize);
        blobStore = new S3BlobStore(settings, s3Service.client(endpoint, region, repositorySettings.settings().get("access_key"), repositorySettings.settings().get("secret_key")), bucket, region, serverSideEncryption, bufferSize);
=======
        Integer maxRetries = repositorySettings.settings().getAsInt("max_retries", componentSettings.getAsInt("max_retries", 3));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e19d20b_fcc09f6/rev_e19d20b-fcc09f6/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java;<<<<<<< MINE
                    AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory,
                    List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new SignificantStringTermsAggregator(name, factories, valuesSource, bucketCountThresholds, includeExclude,
                        aggregationContext, parent, termsAggregatorFactory, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter();
                return new SignificantStringTermsAggregator(name, factories, valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);
>>>>>>> YOURS;<<<<<<< MINE
                    AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory,
                    List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new SignificantStringTermsAggregator(name, factories, valuesSource, bucketCountThresholds, includeExclude,
                        aggregationContext, parent, termsAggregatorFactory, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter();
                return new SignificantStringTermsAggregator(name, factories, valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e19d20b_fcc09f6/rev_e19d20b-fcc09f6/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java;<<<<<<< MINE
                return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, includeExclude, aggregationContext, parent, termsAggregatorFactory, reducers, metaData);
=======
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);
>>>>>>> YOURS;<<<<<<< MINE
                return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, includeExclude, aggregationContext, parent, termsAggregatorFactory, reducers, metaData);
=======
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e19d20b_fcc09f6/rev_e19d20b-fcc09f6/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/SignificantTermsAggregatorFactory.java;<<<<<<< MINE
                    AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory,
                    List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new GlobalOrdinalsSignificantTermsAggregator.WithHash(name, factories,
                        (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, includeExclude,
                        aggregationContext, parent, termsAggregatorFactory, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsSignificantTermsAggregator.WithHash(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);
>>>>>>> YOURS;<<<<<<< MINE
                    AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory,
                    List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new GlobalOrdinalsSignificantTermsAggregator.WithHash(name, factories,
                        (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, includeExclude,
                        aggregationContext, parent, termsAggregatorFactory, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggregatorFactory, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsSignificantTermsAggregator.WithHash(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e19d20b_fcc09f6/rev_e19d20b-fcc09f6/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java;<<<<<<< MINE
                    AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode,
                    boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new StringTermsAggregator(name, factories, valuesSource, order, bucketCountThresholds, includeExclude,
                        aggregationContext, parent, subAggCollectMode, showTermDocCountError, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter();
                return new StringTermsAggregator(name, factories, valuesSource, order, bucketCountThresholds, filter, aggregationContext, parent, subAggCollectMode, showTermDocCountError, metaData);
>>>>>>> YOURS;<<<<<<< MINE
                    AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode,
                    boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new StringTermsAggregator(name, factories, valuesSource, order, bucketCountThresholds, includeExclude,
                        aggregationContext, parent, subAggCollectMode, showTermDocCountError, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.StringFilter filter = includeExclude == null ? null : includeExclude.convertToStringFilter();
                return new StringTermsAggregator(name, factories, valuesSource, order, bucketCountThresholds, filter, aggregationContext, parent, subAggCollectMode, showTermDocCountError, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e19d20b_fcc09f6/rev_e19d20b-fcc09f6/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java;<<<<<<< MINE
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new GlobalOrdinalsStringTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, includeExclude, aggregationContext, parent, subAggCollectMode, showTermDocCountError, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsStringTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, filter, aggregationContext, parent, subAggCollectMode, showTermDocCountError, metaData);
>>>>>>> YOURS;<<<<<<< MINE
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new GlobalOrdinalsStringTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, includeExclude, aggregationContext, parent, subAggCollectMode, showTermDocCountError, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsStringTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, filter, aggregationContext, parent, subAggCollectMode, showTermDocCountError, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e19d20b_fcc09f6/rev_e19d20b-fcc09f6/src/main/java/org/elasticsearch/search/aggregations/bucket/terms/TermsAggregatorFactory.java;<<<<<<< MINE
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new GlobalOrdinalsStringTermsAggregator.WithHash(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, includeExclude, aggregationContext, parent, subAggCollectMode, showTermDocCountError, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsStringTermsAggregator.WithHash(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, filter, aggregationContext, parent, subAggCollectMode, showTermDocCountError, metaData);
>>>>>>> YOURS;<<<<<<< MINE
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {
                return new GlobalOrdinalsStringTermsAggregator.WithHash(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, includeExclude, aggregationContext, parent, subAggCollectMode, showTermDocCountError, reducers, metaData);
=======
                              AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode subAggCollectMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {
                final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter();
                return new GlobalOrdinalsStringTermsAggregator.WithHash(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, order, bucketCountThresholds, filter, aggregationContext, parent, subAggCollectMode, showTermDocCountError, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_75ff5b5_3275939/rev_75ff5b5-3275939/src/main/java/org/elasticsearch/index/query/GeoShapeQueryParser.java;<<<<<<< MINE
            throw new ElasticsearchIllegalArgumentException("");

=======
            throw new IllegalArgumentException("");
        
>>>>>>> YOURS;<<<<<<< MINE
            throw new ElasticsearchIllegalArgumentException("");

=======
            throw new IllegalArgumentException("");
        
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3bb8ff2_528f648/rev_3bb8ff2-528f648/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java;<<<<<<< MINE
                    throw new InvalidAggregationPathException("_count must be the last element in the path");
=======
                    throw new IllegalArgumentException("_count must be the last element in the path");
>>>>>>> YOURS;<<<<<<< MINE
                    throw new InvalidAggregationPathException("_count must be the last element in the path");
=======
                    throw new IllegalArgumentException("_count must be the last element in the path");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3bb8ff2_528f648/rev_3bb8ff2-528f648/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java;<<<<<<< MINE
                    throw new InvalidAggregationPathException("_key must be the last element in the path");
=======
                    throw new IllegalArgumentException("_key must be the last element in the path");
>>>>>>> YOURS;<<<<<<< MINE
                    throw new InvalidAggregationPathException("_key must be the last element in the path");
=======
                    throw new IllegalArgumentException("_key must be the last element in the path");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3bb8ff2_528f648/rev_3bb8ff2-528f648/src/main/java/org/elasticsearch/search/aggregations/InternalMultiBucketAggregation.java;<<<<<<< MINE
                throw new InvalidAggregationPathException("Cannot find an aggregation named [" + aggName + "] in [" + containingAggName
                        + "]");
=======
                throw new IllegalArgumentException("Cannot find an aggregation named [" + aggName + "] in [" + containingAggName + "]");
>>>>>>> YOURS;<<<<<<< MINE
                throw new InvalidAggregationPathException("Cannot find an aggregation named [" + aggName + "] in [" + containingAggName
                        + "]");
=======
                throw new IllegalArgumentException("Cannot find an aggregation named [" + aggName + "] in [" + containingAggName + "]");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3bb8ff2_528f648/rev_3bb8ff2-528f648/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java;<<<<<<< MINE
                        if (aggFactory != null) {
                            throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName + "]: ["
                                + aggFactory.type + "] and [" + fieldName + "]");
=======
                        if (factory != null) {
                        throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName + "]: ["
                                + factory.type + "] and [" + fieldName + "]", parser.getTokenLocation());
>>>>>>> YOURS;<<<<<<< MINE
                        if (aggFactory != null) {
                            throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName + "]: ["
                                + aggFactory.type + "] and [" + fieldName + "]");
=======
                        if (factory != null) {
                        throw new SearchParseException(context, "Found two aggregation type definitions in [" + aggregationName + "]: ["
                                + factory.type + "] and [" + fieldName + "]", parser.getTokenLocation());
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3bb8ff2_528f648/rev_3bb8ff2-528f648/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java;<<<<<<< MINE
                            Reducer.Parser reducerParser = reducer(fieldName);
                            if (reducerParser == null) {
                                throw new SearchParseException(context, "Could not find aggregator type [" + fieldName + "] in ["
                                    + aggregationName + "]");
                            } else {
                                reducerFactory = reducerParser.parse(aggregationName, parser, context);
                            }
                        } else {
                            aggFactory = aggregatorParser.parse(aggregationName, parser, context);
=======
                        throw new SearchParseException(context, "Could not find aggregator type [" + fieldName + "] in [" + aggregationName
                                + "]", parser.getTokenLocation());
>>>>>>> YOURS;<<<<<<< MINE
                            Reducer.Parser reducerParser = reducer(fieldName);
                            if (reducerParser == null) {
                                throw new SearchParseException(context, "Could not find aggregator type [" + fieldName + "] in ["
                                    + aggregationName + "]");
                            } else {
                                reducerFactory = reducerParser.parse(aggregationName, parser, context);
                            }
                        } else {
                            aggFactory = aggregatorParser.parse(aggregationName, parser, context);
=======
                        throw new SearchParseException(context, "Could not find aggregator type [" + fieldName + "] in [" + aggregationName
                                + "]", parser.getTokenLocation());
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3bb8ff2_528f648/rev_3bb8ff2-528f648/src/main/java/org/elasticsearch/search/aggregations/AggregatorParsers.java;<<<<<<< MINE
            if (aggFactory == null && reducerFactory == null) {
                throw new SearchParseException(context, "Missing definition for aggregation [" + aggregationName + "]");
            } else if (aggFactory != null) {
                assert reducerFactory == null;
                if (metaData != null) {
                    aggFactory.setMetaData(metaData);
                }
=======
            if (factory == null) {
                throw new SearchParseException(context, "Missing definition for aggregation [" + aggregationName + "]",
                        parser.getTokenLocation());
            }
>>>>>>> YOURS;<<<<<<< MINE
            if (aggFactory == null && reducerFactory == null) {
                throw new SearchParseException(context, "Missing definition for aggregation [" + aggregationName + "]");
            } else if (aggFactory != null) {
                assert reducerFactory == null;
                if (metaData != null) {
                    aggFactory.setMetaData(metaData);
                }
=======
            if (factory == null) {
                throw new SearchParseException(context, "Missing definition for aggregation [" + aggregationName + "]",
                        parser.getTokenLocation());
            }
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ed094aa_a536bd5/rev_ed094aa-a536bd5/src/main/java/org/elasticsearch/index/query/ConstantScoreQueryBuilder.java;<<<<<<< MINE
        if (queryBuilder != null) {
            assert filterBuilder == null;
            builder.field("query");
            queryBuilder.toXContent(builder, params);
        } else {
            builder.field("filter");
            filterBuilder.toXContent(builder, params);
        }

=======
        builder.field("filter");
        filterBuilder.toXContent(builder, params);

>>>>>>> YOURS;<<<<<<< MINE
        if (queryBuilder != null) {
            assert filterBuilder == null;
            builder.field("query");
            queryBuilder.toXContent(builder, params);
        } else {
            builder.field("filter");
            filterBuilder.toXContent(builder, params);
        }

=======
        builder.field("filter");
        filterBuilder.toXContent(builder, params);

>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_b2e63bd_5a0c456/rev_b2e63bd-5a0c456/src/main/java/org/elasticsearch/index/query/GeoShapeQueryParser.java;<<<<<<< MINE
=======

>>>>>>> YOURS;<<<<<<< MINE
    
=======

>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_b2e63bd_5a0c456/rev_b2e63bd-5a0c456/src/main/java/org/elasticsearch/index/query/GeoShapeQueryParser.java;<<<<<<< MINE
=======

>>>>>>> YOURS;<<<<<<< MINE
=======

>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_5aaebb6_e97353e/rev_5aaebb6-e97353e/src/test/java/org/elasticsearch/index/engine/InternalEngineSettingsTest.java;<<<<<<< MINE
        Settings settings = ImmutableSettings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)
=======
        Settings settings = Settings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000)
>>>>>>> YOURS;<<<<<<< MINE
        Settings settings = ImmutableSettings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)
=======
        Settings settings = Settings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_5aaebb6_e97353e/rev_5aaebb6-e97353e/src/test/java/org/elasticsearch/index/engine/InternalEngineSettingsTest.java;<<<<<<< MINE
        settings = ImmutableSettings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)
=======
        settings = Settings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000)
>>>>>>> YOURS;<<<<<<< MINE
        settings = ImmutableSettings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)
=======
        settings = Settings.builder()
                .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_5aaebb6_e97353e/rev_5aaebb6-e97353e/src/test/java/org/elasticsearch/cluster/ack/AckTests.java;<<<<<<< MINE
                    .setSettings(ImmutableSettings.builder().put("refresh_interval", 9999, TimeUnit.MILLISECONDS)));
=======
                .setSettings(Settings.builder().put("refresh_interval", 9999)));
>>>>>>> YOURS;<<<<<<< MINE
                    .setSettings(ImmutableSettings.builder().put("refresh_interval", 9999, TimeUnit.MILLISECONDS)));
=======
                .setSettings(Settings.builder().put("refresh_interval", 9999)));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_5aaebb6_e97353e/rev_5aaebb6-e97353e/src/test/java/org/elasticsearch/cluster/ack/AckTests.java;<<<<<<< MINE
                .setSettings(ImmutableSettings.builder().put("refresh_interval", 9999, TimeUnit.MILLISECONDS)).get();
=======
                .setSettings(Settings.builder().put("refresh_interval", 9999)).get();
>>>>>>> YOURS;<<<<<<< MINE
                .setSettings(ImmutableSettings.builder().put("refresh_interval", 9999, TimeUnit.MILLISECONDS)).get();
=======
                .setSettings(Settings.builder().put("refresh_interval", 9999)).get();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_61e9461_59d9f7e/rev_61e9461-59d9f7e/src/main/java/org/elasticsearch/index/query/TemplateQueryBuilder.java;<<<<<<< MINE
    protected void doXContent(XContentBuilder builder, Params params) throws IOException {
        builder.startObject(NAME);
        String fieldname;
        switch(templateType){
            case FILE:
                fieldname = "file";
                break;
            case INDEXED:
                fieldname = "id";
                break;
            case INLINE:
                fieldname = TemplateQueryParser.QUERY;
                break;
            default:
                throw new IllegalArgumentException("Unknown template type " + templateType);
=======
    protected void doXContent(XContentBuilder builder, Params builderParams) throws IOException {
        builder.field(TemplateQueryParser.NAME);
        if (template == null) {
            new Template(templateString, templateType, null, null, this.vars).toXContent(builder, builderParams);
        } else {
            template.toXContent(builder, builderParams);
>>>>>>> YOURS;<<<<<<< MINE
    protected void doXContent(XContentBuilder builder, Params params) throws IOException {
        builder.startObject(NAME);
        String fieldname;
        switch(templateType){
            case FILE:
                fieldname = "file";
                break;
            case INDEXED:
                fieldname = "id";
                break;
            case INLINE:
                fieldname = TemplateQueryParser.QUERY;
                break;
            default:
                throw new IllegalArgumentException("Unknown template type " + templateType);
=======
    protected void doXContent(XContentBuilder builder, Params builderParams) throws IOException {
        builder.field(TemplateQueryParser.NAME);
        if (template == null) {
            new Template(templateString, templateType, null, null, this.vars).toXContent(builder, builderParams);
        } else {
            template.toXContent(builder, builderParams);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_61e9461_59d9f7e/rev_61e9461-59d9f7e/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java;<<<<<<< MINE
        return new String[]{ScriptQueryBuilder.NAME};
=======
        return new String[] { NAME };
>>>>>>> YOURS;<<<<<<< MINE
        return new String[]{ScriptQueryBuilder.NAME};
=======
        return new String[] { NAME };
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_1f2c42f_59d9f7e/rev_1f2c42f-59d9f7e/src/test/java/org/elasticsearch/index/mapper/update/UpdateMappingTests.java;<<<<<<< MINE
        assertTrue(documentMapper.timestampFieldMapper().fieldType().hasDocValues());
        documentMapper = indexService.mapperService().parse("type", new CompressedString(documentMapper.mappingSource().string()), true);
=======
        assertTrue(documentMapper.timestampFieldMapper().hasDocValues());
        documentMapper = indexService.mapperService().parse("type", new CompressedXContent(documentMapper.mappingSource().string()), true);
>>>>>>> YOURS;<<<<<<< MINE
        assertTrue(documentMapper.timestampFieldMapper().fieldType().hasDocValues());
        documentMapper = indexService.mapperService().parse("type", new CompressedString(documentMapper.mappingSource().string()), true);
=======
        assertTrue(documentMapper.timestampFieldMapper().hasDocValues());
        documentMapper = indexService.mapperService().parse("type", new CompressedXContent(documentMapper.mappingSource().string()), true);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_33668a8_f4a143d/rev_33668a8-f4a143d/core/src/main/java/org/elasticsearch/index/query/WildcardQueryBuilder.java;<<<<<<< MINE
        builder.startObject(NAME);
        if (boost == -1 && rewrite == null && queryName != null) {
=======
        builder.startObject(WildcardQueryParser.NAME);
        if (boost == -1 && rewrite == null && queryName == null) {
>>>>>>> YOURS;<<<<<<< MINE
        builder.startObject(NAME);
        if (boost == -1 && rewrite == null && queryName != null) {
=======
        builder.startObject(WildcardQueryParser.NAME);
        if (boost == -1 && rewrite == null && queryName == null) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_33668a8_f4a143d/rev_33668a8-f4a143d/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryBuilder.java;<<<<<<< MINE
        builder.startObject(NAME);
        if (boost == -1 && fuzziness == null && prefixLength == null && queryName != null) {
            builder.field(name, value);
        } else {
            builder.startObject(name);
            builder.field("value", value);
            if (boost != -1) {
                builder.field("boost", boost);
            }
            if (transpositions != null) {
                builder.field("transpositions", transpositions);
            }
            if (fuzziness != null) {
                fuzziness.toXContent(builder, params);
            }
            if (prefixLength != null) {
                builder.field("prefix_length", prefixLength);
            }
            if (maxExpansions != null) {
                builder.field("max_expansions", maxExpansions);
            }
            if (rewrite != null) {
                builder.field("rewrite", rewrite);
            }
            if (queryName != null) {
                builder.field("_name", queryName);
            }
            builder.endObject();
=======
        builder.startObject(FuzzyQueryParser.NAME);
        builder.startObject(name);
        builder.field("value", value);
        if (boost != -1) {
            builder.field("boost", boost);
>>>>>>> YOURS;<<<<<<< MINE
        builder.startObject(NAME);
        if (boost == -1 && fuzziness == null && prefixLength == null && queryName != null) {
            builder.field(name, value);
        } else {
            builder.startObject(name);
            builder.field("value", value);
            if (boost != -1) {
                builder.field("boost", boost);
            }
            if (transpositions != null) {
                builder.field("transpositions", transpositions);
            }
            if (fuzziness != null) {
                fuzziness.toXContent(builder, params);
            }
            if (prefixLength != null) {
                builder.field("prefix_length", prefixLength);
            }
            if (maxExpansions != null) {
                builder.field("max_expansions", maxExpansions);
            }
            if (rewrite != null) {
                builder.field("rewrite", rewrite);
            }
            if (queryName != null) {
                builder.field("_name", queryName);
            }
            builder.endObject();
=======
        builder.startObject(FuzzyQueryParser.NAME);
        builder.startObject(name);
        builder.field("value", value);
        if (boost != -1) {
            builder.field("boost", boost);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_33668a8_f4a143d/rev_33668a8-f4a143d/core/src/main/java/org/elasticsearch/index/query/PrefixQueryBuilder.java;<<<<<<< MINE
        builder.startObject(NAME);
        if (boost == -1 && rewrite == null && queryName != null) {
=======
        builder.startObject(PrefixQueryParser.NAME);
        if (boost == -1 && rewrite == null && queryName == null) {
>>>>>>> YOURS;<<<<<<< MINE
        builder.startObject(NAME);
        if (boost == -1 && rewrite == null && queryName != null) {
=======
        builder.startObject(PrefixQueryParser.NAME);
        if (boost == -1 && rewrite == null && queryName == null) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_33b3323_b78211d/rev_33b3323-b78211d/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java;<<<<<<< MINE
=======

        if (boost != -1) {
            builder.field("boost", boost);
        }

>>>>>>> YOURS;<<<<<<< MINE
=======

        if (boost != -1) {
            builder.field("boost", boost);
        }

>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_53f6bf0_ed561cd/rev_53f6bf0-ed561cd/core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java;<<<<<<< MINE
            wrappedStream = compressor.streamInput(streamIn);
        } else {
            wrappedStream = streamIn;
        }
        wrappedStream = new FilterStreamInput(wrappedStream, namedWriteableRegistry);
        wrappedStream.setVersion(version);
=======
            wrappedStream.setVersion(version);
>>>>>>> YOURS;<<<<<<< MINE
            wrappedStream = compressor.streamInput(streamIn);
        } else {
            wrappedStream = streamIn;
        }
        wrappedStream = new FilterStreamInput(wrappedStream, namedWriteableRegistry);
        wrappedStream.setVersion(version);
=======
            wrappedStream.setVersion(version);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4b071f8_6765635/rev_4b071f8-6765635/core/src/main/java/org/elasticsearch/transport/netty/MessageChannelHandler.java;<<<<<<< MINE
            wrappedStream = new FilterStreamInput(wrappedStream, namedWriteableRegistry);
            wrappedStream.setVersion(version);
=======
            streamIn.setVersion(version);
>>>>>>> YOURS;<<<<<<< MINE
            wrappedStream = new FilterStreamInput(wrappedStream, namedWriteableRegistry);
            wrappedStream.setVersion(version);
=======
            streamIn.setVersion(version);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_88e3d6c_90f32d4/rev_88e3d6c-90f32d4/core/src/main/java/org/elasticsearch/index/query/ScriptQueryParser.java;<<<<<<< MINE
                } else if ("boost".equals(currentFieldName)) {
                    boost = parser.floatValue();
                } else if (!scriptParameterParser.token(currentFieldName, token, parser)) {
=======
                } else if (!scriptParameterParser.token(currentFieldName, token, parser, parseContext.parseFieldMatcher())) {
>>>>>>> YOURS;<<<<<<< MINE
                } else if ("boost".equals(currentFieldName)) {
                    boost = parser.floatValue();
                } else if (!scriptParameterParser.token(currentFieldName, token, parser)) {
=======
                } else if (!scriptParameterParser.token(currentFieldName, token, parser, parseContext.parseFieldMatcher())) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a0cccec_a6c0007/rev_a0cccec-a6c0007/core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java;<<<<<<< MINE
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
        int flagsValue = -1;
=======
        float boost = 1.0f;
        int flagsValue = DEFAULT_FLAGS_VALUE;
>>>>>>> YOURS;<<<<<<< MINE
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
        int flagsValue = -1;
=======
        float boost = 1.0f;
        int flagsValue = DEFAULT_FLAGS_VALUE;
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a0cccec_a6c0007/rev_a0cccec-a6c0007/core/src/main/java/org/elasticsearch/index/query/FuzzyQueryParser.java;<<<<<<< MINE
        String value = null;
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
=======
        Object value = null;
        float boost = 1.0f;
>>>>>>> YOURS;<<<<<<< MINE
        String value = null;
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
=======
        Object value = null;
        float boost = 1.0f;
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ac92ad6_964a849/rev_ac92ad6-964a849/core/src/main/java/org/elasticsearch/index/query/RegexpQueryParser.java;<<<<<<< MINE
        Object value = null;
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
=======
        String value = null;
        float boost = 1.0f;
>>>>>>> YOURS;<<<<<<< MINE
        Object value = null;
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
=======
        String value = null;
        float boost = 1.0f;
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ac92ad6_964a849/rev_ac92ad6-964a849/core/src/main/java/org/elasticsearch/index/query/PrefixQueryParser.java;<<<<<<< MINE
        Object value = null;
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
=======
        String value = null;
        float boost = 1.0f;
>>>>>>> YOURS;<<<<<<< MINE
        Object value = null;
        float boost = AbstractQueryBuilder.DEFAULT_BOOST;
=======
        String value = null;
        float boost = 1.0f;
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3d53413_20faccc/rev_3d53413-20faccc/core/src/test/java/org/elasticsearch/aliases/IndexAliasesTests.java;<<<<<<< MINE
        AliasMetaData aliasMetaData = internalCluster().clusterService().state().metaData().aliases().get("alias1").get("test");
        assertThat(aliasMetaData.getFilter().toString(), equalTo("{\"term\":{\"name\":{\"value\":\"bar\",\"boost\":1.0}}}"));
=======
        AliasMetaData aliasMetaData = ((AliasOrIndex.Alias) internalCluster().clusterService().state().metaData().getAliasAndIndexLookup().get("alias1")).getFirstAliasMetaData();
        assertThat(aliasMetaData.getFilter().toString(), equalTo("{\"term\":{\"name\":\"bar\"}}"));
>>>>>>> YOURS;<<<<<<< MINE
        AliasMetaData aliasMetaData = internalCluster().clusterService().state().metaData().aliases().get("alias1").get("test");
        assertThat(aliasMetaData.getFilter().toString(), equalTo("{\"term\":{\"name\":{\"value\":\"bar\",\"boost\":1.0}}}"));
=======
        AliasMetaData aliasMetaData = ((AliasOrIndex.Alias) internalCluster().clusterService().state().metaData().getAliasAndIndexLookup().get("alias1")).getFirstAliasMetaData();
        assertThat(aliasMetaData.getFilter().toString(), equalTo("{\"term\":{\"name\":\"bar\"}}"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_be638fb_4010e7e/rev_be638fb-4010e7e/core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTest.java;<<<<<<< MINE
        InputStream synonyms = getClass().getResourceAsStream("synonyms.txt");
        InputStream synonymsWordnet = getClass().getResourceAsStream("synonyms_wordnet.txt");
        Path home = createTempDir();
        Path config = home.resolve("config");
        Files.createDirectory(config);
        Files.copy(synonyms, config.resolve("synonyms.txt"));
        Files.copy(synonymsWordnet, config.resolve("synonyms_wordnet.txt"));

=======
        String json = "/org/elasticsearch/index/analysis/synonyms/synonyms.json";
>>>>>>> YOURS;<<<<<<< MINE
        InputStream synonyms = getClass().getResourceAsStream("synonyms.txt");
        InputStream synonymsWordnet = getClass().getResourceAsStream("synonyms_wordnet.txt");
        Path home = createTempDir();
        Path config = home.resolve("config");
        Files.createDirectory(config);
        Files.copy(synonyms, config.resolve("synonyms.txt"));
        Files.copy(synonymsWordnet, config.resolve("synonyms_wordnet.txt"));

=======
        String json = "/org/elasticsearch/index/analysis/synonyms/synonyms.json";
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_be638fb_4010e7e/rev_be638fb-4010e7e/core/src/test/java/org/elasticsearch/index/analysis/synonyms/SynonymsAnalysisTest.java;<<<<<<< MINE
                loadFromClasspath("org/elasticsearch/index/analysis/synonyms/synonyms.json")
                .put("path.home", home)
=======
                loadFromStream(json, getClass().getResourceAsStream(json))
                .put("path.home", createTempDir().toString())
>>>>>>> YOURS;<<<<<<< MINE
                loadFromClasspath("org/elasticsearch/index/analysis/synonyms/synonyms.json")
                .put("path.home", home)
=======
                loadFromStream(json, getClass().getResourceAsStream(json))
                .put("path.home", createTempDir().toString())
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_be638fb_4010e7e/rev_be638fb-4010e7e/core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java;<<<<<<< MINE
                     .loadFromClasspath("org/elasticsearch/index/analysis/commongrams/commongrams.json")
                     .put("path.home", createHome())
=======
                     .loadFromStream(json, getClass().getResourceAsStream(json))
                     .put("path.home", createTempDir().toString())
>>>>>>> YOURS;<<<<<<< MINE
                     .loadFromClasspath("org/elasticsearch/index/analysis/commongrams/commongrams.json")
                     .put("path.home", createHome())
=======
                     .loadFromStream(json, getClass().getResourceAsStream(json))
                     .put("path.home", createTempDir().toString())
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_be638fb_4010e7e/rev_be638fb-4010e7e/core/src/test/java/org/elasticsearch/index/analysis/commongrams/CommonGramsTokenFilterFactoryTests.java;<<<<<<< MINE
            .loadFromClasspath("org/elasticsearch/index/analysis/commongrams/commongrams_query_mode.json")
                .put("path.home", createHome())
=======
                .loadFromStream(json, getClass().getResourceAsStream(json))
                .put("path.home", createTempDir().toString())
>>>>>>> YOURS;<<<<<<< MINE
            .loadFromClasspath("org/elasticsearch/index/analysis/commongrams/commongrams_query_mode.json")
                .put("path.home", createHome())
=======
                .loadFromStream(json, getClass().getResourceAsStream(json))
                .put("path.home", createTempDir().toString())
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_be638fb_4010e7e/rev_be638fb-4010e7e/plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java;<<<<<<< MINE
public AnalysisService createAnalysisService() throws IOException {
        InputStream empty_dict = getClass().getResourceAsStream("empty_user_dict.txt");
        InputStream dict = getClass().getResourceAsStream("user_dict.txt");
        Path home = createTempDir();
        Path config = home.resolve("config");
        Files.createDirectory(config);
        Files.copy(empty_dict, config.resolve("empty_user_dict.txt"));
        Files.copy(dict, config.resolve("user_dict.txt"));

=======
public AnalysisService createAnalysisService() {
        String json = "/org/elasticsearch/index/analysis/kuromoji_analysis.json";
>>>>>>> YOURS;<<<<<<< MINE
    public AnalysisService createAnalysisService() throws IOException {
        InputStream empty_dict = getClass().getResourceAsStream("empty_user_dict.txt");
        InputStream dict = getClass().getResourceAsStream("user_dict.txt");
        Path home = createTempDir();
        Path config = home.resolve("config");
        Files.createDirectory(config);
        Files.copy(empty_dict, config.resolve("empty_user_dict.txt"));
        Files.copy(dict, config.resolve("user_dict.txt"));

=======
    public AnalysisService createAnalysisService() {
        String json = "/org/elasticsearch/index/analysis/kuromoji_analysis.json";
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_be638fb_4010e7e/rev_be638fb-4010e7e/plugins/analysis-kuromoji/src/test/java/org/elasticsearch/index/analysis/KuromojiAnalysisTests.java;<<<<<<< MINE
                .put("path.home", home)
                .loadFromClasspath("org/elasticsearch/index/analysis/kuromoji_analysis.json")
=======
                .put("path.home", createTempDir())
                .loadFromStream(json, getClass().getResourceAsStream(json))
>>>>>>> YOURS;<<<<<<< MINE
                .put("path.home", home)
                .loadFromClasspath("org/elasticsearch/index/analysis/kuromoji_analysis.json")
=======
                .put("path.home", createTempDir())
                .loadFromStream(json, getClass().getResourceAsStream(json))
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_260a929_34635a4/rev_260a929-34635a4/core/src/main/java/org/elasticsearch/index/query/GeoPolygonQueryBuilder.java;<<<<<<< MINE
        printBoostAndQueryName(builder);
=======
        if (queryName != null) {
            builder.field("_name", queryName);
        }
        if (coerce != null) {
            builder.field("coerce", coerce);
        }
        if (ignoreMalformed != null) {
            builder.field("ignore_malformed", ignoreMalformed);
        }
>>>>>>> YOURS;<<<<<<< MINE
        printBoostAndQueryName(builder);
=======
        if (queryName != null) {
            builder.field("_name", queryName);
        }
        if (coerce != null) {
            builder.field("coerce", coerce);
        }
        if (ignoreMalformed != null) {
            builder.field("ignore_malformed", ignoreMalformed);
        }
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_260a929_34635a4/rev_260a929-34635a4/core/src/main/java/org/elasticsearch/index/query/GeoDistanceRangeQueryBuilder.java;<<<<<<< MINE
        printBoostAndQueryName(builder);
=======
        if (queryName != null) {
            builder.field("_name", queryName);
        }
        if (coerce != null) {
            builder.field("coerce", coerce);
        }
        if (ignoreMalformed != null) {
            builder.field("ignore_malformed", ignoreMalformed);
        }
>>>>>>> YOURS;<<<<<<< MINE
        printBoostAndQueryName(builder);
=======
        if (queryName != null) {
            builder.field("_name", queryName);
        }
        if (coerce != null) {
            builder.field("coerce", coerce);
        }
        if (ignoreMalformed != null) {
            builder.field("ignore_malformed", ignoreMalformed);
        }
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_260a929_34635a4/rev_260a929-34635a4/core/src/main/java/org/elasticsearch/index/query/GeoDistanceQueryBuilder.java;<<<<<<< MINE
        printBoostAndQueryName(builder);
=======
        if (queryName != null) {
            builder.field("_name", queryName);
        }
        if (coerce != null) {
            builder.field("coerce", coerce);
        }
        if (ignoreMalformed != null) {
            builder.field("ignore_malformed", ignoreMalformed);
        }
>>>>>>> YOURS;<<<<<<< MINE
        printBoostAndQueryName(builder);
=======
        if (queryName != null) {
            builder.field("_name", queryName);
        }
        if (coerce != null) {
            builder.field("coerce", coerce);
        }
        if (ignoreMalformed != null) {
            builder.field("ignore_malformed", ignoreMalformed);
        }
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_3843ae4_501a199/rev_3843ae4-501a199/core/src/main/java/org/elasticsearch/index/query/TermsQueryBuilder.java;<<<<<<< MINE
=======
>>>>>>> YOURS;<<<<<<< MINE
=======
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4c5cfd0_5496a50/rev_4c5cfd0-5496a50/core/src/test/java/org/elasticsearch/snapshots/AbstractSnapshotIntegTestCase.java;<<<<<<< MINE
            .extendArray("plugin.types", MockRepository.Plugin.class.getName()).build();
=======
                // Rebalancing is causing some checks after restore to randomly fail
                // due to https://github.com/elastic/elasticsearch/issues/9421
                .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)
                .extendArray("plugin.types", MockRepositoryPlugin.class.getName()).build();
>>>>>>> YOURS;<<<<<<< MINE
            .extendArray("plugin.types", MockRepository.Plugin.class.getName()).build();
=======
                // Rebalancing is causing some checks after restore to randomly fail
                // due to https://github.com/elastic/elasticsearch/issues/9421
                .put(EnableAllocationDecider.CLUSTER_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)
                .extendArray("plugin.types", MockRepositoryPlugin.class.getName()).build();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_8757af2_8ff1efb/rev_8757af2-8ff1efb/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
        childFilter = shardContext.bitsetFilter(nestedObjectMapper.nestedTypeFilter());
        parentObjectMapper = shardContext.nestedScope().nextLevel(nestedObjectMapper);
=======
        childFilter = nestedObjectMapper.nestedTypeFilter();
        parentObjectMapper = parseContext.nestedScope().nextLevel(nestedObjectMapper);
>>>>>>> YOURS;<<<<<<< MINE
        childFilter = shardContext.bitsetFilter(nestedObjectMapper.nestedTypeFilter());
        parentObjectMapper = shardContext.nestedScope().nextLevel(nestedObjectMapper);
=======
        childFilter = nestedObjectMapper.nestedTypeFilter();
        parentObjectMapper = parseContext.nestedScope().nextLevel(nestedObjectMapper);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_084a610_db5e225/rev_084a610-db5e225/core/src/main/java/org/elasticsearch/index/query/NestedQueryParser.java;<<<<<<< MINE
                ParsedQuery parsedQuery = new ParsedQuery(innerQuery, shardContext.copyNamedQueries());
                InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.v2(), parsedQuery, null, getParentObjectMapper(), nestedObjectMapper);
                String name = innerHits.v1() != null ? innerHits.v1() : path;
                shardContext.addInnerHits(name, nestedInnerHits);
=======
                ParsedQuery parsedQuery = new ParsedQuery(innerQuery, parseContext.copyNamedQueries());
                InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.getSubSearchContext(), parsedQuery, null, getParentObjectMapper(), nestedObjectMapper);
                String name = innerHits.getName() != null ? innerHits.getName() : path;
                parseContext.addInnerHits(name, nestedInnerHits);
>>>>>>> YOURS;<<<<<<< MINE
                ParsedQuery parsedQuery = new ParsedQuery(innerQuery, shardContext.copyNamedQueries());
                InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.v2(), parsedQuery, null, getParentObjectMapper(), nestedObjectMapper);
                String name = innerHits.v1() != null ? innerHits.v1() : path;
                shardContext.addInnerHits(name, nestedInnerHits);
=======
                ParsedQuery parsedQuery = new ParsedQuery(innerQuery, parseContext.copyNamedQueries());
                InnerHitsContext.NestedInnerHits nestedInnerHits = new InnerHitsContext.NestedInnerHits(innerHits.getSubSearchContext(), parsedQuery, null, getParentObjectMapper(), nestedObjectMapper);
                String name = innerHits.getName() != null ? innerHits.getName() : path;
                parseContext.addInnerHits(name, nestedInnerHits);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java;<<<<<<< MINE
            client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();
=======
            client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreMode("max")).execute().actionGet();
>>>>>>> YOURS;<<<<<<< MINE
            client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();
=======
            client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreMode("max")).execute().actionGet();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreMode("max")).execute().actionGet();
>>>>>>> YOURS;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", termQuery("field2", parentChildIndexGenerator.getQueryValue())).scoreMode("max")).execute().actionGet();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", matchAllQuery()).scoreType(ScoreType.MAX)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", matchAllQuery()).scoreMode("max")).execute().actionGet();
>>>>>>> YOURS;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", matchAllQuery()).scoreType(ScoreType.MAX)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery("child", matchAllQuery()).scoreMode("max")).execute().actionGet();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java;<<<<<<< MINE
            client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();
=======
            client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).scoreMode("score")).execute().actionGet();
>>>>>>> YOURS;<<<<<<< MINE
            client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();
=======
            client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).scoreMode("score")).execute().actionGet();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).scoreMode("score")).execute().actionGet();
>>>>>>> YOURS;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", termQuery("field1", parentChildIndexGenerator.getQueryValue())).scoreMode("score")).execute().actionGet();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchBenchmark.java;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", matchAllQuery()).score(true)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", matchAllQuery()).scoreMode("score")).execute().actionGet();
>>>>>>> YOURS;<<<<<<< MINE
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", matchAllQuery()).score(true)).execute().actionGet();
=======
            SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery("parent", matchAllQuery()).scoreMode("score")).execute().actionGet();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d49a744_2c618a1/rev_d49a744-2c618a1/core/src/test/java/org/elasticsearch/benchmark/search/child/ChildSearchShortCircuitBenchmark.java;<<<<<<< MINE
                        .setQuery(hasChildQuery("child", matchQuery("field2", i)).scoreType(ScoreType.MAX))
=======
                        .setQuery(hasChildQuery("child", matchQuery("field2", i)).scoreMode("max"))
>>>>>>> YOURS;<<<<<<< MINE
                        .setQuery(hasChildQuery("child", matchQuery("field2", i)).scoreType(ScoreType.MAX))
=======
                        .setQuery(hasChildQuery("child", matchQuery("field2", i)).scoreMode("max"))
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/JLHScore.java;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/PercentageScore.java;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/NXYSignificanceHeuristic.java;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/search/aggregations/bucket/significant/heuristics/GND.java;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS;<<<<<<< MINE
                throws IOException, QueryShardException {
=======
                throws IOException, ParsingException {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires 'path' field");
=======
                throw new ParsingException(parseContext, "[nested] requires 'path' field");
>>>>>>> YOURS;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires 'path' field");
=======
                throw new ParsingException(parseContext, "[nested] requires 'path' field");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires either 'query' or 'filter' field");
=======
                throw new ParsingException(parseContext, "[nested] requires either 'query' or 'filter' field");
>>>>>>> YOURS;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires either 'query' or 'filter' field");
=======
                throw new ParsingException(parseContext, "[nested] requires either 'query' or 'filter' field");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires 'path' field");
=======
                throw new ParsingException(parseContext, "[nested] requires 'path' field");
>>>>>>> YOURS;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires 'path' field");
=======
                throw new ParsingException(parseContext, "[nested] requires 'path' field");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires either 'query' or 'filter' field");
=======
                throw new ParsingException(parseContext, "[nested] requires either 'query' or 'filter' field");
>>>>>>> YOURS;<<<<<<< MINE
                throw new QueryShardException(shardContext, "[nested] requires either 'query' or 'filter' field");
=======
                throw new ParsingException(parseContext, "[nested] requires either 'query' or 'filter' field");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
            throw new QueryShardException(shardContext, "[nested] failed to find nested object under path [" + path + "]");
=======
            throw new ParsingException(parseContext, "[nested] failed to find nested object under path [" + path + "]");
>>>>>>> YOURS;<<<<<<< MINE
            throw new QueryShardException(shardContext, "[nested] failed to find nested object under path [" + path + "]");
=======
            throw new ParsingException(parseContext, "[nested] failed to find nested object under path [" + path + "]");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/main/java/org/elasticsearch/index/query/support/NestedInnerQueryParseSupport.java;<<<<<<< MINE
            throw new QueryShardException(shardContext, "[nested] nested object under path [" + path + "] is not of nested type");
=======
            throw new ParsingException(parseContext, "[nested] nested object under path [" + path + "] is not of nested type");
>>>>>>> YOURS;<<<<<<< MINE
            throw new QueryShardException(shardContext, "[nested] nested object under path [" + path + "] is not of nested type");
=======
            throw new ParsingException(parseContext, "[nested] nested object under path [" + path + "] is not of nested type");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/test/java/org/elasticsearch/index/query/IndexQueryParserFilterDateRangeTimezoneTests.java;<<<<<<< MINE
        } catch (QueryShardException e) {
=======
        } catch (ParsingException e) {
>>>>>>> YOURS;<<<<<<< MINE
        } catch (QueryShardException e) {
=======
        } catch (ParsingException e) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/test/java/org/elasticsearch/index/query/IndexQueryParserFilterDateRangeTimezoneTests.java;<<<<<<< MINE
        } catch (QueryShardException e) {
=======
        } catch (ParsingException e) {
>>>>>>> YOURS;<<<<<<< MINE
        } catch (QueryShardException e) {
=======
        } catch (ParsingException e) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/test/java/org/elasticsearch/percolator/PercolatorBackwardsCompatibilityIT.java;<<<<<<< MINE
            assertThat(e.getRootCause(), instanceOf(QueryShardException.class));
=======
            assertThat(e.getRootCause(), instanceOf(ParsingException.class));
>>>>>>> YOURS;<<<<<<< MINE
            assertThat(e.getRootCause(), instanceOf(QueryShardException.class));
=======
            assertThat(e.getRootCause(), instanceOf(ParsingException.class));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_197313c_c8d1f7a/rev_197313c-c8d1f7a/core/src/test/java/org/elasticsearch/ESExceptionTests.java;<<<<<<< MINE
                new Throwable("this exception is unknown", new QueryShardException(new Index("foo"), "foobar", null) ), // somethin unknown
=======
                new Throwable("this exception is unknown", new ParsingException(new Index("foo"), 1, 2, "foobar", null) ), // somethin unknown
>>>>>>> YOURS;<<<<<<< MINE
                new Throwable("this exception is unknown", new QueryShardException(new Index("foo"), "foobar", null) ), // somethin unknown
=======
                new Throwable("this exception is unknown", new ParsingException(new Index("foo"), 1, 2, "foobar", null) ), // somethin unknown
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_394e551_dbb01f5/rev_394e551-dbb01f5/core/src/test/java/org/elasticsearch/search/functionscore/FunctionScoreFieldValueIT.java;<<<<<<< MINE

//        // don't permit an array of factors
//        try {
//          String querySource = "{" +
//            "\"query\": {" +
//            "  \"function_score\": {" +
//            "    \"query\": {" +
//            "      \"match\": {\"name\": \"foo\"}" +
//            "      }," +
//            "      \"functions\": [" +
//            "        {" +
//            "          \"field_value_factor\": {" +
//            "            \"field\": \"test\"," +
//            "            \"factor\": [1.2,2]" +
//            "          }" +
//            "        }" +
//            "      ]" +
//            "    }" +
//            "  }" +
//            "}";
//          response = client().prepareSearch("test")
//          .setSource(new BytesArray(querySource))
//                  .get();
//          assertFailures(response);
//        } catch (SearchPhaseExecutionException e) {
//          // This is fine, the query will throw an exception if executed
//          // locally, instead of just having failures
//        } NOCOMMIT fix this

=======
>>>>>>> YOURS;<<<<<<< MINE

//        // don't permit an array of factors
//        try {
//          String querySource = "{" +
//            "\"query\": {" +
//            "  \"function_score\": {" +
//            "    \"query\": {" +
//            "      \"match\": {\"name\": \"foo\"}" +
//            "      }," +
//            "      \"functions\": [" +
//            "        {" +
//            "          \"field_value_factor\": {" +
//            "            \"field\": \"test\"," +
//            "            \"factor\": [1.2,2]" +
//            "          }" +
//            "        }" +
//            "      ]" +
//            "    }" +
//            "  }" +
//            "}";
//          response = client().prepareSearch("test")
//          .setSource(new BytesArray(querySource))
//                  .get();
//          assertFailures(response);
//        } catch (SearchPhaseExecutionException e) {
//          // This is fine, the query will throw an exception if executed
//          // locally, instead of just having failures
//        } NOCOMMIT fix this

=======
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_394e551_dbb01f5/rev_394e551-dbb01f5/core/src/test/java/org/elasticsearch/search/rescore/QueryRescorerIT.java;<<<<<<< MINE
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(8)))
                        .boostMode(CombineFunction.REPLACE).add(ScoreFunctionBuilders.scriptFunction(new Script("1000.0f")))).setScoreMode(
                "total");
=======
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(8)),
                        ScoreFunctionBuilders.scriptFunction(new Script("1000.0f"))).boostMode(CombineFunction.REPLACE)).setScoreMode("total");
>>>>>>> YOURS;<<<<<<< MINE
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(8)))
                        .boostMode(CombineFunction.REPLACE).add(ScoreFunctionBuilders.scriptFunction(new Script("1000.0f")))).setScoreMode(
                "total");
=======
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(8)),
                        ScoreFunctionBuilders.scriptFunction(new Script("1000.0f"))).boostMode(CombineFunction.REPLACE)).setScoreMode("total");
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_394e551_dbb01f5/rev_394e551-dbb01f5/core/src/test/java/org/elasticsearch/search/rescore/QueryRescorerIT.java;<<<<<<< MINE
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(7)))
                        .boostMode(CombineFunction.REPLACE).add(ScoreFunctionBuilders.scriptFunction(new Script("10000.0f"))))
=======
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(7)),
                        ScoreFunctionBuilders.scriptFunction(new Script("10000.0f"))).boostMode(CombineFunction.REPLACE))
>>>>>>> YOURS;<<<<<<< MINE
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(7)))
                        .boostMode(CombineFunction.REPLACE).add(ScoreFunctionBuilders.scriptFunction(new Script("10000.0f"))))
=======
                QueryBuilders.functionScoreQuery(QueryBuilders.termQuery("field1", English.intToEnglish(7)),
                        ScoreFunctionBuilders.scriptFunction(new Script("10000.0f"))).boostMode(CombineFunction.REPLACE))
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_108f5c5_a798f4f/rev_108f5c5-a798f4f/core/src/main/java/org/elasticsearch/index/query/GeoShapeQueryBuilder.java;<<<<<<< MINE
        boolean hasStrategy = strategy != null;
        out.writeBoolean(hasStrategy);
        if (hasStrategy) {
            strategy.writeTo(out);
        }
=======
        if (strategy == null) {
            out.writeBoolean(false);
        } else {
            out.writeBoolean(true);
            strategy.writeTo(out);
        }
>>>>>>> YOURS;<<<<<<< MINE
        boolean hasStrategy = strategy != null;
        out.writeBoolean(hasStrategy);
        if (hasStrategy) {
            strategy.writeTo(out);
        }
=======
        if (strategy == null) {
            out.writeBoolean(false);
        } else {
            out.writeBoolean(true);
            strategy.writeTo(out);
        }
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_b364cf5_ebec4bd/rev_b364cf5-ebec4bd/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
                        null, null, null, null, null, new FsInfo(0, node1FSInfo), null, null, null, null),
=======
                        null,null,null,null,null,new FsInfo(0, node1FSInfo), null,null,null,null,null),
>>>>>>> YOURS;<<<<<<< MINE
                        null, null, null, null, null, new FsInfo(0, node1FSInfo), null, null, null, null),
=======
                        null,null,null,null,null,new FsInfo(0, node1FSInfo), null,null,null,null,null),
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_b364cf5_ebec4bd/rev_b364cf5-ebec4bd/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
                        null, null, null, null, null, new FsInfo(0, node2FSInfo), null, null, null, null),
=======
                        null,null,null,null,null, new FsInfo(0, node2FSInfo), null,null,null,null,null),
>>>>>>> YOURS;<<<<<<< MINE
                        null, null, null, null, null, new FsInfo(0, node2FSInfo), null, null, null, null),
=======
                        null,null,null,null,null, new FsInfo(0, node2FSInfo), null,null,null,null,null),
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_b364cf5_ebec4bd/rev_b364cf5-ebec4bd/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
                        null, null, null, null, null, new FsInfo(0, node3FSInfo), null, null, null, null)
=======
                        null,null,null,null,null, new FsInfo(0, node3FSInfo), null,null,null,null,null)
>>>>>>> YOURS;<<<<<<< MINE
                        null, null, null, null, null, new FsInfo(0, node3FSInfo), null, null, null, null)
=======
                        null,null,null,null,null, new FsInfo(0, node3FSInfo), null,null,null,null,null)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_1e5af7b_6a2fa73/rev_1e5af7b-6a2fa73/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java;<<<<<<< MINE
        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
        RoutingAllocation.Result result = strategy.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(result).build();

        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node2"))).build();
        result = strategy.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(result).build();
=======
        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
        RoutingTable prevRoutingTable = routingTable;
        routingTable = strategy.reroute(clusterState, "reroute").routingTable();
        clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
>>>>>>> YOURS;<<<<<<< MINE
        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1"))).build();
        RoutingAllocation.Result result = strategy.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(result).build();

        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).put(newNode("node2"))).build();
        result = strategy.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(result).build();
=======
        clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder().put(newNode("node1")).put(newNode("node2"))).build();
        RoutingTable prevRoutingTable = routingTable;
        routingTable = strategy.reroute(clusterState, "reroute").routingTable();
        clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_1e5af7b_6a2fa73/rev_1e5af7b-6a2fa73/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java;<<<<<<< MINE
        RoutingTable prevRoutingTable = clusterState.routingTable();
        result = strategy.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(result).build();
=======
        prevRoutingTable = routingTable;
        routingTable = strategy.reroute(clusterState, "reroute").routingTable();
        clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
>>>>>>> YOURS;<<<<<<< MINE
        RoutingTable prevRoutingTable = clusterState.routingTable();
        result = strategy.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(result).build();
=======
        prevRoutingTable = routingTable;
        routingTable = strategy.reroute(clusterState, "reroute").routingTable();
        clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_1e5af7b_6a2fa73/rev_1e5af7b-6a2fa73/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java;<<<<<<< MINE
        rerouteResult = allocation.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(rerouteResult).build();
=======
        rerouteResult = allocation.reroute(clusterState, "reroute");
        clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
>>>>>>> YOURS;<<<<<<< MINE
        rerouteResult = allocation.reroute(clusterState);
        clusterState = ClusterState.builder(clusterState).routingResult(rerouteResult).build();
=======
        rerouteResult = allocation.reroute(clusterState, "reroute");
        clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_95e8a39_fafeb3a/rev_95e8a39-fafeb3a/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java;<<<<<<< MINE
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,
                AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);
=======
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,
            AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);
>>>>>>> YOURS;<<<<<<< MINE
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,
                AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);
=======
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,
            AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_95e8a39_fafeb3a/rev_95e8a39-fafeb3a/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java;<<<<<<< MINE
                .field("state", state())
                .field("primary", primary())
                .field("primary_term", primaryTerm())
                .field("node", currentNodeId())
                .field("relocating_node", relocatingNodeId())
                .field("shard", shardId().id())
                .field("index", shardId().index().name())
                .field("version", version);
        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE){
=======
            .field("state", state())
            .field("primary", primary())
            .field("node", currentNodeId())
            .field("relocating_node", relocatingNodeId())
            .field("shard", shardId().id())
            .field("index", shardId().index().name())
            .field("version", version);
        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {
>>>>>>> YOURS;<<<<<<< MINE
                .field("state", state())
                .field("primary", primary())
                .field("primary_term", primaryTerm())
                .field("node", currentNodeId())
                .field("relocating_node", relocatingNodeId())
                .field("shard", shardId().id())
                .field("index", shardId().index().name())
                .field("version", version);
        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE){
=======
            .field("state", state())
            .field("primary", primary())
            .field("node", currentNodeId())
            .field("relocating_node", relocatingNodeId())
            .field("shard", shardId().id())
            .field("index", shardId().index().name())
            .field("version", version);
        if (expectedShardSize != UNAVAILABLE_EXPECTED_SHARD_SIZE) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_95e8a39_fafeb3a/rev_95e8a39-fafeb3a/core/src/main/java/org/elasticsearch/rest/action/bulk/RestBulkAction.java;<<<<<<< MINE
                    builder.startObject(itemResponse.getOpType());
                    if (itemResponse.isFailed()) {
                        builder.field(Fields._INDEX, itemResponse.getIndex());
                        builder.field(Fields._TYPE, itemResponse.getType());
                        builder.field(Fields._ID, itemResponse.getId());
                        builder.field(Fields.STATUS, itemResponse.getFailure().getStatus().getStatus());
                        builder.startObject(Fields.ERROR);
                        ElasticsearchException.toXContent(builder, request, itemResponse.getFailure().getCause());
                        builder.endObject();
                    } else {
                        final DocWriteResponse docResponse = itemResponse.getResponse();
                        docResponse.toXContent(builder, request);
                        RestStatus status = docResponse.getShardInfo().status();
                        if (docResponse instanceof DeleteResponse) {
                            DeleteResponse deleteResponse = (DeleteResponse) docResponse;
                            if (deleteResponse.isFound() == false) {
                                status = RestStatus.NOT_FOUND;
                            }
                        } else if (docResponse instanceof IndexResponse) {
                            IndexResponse indexResponse = (IndexResponse) docResponse;
                            if (indexResponse.isCreated()) {
                                status = RestStatus.CREATED;
                            }
                        } else if (docResponse instanceof UpdateResponse) {
                            UpdateResponse updateResponse = (UpdateResponse) docResponse;
                            if (updateResponse.isCreated()) {
                                status = RestStatus.CREATED;
                            }
                        }
                        builder.field(Fields.STATUS, status.getStatus());
                    }
                    builder.endObject();
=======
                    itemResponse.toXContent(builder, request);
>>>>>>> YOURS;<<<<<<< MINE
                    builder.startObject(itemResponse.getOpType());
                    if (itemResponse.isFailed()) {
                        builder.field(Fields._INDEX, itemResponse.getIndex());
                        builder.field(Fields._TYPE, itemResponse.getType());
                        builder.field(Fields._ID, itemResponse.getId());
                        builder.field(Fields.STATUS, itemResponse.getFailure().getStatus().getStatus());
                        builder.startObject(Fields.ERROR);
                        ElasticsearchException.toXContent(builder, request, itemResponse.getFailure().getCause());
                        builder.endObject();
                    } else {
                        final DocWriteResponse docResponse = itemResponse.getResponse();
                        docResponse.toXContent(builder, request);
                        RestStatus status = docResponse.getShardInfo().status();
                        if (docResponse instanceof DeleteResponse) {
                            DeleteResponse deleteResponse = (DeleteResponse) docResponse;
                            if (deleteResponse.isFound() == false) {
                                status = RestStatus.NOT_FOUND;
                            }
                        } else if (docResponse instanceof IndexResponse) {
                            IndexResponse indexResponse = (IndexResponse) docResponse;
                            if (indexResponse.isCreated()) {
                                status = RestStatus.CREATED;
                            }
                        } else if (docResponse instanceof UpdateResponse) {
                            UpdateResponse updateResponse = (UpdateResponse) docResponse;
                            if (updateResponse.isCreated()) {
                                status = RestStatus.CREATED;
                            }
                        }
                        builder.field(Fields.STATUS, status.getStatus());
                    }
                    builder.endObject();
=======
                    itemResponse.toXContent(builder, request);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4f44568_bc8745d/rev_4f44568-bc8745d/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java;<<<<<<< MINE
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, int expectedValue) {
                assertEquals(expectedValue, recoverySettings.fileChunkSize().bytesAsInt());
            }
        });
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS_SETTING.getKey(), randomIntBetween(1, 200), new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, int expectedValue) {
                assertEquals(expectedValue, recoverySettings.translogOps());
            }
        });
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE_SETTING.getKey(), randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, int expectedValue) {
                assertEquals(expectedValue, recoverySettings.translogSize().bytesAsInt());
            }
        });
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS_SETTING.getKey(), randomIntBetween(1, 200), new Validator() {
=======
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS, randomIntBetween(1, 200), new Validator() {
>>>>>>> YOURS;<<<<<<< MINE
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, int expectedValue) {
                assertEquals(expectedValue, recoverySettings.fileChunkSize().bytesAsInt());
            }
        });
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_OPS_SETTING.getKey(), randomIntBetween(1, 200), new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, int expectedValue) {
                assertEquals(expectedValue, recoverySettings.translogOps());
            }
        });
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_TRANSLOG_SIZE_SETTING.getKey(), randomIntBetween(1, 200), ByteSizeUnit.BYTES, new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, int expectedValue) {
                assertEquals(expectedValue, recoverySettings.translogSize().bytesAsInt());
            }
        });
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS_SETTING.getKey(), randomIntBetween(1, 200), new Validator() {
=======
        innerTestSettings(RecoverySettings.INDICES_RECOVERY_CONCURRENT_STREAMS, randomIntBetween(1, 200), new Validator() {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4f44568_bc8745d/rev_4f44568-bc8745d/core/src/test/java/org/elasticsearch/recovery/RecoverySettingsTests.java;<<<<<<< MINE

        innerTestSettings(RecoverySettings.INDICES_RECOVERY_COMPRESS_SETTING.getKey(), false, new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, boolean expectedValue) {
                assertEquals(expectedValue, recoverySettings.compress());
            }
        });
=======
>>>>>>> YOURS;<<<<<<< MINE

        innerTestSettings(RecoverySettings.INDICES_RECOVERY_COMPRESS_SETTING.getKey(), false, new Validator() {
            @Override
            public void validate(RecoverySettings recoverySettings, boolean expectedValue) {
                assertEquals(expectedValue, recoverySettings.compress());
            }
        });
=======
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_91289b8_d5f8d8e/rev_91289b8-d5f8d8e/core/src/test/java/org/elasticsearch/cluster/settings/ClusterSettingsIT.java;<<<<<<< MINE
public void testMissingUnitsLenient() {
        try {
            createNode(Settings.builder().put(Settings.SETTINGS_REQUIRE_UNITS, "false").build());
            assertAcked(prepareCreate("test"));
            ensureGreen();
            client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", "10")).execute().actionGet();
            client().admin().indices().prepareDelete("test").get();
        } finally {
            // Restore the default so subsequent tests require units:
            assertFalse(Settings.getSettingsRequireUnits());
            Settings.setSettingsRequireUnits(true);
        }
    }
=======
>>>>>>> YOURS;<<<<<<< MINE
    public void testMissingUnitsLenient() {
        try {
            createNode(Settings.builder().put(Settings.SETTINGS_REQUIRE_UNITS, "false").build());
            assertAcked(prepareCreate("test"));
            ensureGreen();
            client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put("index.refresh_interval", "10")).execute().actionGet();
            client().admin().indices().prepareDelete("test").get();
        } finally {
            // Restore the default so subsequent tests require units:
            assertFalse(Settings.getSettingsRequireUnits());
            Settings.setSettingsRequireUnits(true);
        }
    }

=======
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ad7fec8_e9bb3d3/rev_ad7fec8-e9bb3d3/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
                .put(HUNSPELL_IGNORE_CASE.getKey(), true)
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
                .put(HUNSPELL_IGNORE_CASE, true)
>>>>>>> YOURS;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
                .put(HUNSPELL_IGNORE_CASE.getKey(), true)
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
                .put(HUNSPELL_IGNORE_CASE, true)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ad7fec8_e9bb3d3/rev_ad7fec8-e9bb3d3/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
                .put(HUNSPELL_IGNORE_CASE.getKey(), true)
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
                .put(HUNSPELL_IGNORE_CASE, true)
>>>>>>> YOURS;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
                .put(HUNSPELL_IGNORE_CASE.getKey(), true)
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
                .put(HUNSPELL_IGNORE_CASE, true)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ad7fec8_e9bb3d3/rev_ad7fec8-e9bb3d3/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/no_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/no_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
>>>>>>> YOURS;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/no_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/no_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ad7fec8_e9bb3d3/rev_ad7fec8-e9bb3d3/core/src/test/java/org/elasticsearch/indices/analyze/HunspellServiceIT.java;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/two_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/two_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
>>>>>>> YOURS;<<<<<<< MINE
                .put("path.conf", getDataPath("/indices/analyze/two_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())
=======
                .put(Environment.PATH_CONF_SETTING.getKey(), getDataPath("/indices/analyze/two_aff_conf_dir"))
                .put(HUNSPELL_LAZY_LOAD, randomBoolean())
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e6f9cbc_ec31fec/rev_e6f9cbc-ec31fec/core/src/main/java/org/elasticsearch/search/aggregations/bucket/filter/FilterAggregator.java;<<<<<<< MINE
            Query filter = this.filter.toQuery(context.searchContext().indexShard().getQueryShardContext());
            return new FilterAggregator(name, filter, factories, context, parent, pipelineAggregators, metaData);
=======
            IndexSearcher contextSearcher = context.searchContext().searcher();
            if (searcher != contextSearcher) {
                searcher = contextSearcher;
                weight = contextSearcher.createNormalizedWeight(filter, false);
            }
            return new FilterAggregator(name, weight, factories, context, parent, pipelineAggregators, metaData);
>>>>>>> YOURS;<<<<<<< MINE
            Query filter = this.filter.toQuery(context.searchContext().indexShard().getQueryShardContext());
            return new FilterAggregator(name, filter, factories, context, parent, pipelineAggregators, metaData);
=======
            IndexSearcher contextSearcher = context.searchContext().searcher();
            if (searcher != contextSearcher) {
                searcher = contextSearcher;
                weight = contextSearcher.createNormalizedWeight(filter, false);
            }
            return new FilterAggregator(name, weight, factories, context, parent, pipelineAggregators, metaData);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e5a5067_77a1649/rev_e5a5067-77a1649/core/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParserTests.java;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e5a5067_77a1649/rev_e5a5067-77a1649/core/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParserTests.java;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e5a5067_77a1649/rev_e5a5067-77a1649/core/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParserTests.java;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e5a5067_77a1649/rev_e5a5067-77a1649/core/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParserTests.java;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_e5a5067_77a1649/rev_e5a5067-77a1649/core/src/test/java/org/elasticsearch/search/aggregations/bucket/geogrid/GeoHashGridParserTests.java;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS;<<<<<<< MINE
=======
        SearchContext searchContext = new TestSearchContext(null);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
        DiscoveryNode node_0 = new DiscoveryNode("node_0", DummyTransportAddress.INSTANCE, Version.CURRENT);
        DiscoveryNode node_1 = new DiscoveryNode("node_1", DummyTransportAddress.INSTANCE, Version.CURRENT);

=======
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
        DiscoveryNode node_0 = new DiscoveryNode("node_0", DummyTransportAddress.INSTANCE, Version.CURRENT);
        DiscoveryNode node_1 = new DiscoveryNode("node_1", DummyTransportAddress.INSTANCE, Version.CURRENT);

=======
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        MetaData metaData = MetaData.builder()
                .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))
                .build();
        final IndexMetaData indexMetaData = metaData.index("test");

        ShardRouting test_0 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        MetaData metaData = MetaData.builder()
                .put(IndexMetaData.builder("test").settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(1))
                .build();
        final IndexMetaData indexMetaData = metaData.index("test");

        ShardRouting test_0 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_1 = ShardRouting.newUnassigned("test", 1, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_1 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 1, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_1 = ShardRouting.newUnassigned("test", 1, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_1 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 1, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_2 = ShardRouting.newUnassigned("test", 2, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_2 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 2, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_2 = ShardRouting.newUnassigned("test", 2, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_2 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 2, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_3 = ShardRouting.newUnassigned("test", 3, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_3 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 3, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_3 = ShardRouting.newUnassigned("test", 3, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_3 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 3, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        final Index index = new Index("test", "_na_");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        final Index index = new Index("test", "_na_");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_1 = ShardRouting.newUnassigned("test", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_1 = ShardRouting.newUnassigned("test", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_2 = ShardRouting.newUnassigned("test", 2, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_2 = ShardRouting.newUnassigned(index, 2, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_2 = ShardRouting.newUnassigned("test", 2, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_2 = ShardRouting.newUnassigned(index, 2, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting test_3 = ShardRouting.newUnassigned("test", 3, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_3 = ShardRouting.newUnassigned(index, 3, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_3 = ShardRouting.newUnassigned("test", 3, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_3 = ShardRouting.newUnassigned(index, 3, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/allocation/decider/DiskThresholdDeciderUnitTests.java;<<<<<<< MINE
        ShardRouting other_0 = ShardRouting.newUnassigned("other", 0, null, 1, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting other_0 = ShardRouting.newUnassigned(new Index("other", "_NA_"), 0, null, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting other_0 = ShardRouting.newUnassigned("other", 0, null, 1, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting other_0 = ShardRouting.newUnassigned(new Index("other", "_NA_"), 0, null, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/AllocationIdTests.java;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting shard = ShardRouting.newUnassigned("test", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", -1);
=======
        ShardRouting shard = ShardRouting.newUnassigned(new Index("test","_na_"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
        shard.initialize("node1", null, -1);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingTests.java;<<<<<<< MINE
        long term = randomInt(200);
        ShardRouting routing = TestShardRouting.newShardRouting("foo", 1, "node_1", null, null, term, false, ShardRoutingState.INITIALIZING, 1);
=======
        ShardRouting routing = TestShardRouting.newShardRouting("foo", 1, "node_1", null, null, false, ShardRoutingState.INITIALIZING);
>>>>>>> YOURS;<<<<<<< MINE
        long term = randomInt(200);
        ShardRouting routing = TestShardRouting.newShardRouting("foo", 1, "node_1", null, null, term, false, ShardRoutingState.INITIALIZING, 1);
=======
        ShardRouting routing = TestShardRouting.newShardRouting("foo", 1, "node_1", null, null, false, ShardRoutingState.INITIALIZING);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingTests.java;<<<<<<< MINE
        long term = randomInt(200);
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, term, false, ShardRoutingState.UNASSIGNED, 1);
        ShardRouting unassignedShard1 = TestShardRouting.newShardRouting("test", 1, null, term, false, ShardRoutingState.UNASSIGNED, 1);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "1", term, randomBoolean(), ShardRoutingState.INITIALIZING, 1);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "1", term, randomBoolean(), ShardRoutingState.INITIALIZING, 1);
=======
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, false, ShardRoutingState.UNASSIGNED);
        ShardRouting unassignedShard1 = TestShardRouting.newShardRouting("test", 1, null, false, ShardRoutingState.UNASSIGNED);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "1", randomBoolean(), ShardRoutingState.INITIALIZING);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "1", randomBoolean(), ShardRoutingState.INITIALIZING);
>>>>>>> YOURS;<<<<<<< MINE
        long term = randomInt(200);
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, term, false, ShardRoutingState.UNASSIGNED, 1);
        ShardRouting unassignedShard1 = TestShardRouting.newShardRouting("test", 1, null, term, false, ShardRoutingState.UNASSIGNED, 1);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "1", term, randomBoolean(), ShardRoutingState.INITIALIZING, 1);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "1", term, randomBoolean(), ShardRoutingState.INITIALIZING, 1);
=======
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, false, ShardRoutingState.UNASSIGNED);
        ShardRouting unassignedShard1 = TestShardRouting.newShardRouting("test", 1, null, false, ShardRoutingState.UNASSIGNED);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "1", randomBoolean(), ShardRoutingState.INITIALIZING);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "1", randomBoolean(), ShardRoutingState.INITIALIZING);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingTests.java;<<<<<<< MINE
        return TestShardRouting.newShardRouting(index, shard, state == ShardRoutingState.UNASSIGNED ? null : "1", randomInt(200),
                state != ShardRoutingState.UNASSIGNED && randomBoolean(), state, randomInt(5));
=======
        return TestShardRouting.newShardRouting(index, shard, state == ShardRoutingState.UNASSIGNED ? null : "1", state != ShardRoutingState.UNASSIGNED && randomBoolean(), state);
>>>>>>> YOURS;<<<<<<< MINE
        return TestShardRouting.newShardRouting(index, shard, state == ShardRoutingState.UNASSIGNED ? null : "1", randomInt(200),
                state != ShardRoutingState.UNASSIGNED && randomBoolean(), state, randomInt(5));
=======
        return TestShardRouting.newShardRouting(index, shard, state == ShardRoutingState.UNASSIGNED ? null : "1", state != ShardRoutingState.UNASSIGNED && randomBoolean(), state);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingTests.java;<<<<<<< MINE
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, randomInt(200), false, ShardRoutingState.UNASSIGNED, 1);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "node1", randomInt(200), randomBoolean(), ShardRoutingState.INITIALIZING, 1);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "node1", randomInt(200), randomBoolean(), ShardRoutingState.INITIALIZING, 1);
=======
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, false, ShardRoutingState.UNASSIGNED);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "node1", randomBoolean(), ShardRoutingState.INITIALIZING);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "node1", randomBoolean(), ShardRoutingState.INITIALIZING);
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, randomInt(200), false, ShardRoutingState.UNASSIGNED, 1);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "node1", randomInt(200), randomBoolean(), ShardRoutingState.INITIALIZING, 1);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "node1", randomInt(200), randomBoolean(), ShardRoutingState.INITIALIZING, 1);
=======
        ShardRouting unassignedShard0 = TestShardRouting.newShardRouting("test", 0, null, false, ShardRoutingState.UNASSIGNED);
        ShardRouting initializingShard0 = TestShardRouting.newShardRouting("test", 0, "node1", randomBoolean(), ShardRoutingState.INITIALIZING);
        ShardRouting initializingShard1 = TestShardRouting.newShardRouting("test", 1, "node1", randomBoolean(), ShardRoutingState.INITIALIZING);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/ShardRoutingHelper.java;<<<<<<< MINE
        return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primaryTerm(), routing.primary(), routing.state(), routing.version(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());
=======
        return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primary(), routing.state(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());
>>>>>>> YOURS;<<<<<<< MINE
        return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primaryTerm(), routing.primary(), routing.state(), routing.version(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());
=======
        return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primary(), routing.state(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/routing/UnassignedInfoTests.java;<<<<<<< MINE
        ShardRouting shard = TestShardRouting.newShardRouting("test", 1, null, null, null, 1, true, ShardRoutingState.UNASSIGNED, 1, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
=======
        ShardRouting shard = TestShardRouting.newShardRouting("test", 1, null, null, null, true, ShardRoutingState.UNASSIGNED, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting shard = TestShardRouting.newShardRouting("test", 1, null, null, null, 1, true, ShardRoutingState.UNASSIGNED, 1, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
=======
        ShardRouting shard = TestShardRouting.newShardRouting("test", 1, null, null, null, true, ShardRoutingState.UNASSIGNED, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/metadata/ToAndFromJsonMetaDataTests.java;<<<<<<< MINE
        assertThat(indexMetaData.primaryTerm(0), equalTo(2l));
        assertThat(indexMetaData.primaryTerm(1), equalTo(2l));
        assertThat(indexMetaData.getCreationDate(), equalTo(-1l));
=======
        assertThat(indexMetaData.getCreationDate(), equalTo(-1L));
>>>>>>> YOURS;<<<<<<< MINE
        assertThat(indexMetaData.primaryTerm(0), equalTo(2l));
        assertThat(indexMetaData.primaryTerm(1), equalTo(2l));
        assertThat(indexMetaData.getCreationDate(), equalTo(-1l));
=======
        assertThat(indexMetaData.getCreationDate(), equalTo(-1L));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/health/RoutingTableGenerator.java;<<<<<<< MINE
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primaryTerm, primary, ShardRoutingState.STARTED, 1);
=======
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primary, ShardRoutingState.STARTED);
>>>>>>> YOURS;<<<<<<< MINE
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primaryTerm, primary, ShardRoutingState.STARTED, 1);
=======
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primary, ShardRoutingState.STARTED);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/health/RoutingTableGenerator.java;<<<<<<< MINE
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primaryTerm, primary, ShardRoutingState.INITIALIZING, 1);
=======
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primary, ShardRoutingState.INITIALIZING);
>>>>>>> YOURS;<<<<<<< MINE
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primaryTerm, primary, ShardRoutingState.INITIALIZING, 1);
=======
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), null, null, primary, ShardRoutingState.INITIALIZING);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/health/RoutingTableGenerator.java;<<<<<<< MINE
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), "node_" + Integer.toString(node_id++), null, primaryTerm, primary, ShardRoutingState.RELOCATING, 1);
=======
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), "node_" + Integer.toString(node_id++), null, primary, ShardRoutingState.RELOCATING);
>>>>>>> YOURS;<<<<<<< MINE
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), "node_" + Integer.toString(node_id++), null, primaryTerm, primary, ShardRoutingState.RELOCATING, 1);
=======
                return TestShardRouting.newShardRouting(index, shardId, "node_" + Integer.toString(node_id++), "node_" + Integer.toString(node_id++), null, primary, ShardRoutingState.RELOCATING);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        final Index index = new Index("test", "_na_");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_0 = ShardRouting.newUnassigned("test", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        final Index index = new Index("test", "_na_");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
        ShardRouting test_1 = ShardRouting.newUnassigned("test", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        ShardRouting test_1 = ShardRouting.newUnassigned("test", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java;<<<<<<< MINE
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,
=======
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, unassignedInfo,
>>>>>>> YOURS;<<<<<<< MINE
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,
=======
        return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, unassignedInfo,
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/main/java/org/elasticsearch/cluster/routing/ShardRouting.java;<<<<<<< MINE
        sb.append(", v[").append(version).append("]");
        sb.append(", t[").append(primaryTerm).append("]");
=======
>>>>>>> YOURS;<<<<<<< MINE
        sb.append(", v[").append(version).append("]");
        sb.append(", t[").append(primaryTerm).append("]");
=======
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_4d0feff_b5aee20/rev_4d0feff-b5aee20/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java;<<<<<<< MINE
        seqNo = in.readVLong();
        primaryTerm = in.readVLong();
=======
        routedBasedOnClusterVersion = in.readVLong();
>>>>>>> YOURS;<<<<<<< MINE
        seqNo = in.readVLong();
        primaryTerm = in.readVLong();
=======
        routedBasedOnClusterVersion = in.readVLong();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_687aade_0b0a251/rev_687aade-0b0a251/core/src/test/java/org/elasticsearch/plugins/PluginCliTests.java;<<<<<<< MINE
        /*
        CliToolTestCase.CaptureOutputTerminal terminal = new CliToolTestCase.CaptureOutputTerminal();
=======
        MockTerminal terminal = new MockTerminal();
>>>>>>> YOURS;<<<<<<< MINE
        /*
        CliToolTestCase.CaptureOutputTerminal terminal = new CliToolTestCase.CaptureOutputTerminal();
=======
        MockTerminal terminal = new MockTerminal();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_d0cbb6b_12a6f36/rev_d0cbb6b-12a6f36/core/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java;<<<<<<< MINE
        ParsedDocument pd = new ParsedDocument(new StringField("uid", "test:id", Store.YES), new IntField("version", 1, Store.YES),
                new IntField("seqNo", 1, Store.YES), "id",
=======
        ParsedDocument pd = new ParsedDocument(new StringField("uid", "test:id", Store.YES), new LegacyIntField("version", 1, Store.YES), "id",
>>>>>>> YOURS;<<<<<<< MINE
        ParsedDocument pd = new ParsedDocument(new StringField("uid", "test:id", Store.YES), new IntField("version", 1, Store.YES),
                new IntField("seqNo", 1, Store.YES), "id",
=======
        ParsedDocument pd = new ParsedDocument(new StringField("uid", "test:id", Store.YES), new LegacyIntField("version", 1, Store.YES), "id",
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_838c7dd_ef4293a/rev_838c7dd-ef4293a/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
        final Index index = new Index("test", "_na_");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        final Index index = new Index("test", "0xdeadbeef");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS;<<<<<<< MINE
        final Index index = new Index("test", "_na_");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
=======
        final Index index = new Index("test", "0xdeadbeef");
        ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, "foo"));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_838c7dd_ef4293a/rev_838c7dd-ef4293a/core/src/test/java/org/elasticsearch/cluster/DiskUsageTests.java;<<<<<<< MINE
        ShardStats[] stats = new ShardStats[]{
                new ShardStats(test_0, new ShardPath(false, test0Path, test0Path, "0xdeadbeef", test_0.shardId()), commonStats0, null, null),
                new ShardStats(test_1, new ShardPath(false, test1Path, test1Path, "0xdeadbeef", test_1.shardId()), commonStats1, null, null)
=======
        ShardStats[] stats  = new ShardStats[] {
                new ShardStats(test_0, new ShardPath(false, test0Path, test0Path, test_0.shardId()), commonStats0 , null),
                new ShardStats(test_1, new ShardPath(false, test1Path, test1Path, test_1.shardId()), commonStats1 , null)
>>>>>>> YOURS;<<<<<<< MINE
        ShardStats[] stats = new ShardStats[]{
                new ShardStats(test_0, new ShardPath(false, test0Path, test0Path, "0xdeadbeef", test_0.shardId()), commonStats0, null, null),
                new ShardStats(test_1, new ShardPath(false, test1Path, test1Path, "0xdeadbeef", test_1.shardId()), commonStats1, null, null)
=======
        ShardStats[] stats  = new ShardStats[] {
                new ShardStats(test_0, new ShardPath(false, test0Path, test0Path, test_0.shardId()), commonStats0 , null),
                new ShardStats(test_1, new ShardPath(false, test1Path, test1Path, test_1.shardId()), commonStats1 , null)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_801d178_63b754a/rev_801d178-63b754a/core/src/main/java/org/elasticsearch/search/sort/FieldSortBuilder.java;<<<<<<< MINE
                    missing = parser.objectBytes();
=======
                    missing = parser.objectText();
                } else if (context.parseFieldMatcher().match(currentFieldName, REVERSE)) {
                    if (parser.booleanValue()) {
                        order = SortOrder.DESC;
                    }
                    // else we keep the default ASC
>>>>>>> YOURS;<<<<<<< MINE
                    missing = parser.objectBytes();
=======
                    missing = parser.objectText();
                } else if (context.parseFieldMatcher().match(currentFieldName, REVERSE)) {
                    if (parser.booleanValue()) {
                        order = SortOrder.DESC;
                    }
                    // else we keep the default ASC
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_7c8cdf4_b8227a7/rev_7c8cdf4-b8227a7/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java;<<<<<<< MINE
        assertThat(routingTable.index("test").shard(0).primaryShard().primaryTerm(), equalTo(2L));
=======
        assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(2L));
>>>>>>> YOURS;<<<<<<< MINE
        assertThat(routingTable.index("test").shard(0).primaryShard().primaryTerm(), equalTo(2L));
=======
        assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(2L));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_7c8cdf4_b8227a7/rev_7c8cdf4-b8227a7/core/src/test/java/org/elasticsearch/cluster/routing/allocation/PrimaryElectionRoutingTests.java;<<<<<<< MINE
        assertThat(routingNodes.node(nodeIdRemaining).shardsWithState(INITIALIZING).get(0).primaryTerm(), equalTo(2L));
=======
        assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(2L));
>>>>>>> YOURS;<<<<<<< MINE
        assertThat(routingNodes.node(nodeIdRemaining).shardsWithState(INITIALIZING).get(0).primaryTerm(), equalTo(2L));
=======
        assertThat(clusterState.metaData().index("test").primaryTerm(0), equalTo(2L));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_7c8cdf4_b8227a7/rev_7c8cdf4-b8227a7/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java;<<<<<<< MINE
        seqNo = in.readVLong();
        primaryTerm = in.readVLong();
=======
        primaryTerm = in.readVLong();
>>>>>>> YOURS;<<<<<<< MINE
        seqNo = in.readVLong();
        primaryTerm = in.readVLong();
=======
        primaryTerm = in.readVLong();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_7c8cdf4_b8227a7/rev_7c8cdf4-b8227a7/core/src/main/java/org/elasticsearch/action/support/replication/ReplicationRequest.java;<<<<<<< MINE
        out.writeVLong(seqNo);
        out.writeVLong(primaryTerm);
=======
        out.writeVLong(primaryTerm);
>>>>>>> YOURS;<<<<<<< MINE
        out.writeVLong(seqNo);
        out.writeVLong(primaryTerm);
=======
        out.writeVLong(primaryTerm);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_dcd2642_d3d57da/rev_dcd2642-d3d57da/core/src/test/java/org/elasticsearch/index/IndexingSlowLogTests.java;<<<<<<< MINE
        ParsedDocument pd = new ParsedDocument(new StringField("uid", "test:id", Store.YES), new LegacyIntField("version", 1, Store.YES),
                new LegacyIntField("seqNo", 1, Store.YES) , "id",
=======
        ParsedDocument pd = new ParsedDocument(new NumericDocValuesField("version", 1), "id",
>>>>>>> YOURS;<<<<<<< MINE
        ParsedDocument pd = new ParsedDocument(new StringField("uid", "test:id", Store.YES), new LegacyIntField("version", 1, Store.YES),
                new LegacyIntField("seqNo", 1, Store.YES) , "id",
=======
        ParsedDocument pd = new ParsedDocument(new NumericDocValuesField("version", 1), "id",
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a56a9cb_f6074d3/rev_a56a9cb-f6074d3/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LCall.java;<<<<<<< MINE
        if (java.lang.reflect.Modifier.isStatic(method.modifiers)) {
            adapter.invokeStatic(method.owner.type, method.method);
=======
        if (java.lang.reflect.Modifier.isStatic(method.reflect.getModifiers())) {
            writer.invokeStatic(method.owner.type, method.method);
>>>>>>> YOURS;<<<<<<< MINE
        if (java.lang.reflect.Modifier.isStatic(method.modifiers)) {
            adapter.invokeStatic(method.owner.type, method.method);
=======
        if (java.lang.reflect.Modifier.isStatic(method.reflect.getModifiers())) {
            writer.invokeStatic(method.owner.type, method.method);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a56a9cb_f6074d3/rev_a56a9cb-f6074d3/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LField.java;<<<<<<< MINE
    void load(MethodWriter adapter) {
        if (java.lang.reflect.Modifier.isStatic(field.modifiers)) {
            adapter.getStatic(field.owner.type, field.javaName, field.type.type);
=======
    void load(MethodWriter writer) {
        if (java.lang.reflect.Modifier.isStatic(field.reflect.getModifiers())) {
            writer.getStatic(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS;<<<<<<< MINE
    void load(MethodWriter adapter) {
        if (java.lang.reflect.Modifier.isStatic(field.modifiers)) {
            adapter.getStatic(field.owner.type, field.javaName, field.type.type);
=======
    void load(MethodWriter writer) {
        if (java.lang.reflect.Modifier.isStatic(field.reflect.getModifiers())) {
            writer.getStatic(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a56a9cb_f6074d3/rev_a56a9cb-f6074d3/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LField.java;<<<<<<< MINE
            adapter.getField(field.owner.type, field.javaName, field.type.type);
=======
            writer.getField(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS;<<<<<<< MINE
            adapter.getField(field.owner.type, field.javaName, field.type.type);
=======
            writer.getField(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a56a9cb_f6074d3/rev_a56a9cb-f6074d3/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LField.java;<<<<<<< MINE
    void store(MethodWriter adapter) {
        if (java.lang.reflect.Modifier.isStatic(field.modifiers)) {
            adapter.putStatic(field.owner.type, field.javaName, field.type.type);
=======
    void store(MethodWriter writer) {
        if (java.lang.reflect.Modifier.isStatic(field.reflect.getModifiers())) {
            writer.putStatic(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS;<<<<<<< MINE
    void store(MethodWriter adapter) {
        if (java.lang.reflect.Modifier.isStatic(field.modifiers)) {
            adapter.putStatic(field.owner.type, field.javaName, field.type.type);
=======
    void store(MethodWriter writer) {
        if (java.lang.reflect.Modifier.isStatic(field.reflect.getModifiers())) {
            writer.putStatic(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_a56a9cb_f6074d3/rev_a56a9cb-f6074d3/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/LField.java;<<<<<<< MINE
            adapter.putField(field.owner.type, field.javaName, field.type.type);
=======
            writer.putField(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS;<<<<<<< MINE
            adapter.putField(field.owner.type, field.javaName, field.type.type);
=======
            writer.putField(field.owner.type, field.reflect.getName(), field.type.type);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SDeclaration.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/STry.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java;<<<<<<< MINE
                // For the case where a cast is not required but a
                // constant is set, an EConstant replaces this node
                // with the constant copied from this node.  Note that
                // for constants output data does not need to be copied
                // from this node because the output data for the EConstant
                // will already be the same.

                EConstant econstant = new EConstant(line, offset, location, constant);
=======
                final EConstant econstant = new EConstant(location, constant);
>>>>>>> YOURS;<<<<<<< MINE
                // For the case where a cast is not required but a
                // constant is set, an EConstant replaces this node
                // with the constant copied from this node.  Note that
                // for constants output data does not need to be copied
                // from this node because the output data for the EConstant
                // will already be the same.

                EConstant econstant = new EConstant(line, offset, location, constant);
=======
                final EConstant econstant = new EConstant(location, constant);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java;<<<<<<< MINE
                // For the case where a cast is required and a constant is not set.
                // Modify the tree to add an ECast between this node and its parent.
                // The output data from this node is copied to the ECast for
                // further reads done by the parent.

                ECast ecast = new ECast(line, offset, location, this, cast);
=======
                final ECast ecast = new ECast(location, this, cast);
>>>>>>> YOURS;<<<<<<< MINE
                // For the case where a cast is required and a constant is not set.
                // Modify the tree to add an ECast between this node and its parent.
                // The output data from this node is copied to the ECast for
                // further reads done by the parent.

                ECast ecast = new ECast(line, offset, location, this, cast);
=======
                final ECast ecast = new ECast(location, this, cast);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java;<<<<<<< MINE
                    EConstant econstant = new EConstant(line, offset, location, constant);
=======
                    final EConstant econstant = new EConstant(location, constant);
>>>>>>> YOURS;<<<<<<< MINE
                    EConstant econstant = new EConstant(line, offset, location, constant);
=======
                    final EConstant econstant = new EConstant(location, constant);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java;<<<<<<< MINE
                    // For the case where a cast is required, a constant is set,
                    // the constant cannot be immediately cast to the expected type,
                    // and this node is already an EConstant.  Modify the tree to add
                    // an ECast between this node and its parent.  Note that
                    // for constants output data does not need to be copied
                    // from this node because the output data for the EConstant
                    // will already be the same.

                    ECast ecast = new ECast(line, offset, location, this, cast);
=======
                    final ECast ecast = new ECast(location, this, cast);
>>>>>>> YOURS;<<<<<<< MINE
                    // For the case where a cast is required, a constant is set,
                    // the constant cannot be immediately cast to the expected type,
                    // and this node is already an EConstant.  Modify the tree to add
                    // an ECast between this node and its parent.  Note that
                    // for constants output data does not need to be copied
                    // from this node because the output data for the EConstant
                    // will already be the same.

                    ECast ecast = new ECast(line, offset, location, this, cast);
=======
                    final ECast ecast = new ECast(location, this, cast);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java;<<<<<<< MINE
                    // For the case where a cast is required, a constant is set,
                    // the constant cannot be immediately cast to the expected type,
                    // and this node is not an EConstant.  Replace this node with
                    // an Econstant node copying the constant from this node.
                    // Modify the tree to add an ECast between the EConstant node
                    // and its parent.  Note that for constants output data does not
                    // need to be copied from this node because the output data for
                    // the EConstant will already be the same.

                    EConstant econstant = new EConstant(line, offset, location, constant);
=======
                    final EConstant econstant = new EConstant(location, constant);
>>>>>>> YOURS;<<<<<<< MINE
                    // For the case where a cast is required, a constant is set,
                    // the constant cannot be immediately cast to the expected type,
                    // and this node is not an EConstant.  Replace this node with
                    // an Econstant node copying the constant from this node.
                    // Modify the tree to add an ECast between the EConstant node
                    // and its parent.  Note that for constants output data does not
                    // need to be copied from this node because the output data for
                    // the EConstant will already be the same.

                    EConstant econstant = new EConstant(line, offset, location, constant);
=======
                    final EConstant econstant = new EConstant(location, constant);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/AExpression.java;<<<<<<< MINE
                    ECast ecast = new ECast(line, offset, location, econstant, cast);
=======
                    final ECast ecast = new ECast(location, econstant, cast);
>>>>>>> YOURS;<<<<<<< MINE
                    ECast ecast = new ECast(line, offset, location, econstant, cast);
=======
                    final ECast ecast = new ECast(location, econstant, cast);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SIf.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SWhile.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SSource.java;<<<<<<< MINE
=======
        for (AStatement statement : statements) {
            // TODO: why are we checking only statements 0..n-1 (this effectively checks only the previous statement)
>>>>>>> YOURS;<<<<<<< MINE
=======
        for (AStatement statement : statements) {
            // TODO: why are we checking only statements 0..n-1 (this effectively checks only the previous statement)
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/EChain.java;<<<<<<< MINE
        // For the case where the chain represents a String concatenation
        // we must first write debug information, and then depending on the
        // Java version write a StringBuilder or track types going onto the
        // stack.  This must be done before the links in the chain are read
        // because we need the StringBuilder to be placed on the stack
        // ahead of any potential concatenation arguments.
        if (cat) {
            writer.writeDebugInfo(offset);
=======
        // can cause class cast exception among other things at runtime
        writer.writeDebugInfo(location);

        if (cat) {
>>>>>>> YOURS;<<<<<<< MINE
        // For the case where the chain represents a String concatenation
        // we must first write debug information, and then depending on the
        // Java version write a StringBuilder or track types going onto the
        // stack.  This must be done before the links in the chain are read
        // because we need the StringBuilder to be placed on the stack
        // ahead of any potential concatenation arguments.
        if (cat) {
            writer.writeDebugInfo(offset);
=======
        // can cause class cast exception among other things at runtime
        writer.writeDebugInfo(location);

        if (cat) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SFor.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SDo.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SCatch.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_9a0d0d7_d8056c8/rev_9a0d0d7-d8056c8/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SIfElse.java;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS;<<<<<<< MINE
        writer.writeStatementOffset(offset);

=======
        writer.writeStatementOffset(location);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_23d7cdd_da74323/rev_23d7cdd-da74323/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(163);
      _la = _input.LA(1);
      if ( !(_la==NEW || _la==ID) ) {
      _errHandler.recoverInline(this);
      } else {
        consume();
      }
=======
      setState(172);
      match(ID);
>>>>>>> YOURS;<<<<<<< MINE
      setState(163);
      _la = _input.LA(1);
      if ( !(_la==NEW || _la==ID) ) {
      _errHandler.recoverInline(this);
      } else {
        consume();
      }
=======
      setState(172);
      match(ID);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_90ef933_be168f5/rev_90ef933-be168f5/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java;<<<<<<< MINE
        seqNo = in.readZLong();
=======
        forcedRefresh = in.readBoolean();
>>>>>>> YOURS;<<<<<<< MINE
        seqNo = in.readZLong();
=======
        forcedRefresh = in.readBoolean();
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_90ef933_be168f5/rev_90ef933-be168f5/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java;<<<<<<< MINE
        out.writeZLong(seqNo);
=======
        out.writeBoolean(forcedRefresh);
>>>>>>> YOURS;<<<<<<< MINE
        out.writeZLong(seqNo);
=======
        out.writeBoolean(forcedRefresh);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_90ef933_be168f5/rev_90ef933-be168f5/core/src/main/java/org/elasticsearch/action/DocWriteResponse.java;<<<<<<< MINE
                .field(Fields._TYPE, type)
                .field(Fields._ID, id)
                .field(Fields._VERSION, version);
=======
            .field(Fields._TYPE, type)
            .field(Fields._ID, id)
            .field(Fields._VERSION, version)
            .field("forced_refresh", forcedRefresh);
>>>>>>> YOURS;<<<<<<< MINE
                .field(Fields._TYPE, type)
                .field(Fields._ID, id)
                .field(Fields._VERSION, version);
=======
            .field(Fields._TYPE, type)
            .field(Fields._ID, id)
            .field(Fields._VERSION, version)
            .field("forced_refresh", forcedRefresh);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(176);
      switch (_input.LA(1)) {
      case TYPE:
        enterOuterAlt(_localctx, 1);
        {
        setState(170);
        match(TYPE);
        setState(171);
        match(REF);
        setState(172);
        _la = _input.LA(1);
        if ( !(_la==NEW || _la==ID) ) {
        _errHandler.recoverInline(this);
        } else {
          consume();
        }
        }
        break;
      case ID:
        enterOuterAlt(_localctx, 2);
        {
        setState(173);
        match(ID);
        setState(174);
        match(REF);
        setState(175);
        match(ID);
        }
        break;
      default:
        throw new NoViableAltException(this);
=======
      enterOuterAlt(_localctx, 1);
      {
      setState(201);
      match(TYPE);
      setState(202);
      match(REF);
      setState(203);
      _la = _input.LA(1);
      if ( !(_la==NEW || _la==ID) ) {
      _errHandler.recoverInline(this);
      } else {
        consume();
      }
>>>>>>> YOURS;<<<<<<< MINE
      setState(176);
      switch (_input.LA(1)) {
      case TYPE:
        enterOuterAlt(_localctx, 1);
        {
        setState(170);
        match(TYPE);
        setState(171);
        match(REF);
        setState(172);
        _la = _input.LA(1);
        if ( !(_la==NEW || _la==ID) ) {
        _errHandler.recoverInline(this);
        } else {
          consume();
        }
        }
        break;
      case ID:
        enterOuterAlt(_localctx, 2);
        {
        setState(173);
        match(ID);
        setState(174);
        match(REF);
        setState(175);
        match(ID);
        }
        break;
      default:
        throw new NoViableAltException(this);
=======
      enterOuterAlt(_localctx, 1);
      {
      setState(201);
      match(TYPE);
      setState(202);
      match(REF);
      setState(203);
      _la = _input.LA(1);
      if ( !(_la==NEW || _la==ID) ) {
      _errHandler.recoverInline(this);
      } else {
        consume();
      }
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(178);
=======
      setState(205);
>>>>>>> YOURS;<<<<<<< MINE
      setState(178);
=======
      setState(205);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(181);
=======
      setState(208);
>>>>>>> YOURS;<<<<<<< MINE
      setState(181);
=======
      setState(208);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(179);
=======
        setState(206);
>>>>>>> YOURS;<<<<<<< MINE
        setState(179);
=======
        setState(206);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(180);
=======
        setState(207);
>>>>>>> YOURS;<<<<<<< MINE
        setState(180);
=======
        setState(207);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(183);
=======
      setState(210);
>>>>>>> YOURS;<<<<<<< MINE
      setState(183);
=======
      setState(210);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(184);
=======
      setState(211);
>>>>>>> YOURS;<<<<<<< MINE
      setState(184);
=======
      setState(211);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(185);
=======
      setState(212);
>>>>>>> YOURS;<<<<<<< MINE
      setState(185);
=======
      setState(212);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(186);
=======
      setState(213);
>>>>>>> YOURS;<<<<<<< MINE
      setState(186);
=======
      setState(213);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(187);
=======
      setState(214);
>>>>>>> YOURS;<<<<<<< MINE
      setState(187);
=======
      setState(214);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(188);
=======
      setState(215);
>>>>>>> YOURS;<<<<<<< MINE
      setState(188);
=======
      setState(215);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(190);
=======
      setState(217);
>>>>>>> YOURS;<<<<<<< MINE
      setState(190);
=======
      setState(217);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(201);
      switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
=======
      setState(228);
      switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(201);
      switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
=======
      setState(228);
      switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(193);
=======
        setState(220);
>>>>>>> YOURS;<<<<<<< MINE
        setState(193);
=======
        setState(220);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(194);
=======
        setState(221);
>>>>>>> YOURS;<<<<<<< MINE
        setState(194);
=======
        setState(221);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(195);
=======
        setState(222);
>>>>>>> YOURS;<<<<<<< MINE
        setState(195);
=======
        setState(222);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(198);
=======
        setState(225);
>>>>>>> YOURS;<<<<<<< MINE
        setState(198);
=======
        setState(225);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(262);
=======
      setState(289);
>>>>>>> YOURS;<<<<<<< MINE
      setState(262);
=======
      setState(289);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      _alt = getInterpreter().adaptivePredict(_input,18,_ctx);
=======
      _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
      _alt = getInterpreter().adaptivePredict(_input,18,_ctx);
=======
      _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(260);
          switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
=======
          setState(287);
          switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
          setState(260);
          switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
=======
          setState(287);
          switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(203);
=======
            setState(230);
>>>>>>> YOURS;<<<<<<< MINE
            setState(203);
=======
            setState(230);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(204);
=======
            setState(231);
>>>>>>> YOURS;<<<<<<< MINE
            setState(204);
=======
            setState(231);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(205);
=======
            setState(232);
>>>>>>> YOURS;<<<<<<< MINE
            setState(205);
=======
            setState(232);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(208);
=======
            setState(235);
>>>>>>> YOURS;<<<<<<< MINE
            setState(208);
=======
            setState(235);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(209);
=======
            setState(236);
>>>>>>> YOURS;<<<<<<< MINE
            setState(209);
=======
            setState(236);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(210);
=======
            setState(237);
>>>>>>> YOURS;<<<<<<< MINE
            setState(210);
=======
            setState(237);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(213);
=======
            setState(240);
>>>>>>> YOURS;<<<<<<< MINE
            setState(213);
=======
            setState(240);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(214);
=======
            setState(241);
>>>>>>> YOURS;<<<<<<< MINE
            setState(214);
=======
            setState(241);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(215);
=======
            setState(242);
>>>>>>> YOURS;<<<<<<< MINE
            setState(215);
=======
            setState(242);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(218);
=======
            setState(245);
>>>>>>> YOURS;<<<<<<< MINE
            setState(218);
=======
            setState(245);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(219);
=======
            setState(246);
>>>>>>> YOURS;<<<<<<< MINE
            setState(219);
=======
            setState(246);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(220);
=======
            setState(247);
>>>>>>> YOURS;<<<<<<< MINE
            setState(220);
=======
            setState(247);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(223);
=======
            setState(250);
>>>>>>> YOURS;<<<<<<< MINE
            setState(223);
=======
            setState(250);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(224);
=======
            setState(251);
>>>>>>> YOURS;<<<<<<< MINE
            setState(224);
=======
            setState(251);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(225);
=======
            setState(252);
>>>>>>> YOURS;<<<<<<< MINE
            setState(225);
=======
            setState(252);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(228);
=======
            setState(255);
>>>>>>> YOURS;<<<<<<< MINE
            setState(228);
=======
            setState(255);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(229);
=======
            setState(256);
>>>>>>> YOURS;<<<<<<< MINE
            setState(229);
=======
            setState(256);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(230);
=======
            setState(257);
>>>>>>> YOURS;<<<<<<< MINE
            setState(230);
=======
            setState(257);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(233);
=======
            setState(260);
>>>>>>> YOURS;<<<<<<< MINE
            setState(233);
=======
            setState(260);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(234);
=======
            setState(261);
>>>>>>> YOURS;<<<<<<< MINE
            setState(234);
=======
            setState(261);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(235);
=======
            setState(262);
>>>>>>> YOURS;<<<<<<< MINE
            setState(235);
=======
            setState(262);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(238);
=======
            setState(265);
>>>>>>> YOURS;<<<<<<< MINE
            setState(238);
=======
            setState(265);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(239);
=======
            setState(266);
>>>>>>> YOURS;<<<<<<< MINE
            setState(239);
=======
            setState(266);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(240);
=======
            setState(267);
>>>>>>> YOURS;<<<<<<< MINE
            setState(240);
=======
            setState(267);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(243);
=======
            setState(270);
>>>>>>> YOURS;<<<<<<< MINE
            setState(243);
=======
            setState(270);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(244);
=======
            setState(271);
>>>>>>> YOURS;<<<<<<< MINE
            setState(244);
=======
            setState(271);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(245);
=======
            setState(272);
>>>>>>> YOURS;<<<<<<< MINE
            setState(245);
=======
            setState(272);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(248);
=======
            setState(275);
>>>>>>> YOURS;<<<<<<< MINE
            setState(248);
=======
            setState(275);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(249);
=======
            setState(276);
>>>>>>> YOURS;<<<<<<< MINE
            setState(249);
=======
            setState(276);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(250);
=======
            setState(277);
>>>>>>> YOURS;<<<<<<< MINE
            setState(250);
=======
            setState(277);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(253);
=======
            setState(280);
>>>>>>> YOURS;<<<<<<< MINE
            setState(253);
=======
            setState(280);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(254);
=======
            setState(281);
>>>>>>> YOURS;<<<<<<< MINE
            setState(254);
=======
            setState(281);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(255);
=======
            setState(282);
>>>>>>> YOURS;<<<<<<< MINE
            setState(255);
=======
            setState(282);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(256);
=======
            setState(283);
>>>>>>> YOURS;<<<<<<< MINE
            setState(256);
=======
            setState(283);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(257);
=======
            setState(284);
>>>>>>> YOURS;<<<<<<< MINE
            setState(257);
=======
            setState(284);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(264);
=======
        setState(291);
>>>>>>> YOURS;<<<<<<< MINE
        setState(264);
=======
        setState(291);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      _alt = getInterpreter().adaptivePredict(_input,18,_ctx);
=======
      _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,18,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(294);
      switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
=======
      setState(321);
      switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(294);
      switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
=======
      setState(321);
      switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(265);
=======
        setState(292);
>>>>>>> YOURS;<<<<<<< MINE
        setState(265);
=======
        setState(292);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(266);
=======
        setState(293);
>>>>>>> YOURS;<<<<<<< MINE
        setState(266);
=======
        setState(293);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(267);
=======
        setState(294);
>>>>>>> YOURS;<<<<<<< MINE
        setState(267);
=======
        setState(294);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(268);
=======
        setState(295);
>>>>>>> YOURS;<<<<<<< MINE
        setState(268);
=======
        setState(295);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(269);
=======
        setState(296);
>>>>>>> YOURS;<<<<<<< MINE
        setState(269);
=======
        setState(296);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(270);
=======
        setState(297);
>>>>>>> YOURS;<<<<<<< MINE
        setState(270);
=======
        setState(297);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(272);
=======
        setState(299);
>>>>>>> YOURS;<<<<<<< MINE
        setState(272);
=======
        setState(299);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(273);
=======
        setState(300);
>>>>>>> YOURS;<<<<<<< MINE
        setState(273);
=======
        setState(300);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(274);
=======
        setState(301);
>>>>>>> YOURS;<<<<<<< MINE
        setState(274);
=======
        setState(301);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(275);
=======
        setState(302);
>>>>>>> YOURS;<<<<<<< MINE
        setState(275);
=======
        setState(302);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(277);
=======
        setState(304);
>>>>>>> YOURS;<<<<<<< MINE
        setState(277);
=======
        setState(304);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(278);
=======
        setState(305);
>>>>>>> YOURS;<<<<<<< MINE
        setState(278);
=======
        setState(305);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(280);
=======
        setState(307);
>>>>>>> YOURS;<<<<<<< MINE
        setState(280);
=======
        setState(307);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(281);
=======
        setState(308);
>>>>>>> YOURS;<<<<<<< MINE
        setState(281);
=======
        setState(308);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(283);
=======
        setState(310);
>>>>>>> YOURS;<<<<<<< MINE
        setState(283);
=======
        setState(310);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(284);
=======
        setState(311);
>>>>>>> YOURS;<<<<<<< MINE
        setState(284);
=======
        setState(311);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(286);
=======
        setState(313);
>>>>>>> YOURS;<<<<<<< MINE
        setState(286);
=======
        setState(313);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(287);
=======
        setState(314);
>>>>>>> YOURS;<<<<<<< MINE
        setState(287);
=======
        setState(314);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(288);
=======
        setState(315);
>>>>>>> YOURS;<<<<<<< MINE
        setState(288);
=======
        setState(315);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(289);
=======
        setState(316);
>>>>>>> YOURS;<<<<<<< MINE
        setState(289);
=======
        setState(316);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(290);
=======
        setState(317);
>>>>>>> YOURS;<<<<<<< MINE
        setState(290);
=======
        setState(317);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(291);
=======
        setState(318);
>>>>>>> YOURS;<<<<<<< MINE
        setState(291);
=======
        setState(318);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(292);
=======
        setState(319);
>>>>>>> YOURS;<<<<<<< MINE
        setState(292);
=======
        setState(319);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(330);
      switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
=======
      setState(357);
      switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(330);
      switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
=======
      setState(357);
      switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(296);
=======
        setState(323);
>>>>>>> YOURS;<<<<<<< MINE
        setState(296);
=======
        setState(323);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(300);
=======
        setState(327);
>>>>>>> YOURS;<<<<<<< MINE
        setState(300);
=======
        setState(327);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,22,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,22,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(297);
=======
            setState(324);
>>>>>>> YOURS;<<<<<<< MINE
            setState(297);
=======
            setState(324);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(302);
=======
          setState(329);
>>>>>>> YOURS;<<<<<<< MINE
          setState(302);
=======
          setState(329);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,22,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,20,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,22,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(303);
=======
        setState(330);
>>>>>>> YOURS;<<<<<<< MINE
        setState(303);
=======
        setState(330);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(304);
=======
        setState(331);
>>>>>>> YOURS;<<<<<<< MINE
        setState(304);
=======
        setState(331);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(308);
=======
        setState(335);
>>>>>>> YOURS;<<<<<<< MINE
        setState(308);
=======
        setState(335);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,21,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,21,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(305);
=======
            setState(332);
>>>>>>> YOURS;<<<<<<< MINE
            setState(305);
=======
            setState(332);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(310);
=======
          setState(337);
>>>>>>> YOURS;<<<<<<< MINE
          setState(310);
=======
          setState(337);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        _alt = getInterpreter().adaptivePredict(_input,21,_ctx);
=======
        _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,21,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(311);
=======
        setState(338);
>>>>>>> YOURS;<<<<<<< MINE
        setState(311);
=======
        setState(338);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(312);
=======
        setState(339);
>>>>>>> YOURS;<<<<<<< MINE
        setState(312);
=======
        setState(339);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(317); 
=======
        setState(344); 
>>>>>>> YOURS;<<<<<<< MINE
        setState(317); 
=======
        setState(344); 
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(313);
=======
            setState(340);
>>>>>>> YOURS;<<<<<<< MINE
            setState(313);
=======
            setState(340);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(314);
=======
            setState(341);
>>>>>>> YOURS;<<<<<<< MINE
            setState(314);
=======
            setState(341);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(315);
=======
            setState(342);
>>>>>>> YOURS;<<<<<<< MINE
            setState(315);
=======
            setState(342);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(319); 
=======
          setState(346); 
>>>>>>> YOURS;<<<<<<< MINE
          setState(319); 
=======
          setState(346); 
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,22,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,24,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,22,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,24,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(328);
        switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
=======
        setState(355);
        switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
        setState(328);
        switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
=======
        setState(355);
        switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(321);
=======
          setState(348);
>>>>>>> YOURS;<<<<<<< MINE
          setState(321);
=======
          setState(348);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(325);
=======
          setState(352);
>>>>>>> YOURS;<<<<<<< MINE
          setState(325);
=======
          setState(352);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,25,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,25,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
              setState(322);
=======
              setState(349);
>>>>>>> YOURS;<<<<<<< MINE
              setState(322);
=======
              setState(349);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
            setState(327);
=======
            setState(354);
>>>>>>> YOURS;<<<<<<< MINE
            setState(327);
=======
            setState(354);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
=======
          _alt = getInterpreter().adaptivePredict(_input,25,_ctx);
>>>>>>> YOURS;<<<<<<< MINE
            _alt = getInterpreter().adaptivePredict(_input,23,_ctx);
=======
            _alt = getInterpreter().adaptivePredict(_input,25,_ctx);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(348);
      switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
=======
      setState(377);
      switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(348);
      switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
=======
      setState(377);
      switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(332);
=======
        setState(359);
>>>>>>> YOURS;<<<<<<< MINE
        setState(332);
=======
        setState(359);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(333);
=======
        setState(360);
>>>>>>> YOURS;<<<<<<< MINE
        setState(333);
=======
        setState(360);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(334);
=======
        setState(361);
>>>>>>> YOURS;<<<<<<< MINE
        setState(334);
=======
        setState(361);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(335);
=======
        setState(362);
>>>>>>> YOURS;<<<<<<< MINE
        setState(335);
=======
        setState(362);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(338);
=======
        setState(365);
>>>>>>> YOURS;<<<<<<< MINE
        setState(338);
=======
        setState(365);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(339);
=======
        setState(366);
>>>>>>> YOURS;<<<<<<< MINE
        setState(339);
=======
        setState(366);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(340);
=======
        setState(367);
>>>>>>> YOURS;<<<<<<< MINE
        setState(340);
=======
        setState(367);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(341);
=======
        setState(368);
>>>>>>> YOURS;<<<<<<< MINE
        setState(341);
=======
        setState(368);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(343);
=======
        setState(370);
>>>>>>> YOURS;<<<<<<< MINE
        setState(343);
=======
        setState(370);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(344);
=======
        setState(371);
>>>>>>> YOURS;<<<<<<< MINE
        setState(344);
=======
        setState(371);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(345);
=======
        setState(374);
>>>>>>> YOURS;<<<<<<< MINE
        setState(345);
=======
        setState(374);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(346);
=======
        setState(375);
>>>>>>> YOURS;<<<<<<< MINE
        setState(346);
=======
        setState(375);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(347);
=======
        setState(376);
>>>>>>> YOURS;<<<<<<< MINE
        setState(347);
=======
        setState(376);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(354);
      switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
=======
      setState(383);
      switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(354);
      switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
=======
      setState(383);
      switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(350);
=======
        setState(379);
>>>>>>> YOURS;<<<<<<< MINE
        setState(350);
=======
        setState(379);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(351);
=======
        setState(380);
>>>>>>> YOURS;<<<<<<< MINE
        setState(351);
=======
        setState(380);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(352);
=======
        setState(381);
>>>>>>> YOURS;<<<<<<< MINE
        setState(352);
=======
        setState(381);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(353);
=======
        setState(382);
>>>>>>> YOURS;<<<<<<< MINE
        setState(353);
=======
        setState(382);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(361);
      switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
=======
      setState(390);
      switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(361);
      switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
=======
      setState(390);
      switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(356);
=======
        setState(385);
>>>>>>> YOURS;<<<<<<< MINE
        setState(356);
=======
        setState(385);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(357);
=======
        setState(386);
>>>>>>> YOURS;<<<<<<< MINE
        setState(357);
=======
        setState(386);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(358);
=======
        setState(387);
>>>>>>> YOURS;<<<<<<< MINE
        setState(358);
=======
        setState(387);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(359);
=======
        setState(388);
>>>>>>> YOURS;<<<<<<< MINE
        setState(359);
=======
        setState(388);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(360);
=======
        setState(389);
>>>>>>> YOURS;<<<<<<< MINE
        setState(360);
=======
        setState(389);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(363);
=======
      setState(392);
>>>>>>> YOURS;<<<<<<< MINE
      setState(363);
=======
      setState(392);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(364);
=======
      setState(393);
>>>>>>> YOURS;<<<<<<< MINE
      setState(364);
=======
      setState(393);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(365);
=======
      setState(394);
>>>>>>> YOURS;<<<<<<< MINE
      setState(365);
=======
      setState(394);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(367);
=======
      setState(396);
>>>>>>> YOURS;<<<<<<< MINE
      setState(367);
=======
      setState(396);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(376);
      switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
=======
      setState(405);
      switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(376);
      switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
=======
      setState(405);
      switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(368);
=======
        setState(397);
>>>>>>> YOURS;<<<<<<< MINE
        setState(368);
=======
        setState(397);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(373);
=======
        setState(402);
>>>>>>> YOURS;<<<<<<< MINE
        setState(373);
=======
        setState(402);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(369);
=======
          setState(398);
>>>>>>> YOURS;<<<<<<< MINE
          setState(369);
=======
          setState(398);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(370);
=======
          setState(399);
>>>>>>> YOURS;<<<<<<< MINE
          setState(370);
=======
          setState(399);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
          setState(375);
=======
          setState(404);
>>>>>>> YOURS;<<<<<<< MINE
          setState(375);
=======
          setState(404);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(378);
=======
      setState(407);
>>>>>>> YOURS;<<<<<<< MINE
      setState(378);
=======
      setState(407);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(382);
      switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
=======
      setState(411);
      switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(382);
      switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
=======
      setState(411);
      switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(380);
=======
        setState(409);
>>>>>>> YOURS;<<<<<<< MINE
        setState(380);
=======
        setState(409);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(381);
=======
        setState(410);
>>>>>>> YOURS;<<<<<<< MINE
        setState(381);
=======
        setState(410);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_edb0fd3_f98be6f/rev_edb0fd3-f98be6f/modules/lang-painless/src/main/java/org/elasticsearch/painless/node/SEach.java;<<<<<<< MINE
            writer.invokeDynamic("iterator", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR);
=======
            writer.invokeDynamic("iterator", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR, (Object)0);
>>>>>>> YOURS;<<<<<<< MINE
            writer.invokeDynamic("iterator", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR);
=======
            writer.invokeDynamic("iterator", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR, (Object)0);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_bd94c62_3871555/rev_bd94c62-3871555/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
      setState(412);
      switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
=======
      setState(415);
      switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
>>>>>>> YOURS;<<<<<<< MINE
      setState(412);
      switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
=======
      setState(415);
      switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_bd94c62_3871555/rev_bd94c62-3871555/modules/lang-painless/src/main/java/org/elasticsearch/painless/antlr/PainlessParser.java;<<<<<<< MINE
        setState(410);
        lambda();
        }
        break;
      case 3:
        enterOuterAlt(_localctx, 3);
        {
        setState(411);
=======
        setState(414);
>>>>>>> YOURS;<<<<<<< MINE
        setState(410);
        lambda();
        }
        break;
      case 3:
        enterOuterAlt(_localctx, 3);
        {
        setState(411);
=======
        setState(414);
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_c809671_85402d5/rev_c809671-85402d5/core/src/main/java/org/elasticsearch/action/index/IndexResponse.java;<<<<<<< MINE
        builder.append(",created=").append(created);
        builder.append(",seqNo=").append(getSeqNo());
        builder.append(",shards=").append(getShardInfo());
=======
        builder.append(",result=").append(getResult().getLowercase());
        builder.append(",shards=").append(Strings.toString(getShardInfo(), true));
>>>>>>> YOURS;<<<<<<< MINE
        builder.append(",created=").append(created);
        builder.append(",seqNo=").append(getSeqNo());
        builder.append(",shards=").append(getShardInfo());
=======
        builder.append(",result=").append(getResult().getLowercase());
        builder.append(",shards=").append(Strings.toString(getShardInfo(), true));
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_c809671_85402d5/rev_c809671-85402d5/core/src/main/java/org/elasticsearch/indices/recovery/RemoteRecoveryTargetHandler.java;<<<<<<< MINE
    public FinalizeResponse finalizeRecovery() {
        return transportService.submitRequest(targetNode, RecoveryTargetService.Actions.FINALIZE,
=======
    public void finalizeRecovery() {
        transportService.submitRequest(targetNode, PeerRecoveryTargetService.Actions.FINALIZE,
>>>>>>> YOURS;<<<<<<< MINE
    public FinalizeResponse finalizeRecovery() {
        return transportService.submitRequest(targetNode, RecoveryTargetService.Actions.FINALIZE,
=======
    public void finalizeRecovery() {
        transportService.submitRequest(targetNode, PeerRecoveryTargetService.Actions.FINALIZE,
>>>>>>> YOURS
/home/ramdisk/experiment5/projects/elasticsearch/revisions/rev_ce6f6d3_6174e21/rev_ce6f6d3-6174e21/core/src/main/java/org/elasticsearch/search/aggregations/metrics/tophits/TopHitsAggregatorFactory.java;<<<<<<< MINE
        if (scriptFields != null) {
            for (ScriptFieldsContext.ScriptField field : scriptFields) {
                subSearchContext.scriptFields().add(field);
            }
=======
        for (ScriptFieldsContext.ScriptField field : scriptFields) {
            subSearchContext.scriptFields().add(field);
>>>>>>> YOURS;<<<<<<< MINE
        if (scriptFields != null) {
            for (ScriptFieldsContext.ScriptField field : scriptFields) {
                subSearchContext.scriptFields().add(field);
            }
=======
        for (ScriptFieldsContext.ScriptField field : scriptFields) {
            subSearchContext.scriptFields().add(field);
>>>>>>> YOURS
