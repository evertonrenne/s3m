file;ssmergeConf;linedbasedConf
/experiment_results/projects/async-http-client/revisions/rev_5c698a8_974b547/rev_5c698a8-974b547/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
        URI uri = createUri(request.getRawUrl());
        if (log.isDebugEnabled())
            log.debug("Lookup cache: " + uri.toString());
=======
        URI uri = createUri(request.getUrl());

        log.debug("Lookup cache: %s", uri);
>>>>>>> YOURS;<<<<<<< MINE
        URI uri = createUri(request.getRawUrl());
        if (log.isDebugEnabled())
            log.debug("Lookup cache: " + uri.toString());
=======
        URI uri = createUri(request.getUrl());

        log.debug("Lookup cache: %s", uri);
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_2693153_e6434a8/rev_2693153-e6434a8/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
                            nettyRequest, config.getRequestTimeoutInMs());
                } else {
                    f.setNettyRequest(nettyRequest);
=======
                                                   nettyRequest, requestTimeout(config, request.getPerRequestConfig()));
>>>>>>> YOURS;<<<<<<< MINE
                            nettyRequest, config.getRequestTimeoutInMs());
                } else {
                    f.setNettyRequest(nettyRequest);
=======
                                                   nettyRequest, requestTimeout(config, request.getPerRequestConfig()));
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_2693153_e6434a8/rev_2693153-e6434a8/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
                    executeRequest(channel,config,f,nettyRequest);
=======
                    executeRequest(channel, config, f, nettyRequest);
>>>>>>> YOURS;<<<<<<< MINE
                    executeRequest(channel,config,f,nettyRequest);
=======
                    executeRequest(channel, config, f, nettyRequest);
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_2919b93_6dd336a/rev_2919b93-6dd336a/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
            int delay = requestTimeout(config, future.getRequest().getPerRequestConfig());
            if (delay != -1) {
                future.setReaperFuture(config.reaper().schedule(new Callable<Object>() {
                    public Object call() {
                        if (!future.isDone() && !future.isCancelled()) {
                            future.abort(new TimeoutException("Request timed out."));
                            channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(ClosedEvent.class);
                        }
                        return null;
=======
            future.touch();
            future.setReaperFuture(config.reaper().scheduleAtFixedRate(new Runnable() {
                public void run() {
                    if (future.hasExpired()) {
                        if (log.isDebugEnabled()) {
                            log.debug("Request Timeout expired for " + future);
                        }
                        future.abort(new TimeoutException("Request timed out."));
                        closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
>>>>>>> YOURS;<<<<<<< MINE
            int delay = requestTimeout(config, future.getRequest().getPerRequestConfig());
            if (delay != -1) {
                future.setReaperFuture(config.reaper().schedule(new Callable<Object>() {
                    public Object call() {
                        if (!future.isDone() && !future.isCancelled()) {
                            future.abort(new TimeoutException("Request timed out."));
                            channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(ClosedEvent.class);
                        }
                        return null;
=======
            future.touch();
            future.setReaperFuture(config.reaper().scheduleAtFixedRate(new Runnable() {
                public void run() {
                    if (future.hasExpired()) {
                        if (log.isDebugEnabled()) {
                            log.debug("Request Timeout expired for " + future);
                        }
                        future.abort(new TimeoutException("Request timed out."));
                        closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_2919b93_6dd336a/rev_2919b93-6dd336a/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
                }, delay, TimeUnit.MILLISECONDS));
            }
=======
                }
            }, 0, requestTimeout(config, future.getRequest().getPerRequestConfig()), TimeUnit.MILLISECONDS));
>>>>>>> YOURS;<<<<<<< MINE
                }, delay, TimeUnit.MILLISECONDS));
            }
=======
                }
            }, 0, requestTimeout(config, future.getRequest().getPerRequestConfig()), TimeUnit.MILLISECONDS));
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_ee371ed_7fb4fa1/rev_ee371ed-7fb4fa1/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
        try {
            future.touch();
            future.setReaperFuture(config.reaper().scheduleAtFixedRate(new Runnable() {
                public void run() {
                    if (future.hasExpired()) {
                        if (log.isDebugEnabled()) {
                            log.debug("Request Timeout expired for " + future);
                        }
                        future.abort(new TimeoutException("Request timed out."));
                        closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
=======
        try {
            future.touch();
            int delay = requestTimeout(config, future.getRequest().getPerRequestConfig());
            if (delay != -1) {
                future.setReaperFuture(config.reaper().scheduleAtFixedRate(new Runnable() {
                    public void run() {
                        if (future.hasExpired()) {
                            if (log.isDebugEnabled()) {
                                log.debug("Request Timeout expired for " + future);
                            }
                            future.abort(new TimeoutException("Request timed out."));
                            closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
                        }
>>>>>>> YOURS;<<<<<<< MINE
        try {
            future.touch();
            future.setReaperFuture(config.reaper().scheduleAtFixedRate(new Runnable() {
                public void run() {
                    if (future.hasExpired()) {
                        if (log.isDebugEnabled()) {
                            log.debug("Request Timeout expired for " + future);
                        }
                        future.abort(new TimeoutException("Request timed out."));
                        closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
=======
        try {
            future.touch();
            int delay = requestTimeout(config, future.getRequest().getPerRequestConfig());
            if (delay != -1) {
                future.setReaperFuture(config.reaper().scheduleAtFixedRate(new Runnable() {
                    public void run() {
                        if (future.hasExpired()) {
                            if (log.isDebugEnabled()) {
                                log.debug("Request Timeout expired for " + future);
                            }
                            future.abort(new TimeoutException("Request timed out."));
                            closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
                        }
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_ee371ed_7fb4fa1/rev_ee371ed-7fb4fa1/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
                }
            }, 0, requestTimeout(config, future.getRequest().getPerRequestConfig()), TimeUnit.MILLISECONDS));
        } catch (RejectedExecutionException ex) {
=======
                }, 0, delay, TimeUnit.MILLISECONDS));
            }
        } catch (RejectedExecutionException ex) {
>>>>>>> YOURS;<<<<<<< MINE
                }
            }, 0, requestTimeout(config, future.getRequest().getPerRequestConfig()), TimeUnit.MILLISECONDS));
        } catch (RejectedExecutionException ex) {
=======
                }, 0, delay, TimeUnit.MILLISECONDS));
            }
        } catch (RejectedExecutionException ex) {
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_7245800_fbf4fde/rev_7245800-fbf4fde/src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java;<<<<<<< MINE
                if (config.isRedirectEnabled() && (statusCode == 302 || statusCode == 301)) {
=======
                boolean redirectEnabled = (request.getFollowRedirects() == true
                        || request.getFollowRedirects() == null && config.isRedirectEnabled());
                if (redirectEnabled && (statusCode == 302 || statusCode == 301)) {
>>>>>>> YOURS;<<<<<<< MINE
                if (config.isRedirectEnabled() && (statusCode == 302 || statusCode == 301)) {
=======
                boolean redirectEnabled = (request.getFollowRedirects() == true
                        || request.getFollowRedirects() == null && config.isRedirectEnabled());
                if (redirectEnabled && (statusCode == 302 || statusCode == 301)) {
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_0efa8eb_777802b/rev_0efa8eb-777802b/src/test/java/com/ning/http/client/async/ProxyTest.java;<<<<<<< MINE
        assertEquals(resp.getHeader("target"), "http://127.0.0.1:1234/");
=======
        assertEquals(resp.getHeader("target"), target);
>>>>>>> YOURS;<<<<<<< MINE
        assertEquals(resp.getHeader("target"), "http://127.0.0.1:1234/");
=======
        assertEquals(resp.getHeader("target"), target);
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_0efa8eb_777802b/rev_0efa8eb-777802b/src/test/java/com/ning/http/client/async/ProxyTest.java;<<<<<<< MINE
        assertEquals(resp.getHeader("target"), "http://127.0.0.1:1234/");
=======
        assertEquals(resp.getHeader("target"), target);
>>>>>>> YOURS;<<<<<<< MINE
        assertEquals(resp.getHeader("target"), "http://127.0.0.1:1234/");
=======
        assertEquals(resp.getHeader("target"), target);
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_0efa8eb_777802b/rev_0efa8eb-777802b/src/test/java/com/ning/http/client/async/ProxyTest.java;<<<<<<< MINE
        assertEquals(resp.getHeader("target"), "http://127.0.0.1:1234/");
=======
        assertEquals(resp.getHeader("target"), target);
>>>>>>> YOURS;<<<<<<< MINE
        assertEquals(resp.getHeader("target"), "http://127.0.0.1:1234/");
=======
        assertEquals(resp.getHeader("target"), target);
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_bb61cd4_be7ae9a/rev_bb61cd4-be7ae9a/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java;<<<<<<< MINE
                            final RequestBuilder builder = new RequestBuilder(future.getRequest()).setQueryParameters(null);
=======
                            final RequestBuilder builder = stripQueryString ?
                                      new RequestBuilder(future.getRequest()).setQueryParameters(null)
                                    : new RequestBuilder(future.getRequest());

>>>>>>> YOURS;<<<<<<< MINE
                            final RequestBuilder builder = new RequestBuilder(future.getRequest()).setQueryParameters(null);
=======
                            final RequestBuilder builder = stripQueryString ?
                                      new RequestBuilder(future.getRequest()).setQueryParameters(null)
                                    : new RequestBuilder(future.getRequest());

>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_0ff3ce5_95fc68b/rev_0ff3ce5-95fc68b/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java;<<<<<<< MINE
                    removeQueryParamOnRedirect,
                    hostnameVerifier);
=======
                    removeQueryParamOnRedirect,
                    ioThreadMultiplier);
>>>>>>> YOURS;<<<<<<< MINE
                    removeQueryParamOnRedirect,
                    hostnameVerifier);
=======
                    removeQueryParamOnRedirect,
                    ioThreadMultiplier);
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_d81c72d_ed2cd62/rev_d81c72d-ed2cd62/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java;<<<<<<< MINE
        Protocol p = (ctx.getPipeline().get(HttpClientCodec.class) != null ? httpProtocol : webSocketProtocol);
        p.handle(ctx, e);
=======
        final NettyResponseFuture<?> future = (NettyResponseFuture<?>) ctx.getAttachment();
        future.touch();

        // The connect timeout occured.
        if (future.isCancelled() || future.isDone()) {
            finishChannel(ctx);
            return;
        }

        HttpRequest nettyRequest = future.getNettyRequest();
        AsyncHandler<?> handler = future.getAsyncHandler();
        Request request = future.getRequest();
        HttpResponse response = null;
        try {
            if (e.getMessage() instanceof HttpResponse) {
                response = (HttpResponse) e.getMessage();

                log.debug("\n\nRequest {}\n\nResponse {}\n", nettyRequest, response);

                // Required if there is some trailing headers.
                future.setHttpResponse(response);

                int statusCode = response.getStatus().getCode();

                String ka = response.getHeader(HttpHeaders.Names.CONNECTION);
                future.setKeepAlive(ka == null || ka.toLowerCase().equals("keep-alive"));

                List<String> wwwAuth = getAuthorizationToken(response.getHeaders(), HttpHeaders.Names.WWW_AUTHENTICATE);
                Realm realm = request.getRealm() != null ? request.getRealm() : config.getRealm();

                HttpResponseStatus status = new ResponseStatus(future.getURI(), response, this);
                FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(handler).request(request).responseStatus(status).build();
                for (ResponseFilter asyncFilter : config.getResponseFilters()) {
                    try {
                        fc = asyncFilter.filter(fc);
                        if (fc == null) {
                            throw new NullPointerException("FilterContext is null");
                        }
                    } catch (FilterException efe) {
                        abort(future, efe);
                    }
                }

                // The request has changed
                if (fc.replayRequest()) {
                    replayRequest(future, fc, response, ctx);
                    return;
                }

                Realm newRealm = null;
                ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
                final FluentCaseInsensitiveStringsMap headers = request.getHeaders();
                final RequestBuilder builder = new RequestBuilder(future.getRequest());

                if (realm != null && !future.getURI().getPath().equalsIgnoreCase(realm.getUri())) {
                    builder.setUrl(future.getURI().toString());
                }

                if (statusCode == 401
                        && wwwAuth.size() > 0
                        && !future.getAndSetAuth(true)) {

                    future.setState(NettyResponseFuture.STATE.NEW);
                    // NTLM
                    if (!wwwAuth.contains("Kerberos") && (wwwAuth.contains("NTLM") || (wwwAuth.contains("Negotiate")))) {
                        newRealm = ntlmChallenge(wwwAuth, request, proxyServer, headers, realm, future);
                        // SPNEGO KERBEROS
                    } else if (wwwAuth.contains("Negotiate")) {
                        newRealm = kerberosChallenge(wwwAuth, request, proxyServer, headers, realm, future);
                        if (newRealm == null) return;
                    } else {
                        Realm.RealmBuilder realmBuilder;
                        if (realm != null) {
                            realmBuilder = new Realm.RealmBuilder().clone(realm).setScheme(realm.getAuthScheme())
                            ;
                        } else {
                            realmBuilder = new Realm.RealmBuilder();
                        }
                        newRealm = realmBuilder
                                .setUri(URI.create(request.getUrl()).getPath())
                                .setMethodName(request.getMethod())
                                .setUsePreemptiveAuth(true)
                                .parseWWWAuthenticateHeader(wwwAuth.get(0))
                                .build();
                    }

                    final Realm nr = newRealm;

                    log.debug("Sending authentication to {}", request.getUrl());
                    AsyncCallable ac = new AsyncCallable(future) {
                        public Object call() throws Exception {
                            drainChannel(ctx, future, future.getKeepAlive(), future.getURI());
                            nextRequest(builder.setHeaders(headers).setRealm(nr).build(), future);
                            return null;
                        }
                    };

                    if (future.getKeepAlive() && response.isChunked()) {
                        // We must make sure there is no bytes left before executing the next request.
                        ctx.setAttachment(ac);
                    } else {
                        ac.call();
                    }
                    return;
                }

                if (statusCode == 100) {
                    future.getAndSetWriteHeaders(false);
                    future.getAndSetWriteBody(true);
                    writeRequest(ctx.getChannel(), config, future, nettyRequest);
                    return;
                }

                List<String> proxyAuth = getAuthorizationToken(response.getHeaders(), HttpHeaders.Names.PROXY_AUTHENTICATE);
                if (statusCode == 407
                        && proxyAuth.size() > 0
                        && !future.getAndSetAuth(true)) {

                    log.debug("Sending proxy authentication to {}", request.getUrl());

                    future.setState(NettyResponseFuture.STATE.NEW);

                    if (!proxyAuth.contains("Kerberos") && (proxyAuth.get(0).contains("NTLM") || (proxyAuth.contains("Negotiate")))) {
                        newRealm = ntlmProxyChallenge(proxyAuth, request, proxyServer, headers, realm, future);
                        // SPNEGO KERBEROS
                    } else if (proxyAuth.contains("Negotiate")) {
                        newRealm = kerberosChallenge(proxyAuth, request, proxyServer, headers, realm, future);
                        if (newRealm == null) return;
                    } else {
                        newRealm = future.getRequest().getRealm();
                    }

                    Request req = builder.setHeaders(headers).setRealm(newRealm).build();
                    future.setReuseChannel(true);
                    future.setConnectAllowed(true);
                    nextRequest(req, future);
                    return;
                }

                if (future.getNettyRequest().getMethod().equals(HttpMethod.CONNECT)
                        && statusCode == 200) {

                    log.debug("Connected to {}:{}", proxyServer.getHost(), proxyServer.getPort());

                    if (future.getKeepAlive()) {
                        future.attachChannel(ctx.getChannel(), true);
                    }

                    try {
                        log.debug("Connecting to proxy {} for scheme {}", proxyServer, request.getUrl());
                        upgradeProtocol(ctx.getChannel().getPipeline(), request.getUrl());
                    } catch (Throwable ex) {
                        abort(future, ex);
                    }
                    Request req = builder.build();
                    future.setReuseChannel(true);
                    future.setConnectAllowed(false);
                    nextRequest(req, future);
                    return;
                }

                boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
                if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {

                    if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {
                        // We must allow 401 handling again.
                        future.getAndSetAuth(false);

                        String location = response.getHeader(HttpHeaders.Names.LOCATION);
                        URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);
                        boolean stripQueryString = config.isRemoveQueryParamOnRedirect();

                        if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {
                            final RequestBuilder nBuilder = stripQueryString ?
                                    new RequestBuilder(future.getRequest()).setQueryParameters(null)
                                    : new RequestBuilder(future.getRequest());

                            final URI initialConnectionUri = future.getURI();
                            final boolean initialConnectionKeepAlive = future.getKeepAlive();
                            future.setURI(uri);
                            final String newUrl = uri.toString();

                            log.debug("Redirecting to {}", newUrl);
                            for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE)) {
                                Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
                                nBuilder.addOrReplaceCookie(c);
                            }

                            for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE2)) {
                                Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
                                nBuilder.addOrReplaceCookie(c);
                            }

                            AsyncCallable ac = new AsyncCallable(future) {
                                public Object call() throws Exception {
                                    if (initialConnectionKeepAlive && ctx.getChannel().isReadable() &&
                                            connectionsPool.offer(AsyncHttpProviderUtils.getBaseUrl(initialConnectionUri), ctx.getChannel())) {
                                        return null;
                                    }
                                    finishChannel(ctx);
                                    return null;
                                }
                            };

                            if (response.isChunked()) {
                                // We must make sure there is no bytes left before executing the next request.
                                ctx.setAttachment(ac);
                            } else {
                                ac.call();
                            }
                            nextRequest(nBuilder.setUrl(newUrl).build(), future);
                            return;
                        }
                    } else {
                        throw new MaxRedirectException("Maximum redirect reached: " + config.getMaxRedirects());
                    }
                }

                if (!future.getAndSetStatusReceived(true) && updateStatusAndInterrupt(handler, status)) {
                    finishUpdate(future, ctx, response.isChunked());
                    return;
                } else if (updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(), response, this))) {
                    finishUpdate(future, ctx, response.isChunked());
                    return;
                } else if (!response.isChunked()) {
                    if (response.getContent().readableBytes() != 0) {
                        updateBodyAndInterrupt(future, handler, new ResponseBodyPart(future.getURI(), response, this, true));
                    }
                    finishUpdate(future, ctx, false);
                    return;
                }

                if (nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
                    updateBodyAndInterrupt(future, handler, new ResponseBodyPart(future.getURI(), response, this, true));
                    markAsDone(future, ctx);
                    drainChannel(ctx, future, future.getKeepAlive(), future.getURI());
                }

            } else if (e.getMessage() instanceof HttpChunk) {
                HttpChunk chunk = (HttpChunk) e.getMessage();

                if (handler != null) {
                    if (chunk.isLast() || updateBodyAndInterrupt(future, handler, new ResponseBodyPart(future.getURI(), null, this, chunk, chunk.isLast()))) {
                        if (chunk instanceof DefaultHttpChunkTrailer) {
                            updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(),
                                    future.getHttpResponse(), this, (HttpChunkTrailer) chunk));
                        }
                        finishUpdate(future, ctx, !chunk.isLast());
                    }
                }
            }
        } catch (Exception t) {
            if (IOException.class.isAssignableFrom(t.getClass()) && config.getIOExceptionFilters().size() > 0) {
                FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler())
                        .request(future.getRequest()).ioException(IOException.class.cast(t)).build();
                fc = handleIoException(fc, future);

                if (fc.replayRequest()) {
                    replayRequest(future, fc, response, ctx);
                    return;
                }
            }

            try {
                abort(future, t);
            } finally {
                finishUpdate(future, ctx, false);
                throw t;
            }
        }
>>>>>>> YOURS;<<<<<<< MINE
        Protocol p = (ctx.getPipeline().get(HttpClientCodec.class) != null ? httpProtocol : webSocketProtocol);
        p.handle(ctx, e);
=======
        final NettyResponseFuture<?> future = (NettyResponseFuture<?>) ctx.getAttachment();
        future.touch();

        // The connect timeout occured.
        if (future.isCancelled() || future.isDone()) {
            finishChannel(ctx);
            return;
        }

        HttpRequest nettyRequest = future.getNettyRequest();
        AsyncHandler<?> handler = future.getAsyncHandler();
        Request request = future.getRequest();
        HttpResponse response = null;
        try {
            if (e.getMessage() instanceof HttpResponse) {
                response = (HttpResponse) e.getMessage();

                log.debug("\n\nRequest {}\n\nResponse {}\n", nettyRequest, response);

                // Required if there is some trailing headers.
                future.setHttpResponse(response);

                int statusCode = response.getStatus().getCode();

                String ka = response.getHeader(HttpHeaders.Names.CONNECTION);
                future.setKeepAlive(ka == null || ka.toLowerCase().equals("keep-alive"));

                List<String> wwwAuth = getAuthorizationToken(response.getHeaders(), HttpHeaders.Names.WWW_AUTHENTICATE);
                Realm realm = request.getRealm() != null ? request.getRealm() : config.getRealm();

                HttpResponseStatus status = new ResponseStatus(future.getURI(), response, this);
                FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(handler).request(request).responseStatus(status).build();
                for (ResponseFilter asyncFilter : config.getResponseFilters()) {
                    try {
                        fc = asyncFilter.filter(fc);
                        if (fc == null) {
                            throw new NullPointerException("FilterContext is null");
                        }
                    } catch (FilterException efe) {
                        abort(future, efe);
                    }
                }

                // The request has changed
                if (fc.replayRequest()) {
                    replayRequest(future, fc, response, ctx);
                    return;
                }

                Realm newRealm = null;
                ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
                final FluentCaseInsensitiveStringsMap headers = request.getHeaders();
                final RequestBuilder builder = new RequestBuilder(future.getRequest());

                if (realm != null && !future.getURI().getPath().equalsIgnoreCase(realm.getUri())) {
                    builder.setUrl(future.getURI().toString());
                }

                if (statusCode == 401
                        && wwwAuth.size() > 0
                        && !future.getAndSetAuth(true)) {

                    future.setState(NettyResponseFuture.STATE.NEW);
                    // NTLM
                    if (!wwwAuth.contains("Kerberos") && (wwwAuth.contains("NTLM") || (wwwAuth.contains("Negotiate")))) {
                        newRealm = ntlmChallenge(wwwAuth, request, proxyServer, headers, realm, future);
                        // SPNEGO KERBEROS
                    } else if (wwwAuth.contains("Negotiate")) {
                        newRealm = kerberosChallenge(wwwAuth, request, proxyServer, headers, realm, future);
                        if (newRealm == null) return;
                    } else {
                        Realm.RealmBuilder realmBuilder;
                        if (realm != null) {
                            realmBuilder = new Realm.RealmBuilder().clone(realm).setScheme(realm.getAuthScheme())
                            ;
                        } else {
                            realmBuilder = new Realm.RealmBuilder();
                        }
                        newRealm = realmBuilder
                                .setUri(URI.create(request.getUrl()).getPath())
                                .setMethodName(request.getMethod())
                                .setUsePreemptiveAuth(true)
                                .parseWWWAuthenticateHeader(wwwAuth.get(0))
                                .build();
                    }

                    final Realm nr = newRealm;

                    log.debug("Sending authentication to {}", request.getUrl());
                    AsyncCallable ac = new AsyncCallable(future) {
                        public Object call() throws Exception {
                            drainChannel(ctx, future, future.getKeepAlive(), future.getURI());
                            nextRequest(builder.setHeaders(headers).setRealm(nr).build(), future);
                            return null;
                        }
                    };

                    if (future.getKeepAlive() && response.isChunked()) {
                        // We must make sure there is no bytes left before executing the next request.
                        ctx.setAttachment(ac);
                    } else {
                        ac.call();
                    }
                    return;
                }

                if (statusCode == 100) {
                    future.getAndSetWriteHeaders(false);
                    future.getAndSetWriteBody(true);
                    writeRequest(ctx.getChannel(), config, future, nettyRequest);
                    return;
                }

                List<String> proxyAuth = getAuthorizationToken(response.getHeaders(), HttpHeaders.Names.PROXY_AUTHENTICATE);
                if (statusCode == 407
                        && proxyAuth.size() > 0
                        && !future.getAndSetAuth(true)) {

                    log.debug("Sending proxy authentication to {}", request.getUrl());

                    future.setState(NettyResponseFuture.STATE.NEW);

                    if (!proxyAuth.contains("Kerberos") && (proxyAuth.get(0).contains("NTLM") || (proxyAuth.contains("Negotiate")))) {
                        newRealm = ntlmProxyChallenge(proxyAuth, request, proxyServer, headers, realm, future);
                        // SPNEGO KERBEROS
                    } else if (proxyAuth.contains("Negotiate")) {
                        newRealm = kerberosChallenge(proxyAuth, request, proxyServer, headers, realm, future);
                        if (newRealm == null) return;
                    } else {
                        newRealm = future.getRequest().getRealm();
                    }

                    Request req = builder.setHeaders(headers).setRealm(newRealm).build();
                    future.setReuseChannel(true);
                    future.setConnectAllowed(true);
                    nextRequest(req, future);
                    return;
                }

                if (future.getNettyRequest().getMethod().equals(HttpMethod.CONNECT)
                        && statusCode == 200) {

                    log.debug("Connected to {}:{}", proxyServer.getHost(), proxyServer.getPort());

                    if (future.getKeepAlive()) {
                        future.attachChannel(ctx.getChannel(), true);
                    }

                    try {
                        log.debug("Connecting to proxy {} for scheme {}", proxyServer, request.getUrl());
                        upgradeProtocol(ctx.getChannel().getPipeline(), request.getUrl());
                    } catch (Throwable ex) {
                        abort(future, ex);
                    }
                    Request req = builder.build();
                    future.setReuseChannel(true);
                    future.setConnectAllowed(false);
                    nextRequest(req, future);
                    return;
                }

                boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
                if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {

                    if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {
                        // We must allow 401 handling again.
                        future.getAndSetAuth(false);

                        String location = response.getHeader(HttpHeaders.Names.LOCATION);
                        URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);
                        boolean stripQueryString = config.isRemoveQueryParamOnRedirect();

                        if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {
                            final RequestBuilder nBuilder = stripQueryString ?
                                    new RequestBuilder(future.getRequest()).setQueryParameters(null)
                                    : new RequestBuilder(future.getRequest());

                            final URI initialConnectionUri = future.getURI();
                            final boolean initialConnectionKeepAlive = future.getKeepAlive();
                            future.setURI(uri);
                            final String newUrl = uri.toString();

                            log.debug("Redirecting to {}", newUrl);
                            for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE)) {
                                Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
                                nBuilder.addOrReplaceCookie(c);
                            }

                            for (String cookieStr : future.getHttpResponse().getHeaders(HttpHeaders.Names.SET_COOKIE2)) {
                                Cookie c = AsyncHttpProviderUtils.parseCookie(cookieStr);
                                nBuilder.addOrReplaceCookie(c);
                            }

                            AsyncCallable ac = new AsyncCallable(future) {
                                public Object call() throws Exception {
                                    if (initialConnectionKeepAlive && ctx.getChannel().isReadable() &&
                                            connectionsPool.offer(AsyncHttpProviderUtils.getBaseUrl(initialConnectionUri), ctx.getChannel())) {
                                        return null;
                                    }
                                    finishChannel(ctx);
                                    return null;
                                }
                            };

                            if (response.isChunked()) {
                                // We must make sure there is no bytes left before executing the next request.
                                ctx.setAttachment(ac);
                            } else {
                                ac.call();
                            }
                            nextRequest(nBuilder.setUrl(newUrl).build(), future);
                            return;
                        }
                    } else {
                        throw new MaxRedirectException("Maximum redirect reached: " + config.getMaxRedirects());
                    }
                }

                if (!future.getAndSetStatusReceived(true) && updateStatusAndInterrupt(handler, status)) {
                    finishUpdate(future, ctx, response.isChunked());
                    return;
                } else if (updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(), response, this))) {
                    finishUpdate(future, ctx, response.isChunked());
                    return;
                } else if (!response.isChunked()) {
                    if (response.getContent().readableBytes() != 0) {
                        updateBodyAndInterrupt(future, handler, new ResponseBodyPart(future.getURI(), response, this, true));
                    }
                    finishUpdate(future, ctx, false);
                    return;
                }

                if (nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
                    updateBodyAndInterrupt(future, handler, new ResponseBodyPart(future.getURI(), response, this, true));
                    markAsDone(future, ctx);
                    drainChannel(ctx, future, future.getKeepAlive(), future.getURI());
                }

            } else if (e.getMessage() instanceof HttpChunk) {
                HttpChunk chunk = (HttpChunk) e.getMessage();

                if (handler != null) {
                    if (chunk.isLast() || updateBodyAndInterrupt(future, handler, new ResponseBodyPart(future.getURI(), null, this, chunk, chunk.isLast()))) {
                        if (chunk instanceof DefaultHttpChunkTrailer) {
                            updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(),
                                    future.getHttpResponse(), this, (HttpChunkTrailer) chunk));
                        }
                        finishUpdate(future, ctx, !chunk.isLast());
                    }
                }
            }
        } catch (Exception t) {
            if (IOException.class.isAssignableFrom(t.getClass()) && config.getIOExceptionFilters().size() > 0) {
                FilterContext<?> fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler())
                        .request(future.getRequest()).ioException(IOException.class.cast(t)).build();
                fc = handleIoException(fc, future);

                if (fc.replayRequest()) {
                    replayRequest(future, fc, response, ctx);
                    return;
                }
            }

            try {
                abort(future, t);
            } finally {
                finishUpdate(future, ctx, false);
                throw t;
            }
        }
>>>>>>> YOURS
/experiment_results/projects/async-http-client/revisions/rev_fa2c4b6_251cb18/rev_fa2c4b6-251cb18/providers/netty3/src/test/java/org/asynchttpclient/providers/netty3/NettyAsyncResponseTest.java;<<<<<<< MINE
        assertTrue(cookie.getMaxAge() >= 58 && cookie.getMaxAge() <= 60);
=======
        assertEquals(cookie.getMaxAge(), 60);
>>>>>>> YOURS;<<<<<<< MINE
        assertTrue(cookie.getMaxAge() >= 58 && cookie.getMaxAge() <= 60);
=======
        assertEquals(cookie.getMaxAge(), 60);
>>>>>>> YOURS
