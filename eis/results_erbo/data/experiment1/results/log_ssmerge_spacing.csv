revision;file;methodsignature;leftbody;basebody;rightbody
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_fcb529e_dc65cc0/rev_fcb529e-dc65cc0;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays;testArraysOfArrays();;;public void testArraysOfArrays() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

        Object value = new Object[][] { new Object[] {} };
        String json = mapper.writeValueAsString(value);

        // try with different (but valid) nominal types:
        _testArraysAs(mapper, json, Object[][].class);
        _testArraysAs(mapper, json, Object[].class);
        _testArraysAs(mapper, json, Object.class);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_fcb529e_dc65cc0/rev_fcb529e-dc65cc0;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestDefaultForArrays;_testArraysAs(ObjectMapper,String,Class<?>);;;protected void _testArraysAs(ObjectMapper mapper, String json, Class<?> type)
        throws Exception
    {
        Object o = mapper.readValue(json, type);
        assertNotNull(o);
        assertTrue(o instanceof Object[]);
        Object[] main = (Object[]) o;
        assertEquals(1, main.length);
        Object element = main[0];
        assertNotNull(element);
        assertTrue(element instanceof Object[]);
        assertEquals(0, ((Object[]) element).length);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy;getA();;;public int getA() { return a; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy;setA(int);;;public void setA(int value) { a = value; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/test/java/com/fasterxml/jackson/databind/TestNamingStrategy;testPerClassAnnotation();;;public void testPerClassAnnotation() throws Exception
    {
        final ObjectMapper mapper = new ObjectMapper();
        mapper.setPropertyNamingStrategy(new LcStrategy());
        BeanWithPrefixNames input = new BeanWithPrefixNames();
        String json = mapper.writeValueAsString(input);
        assertEquals("{\"Get-a\":3}", json);

        BeanWithPrefixNames output = mapper.readValue("{\"Set-a\":7}",
                BeanWithPrefixNames.class);
        assertEquals(7, output.a);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/test/java/com/fasterxml/jackson/databind/ser/TestSimpleTypes;testBase64Variants();;;public void testBase64Variants() throws Exception
    {
        final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8");
        
        // default encoding is "MIME, no linefeeds", so:
        assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="), MAPPER.writeValueAsString(INPUT));
        assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="),
                MAPPER.writer(Base64Variants.MIME_NO_LINEFEEDS).writeValueAsString(INPUT));

        // but others should be slightly different
        assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="),
                MAPPER.writer(Base64Variants.MIME).writeValueAsString(INPUT));
        assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"), // no padding or LF
                MAPPER.writer(Base64Variants.MODIFIED_FOR_URL).writeValueAsString(INPUT));
        // PEM mandates 64 char lines:
        assertEquals(quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="),
                MAPPER.writer(Base64Variants.PEM).writeValueAsString(INPUT));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes;testBase64Variants();;;public void testBase64Variants() throws Exception
    {
        final byte[] INPUT = "abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890X".getBytes("UTF-8");
        
        // default encoding is "MIME, no linefeeds", so:
        Assert.assertArrayEquals(INPUT, MAPPER.readValue(
                quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="),
                byte[].class));
        ObjectReader reader = MAPPER.reader(byte[].class);
        Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.MIME_NO_LINEFEEDS).readValue(
                quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="
        )));

        // but others should be slightly different
        Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.MIME).readValue(
                quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1\\ndnd4eXoxMjM0NTY3ODkwWA=="
        )));
        Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.MODIFIED_FOR_URL).readValue(
                quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA"
        )));
        // PEM mandates 64 char lines:
        Assert.assertArrayEquals(INPUT, (byte[]) reader.with(Base64Variants.PEM).readValue(
                quote("YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwYWJjZGVmZ2hpamts\\nbW5vcHFyc3R1dnd4eXoxMjM0NTY3ODkwWA=="
        )));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;with(Base64Variant);;;public ObjectReader with(Base64Variant defaultBase64) {
        return _with(_config.with(defaultBase64));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;_with(DeserializationConfig);;;protected ObjectReader _with(DeserializationConfig newConfig) {
        if (newConfig == _config) return this;
        return new ObjectReader(this, newConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;with(Base64Variant);;;@Override
    public DeserializationConfig with(Base64Variant base64) {
        return _withBase(_base.with(base64));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/ObjectMapper;writer(Base64Variant);;;public ObjectWriter writer(Base64Variant defaultBase64) {
        return new ObjectWriter(this, getSerializationConfig().with(defaultBase64));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/ObjectMapper;reader(Base64Variant);;;public ObjectReader reader(Base64Variant defaultBase64) {
        return new ObjectReader(this, getDeserializationConfig().with(defaultBase64));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;with(Base64Variant);;;@Override
    public SerializationConfig with(Base64Variant base64) {
        return _withBase(_base.with(base64));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;findNamingStrategy(AnnotatedClass);;;public Object findNamingStrategy(AnnotatedClass ac) {
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;findNamingStrategy(AnnotatedClass);;;@Override
        public Object findNamingStrategy(AnnotatedClass ac)
        {
            Object str = _primary.findNamingStrategy(ac);
            if (str == null) {
                str = _secondary.findNamingStrategy(ac);
            }
            return str;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase;with(Base64Variant);;;public abstract T with(Base64Variant base64);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig;getBase64Variant();;;public Base64Variant getBase64Variant() {
        return _base.getBase64Variant();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;BaseSettings(ClassIntrospector,AnnotationIntrospector,VisibilityChecker<?>,PropertyNamingStrategy,TypeFactory,TypeResolverBuilder<?>,DateFormat,HandlerInstantiator,Locale,TimeZone,Base64Variant);;;public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai,
            VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf,
            TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi,
            Locale locale, TimeZone tz, Base64Variant defaultBase64)
    {
        _classIntrospector = ci;
        _annotationIntrospector = ai;
        _visibilityChecker = vc;
        _propertyNamingStrategy = pns;
        _typeFactory = tf;
        _typeResolverBuilder = typer;
        _dateFormat = dateFormat;
        _handlerInstantiator = hi;
        _locale = locale;
        _timeZone = tz;
        _defaultBase64 = defaultBase64;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withClassIntrospector(ClassIntrospector);;;        if (_classIntrospector == ci) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withAnnotationIntrospector(AnnotationIntrospector);;;        if (_annotationIntrospector == ai) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withVisibilityChecker(VisibilityChecker<?>);;;        if (_visibilityChecker == vc) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withPropertyNamingStrategy(PropertyNamingStrategy);;;        if (_propertyNamingStrategy == pns) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withTypeFactory(TypeFactory);;;        if (_typeFactory == tf) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withTypeResolverBuilder(TypeResolverBuilder<?>);;;        if (_typeResolverBuilder == typer) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withDateFormat(DateFormat);;;        if (_dateFormat == df) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;withHandlerInstantiator(HandlerInstantiator);;;        if (_handlerInstantiator == hi) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;with(Locale);;;        if (_locale == l) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;with(Base64Variant);;;public BaseSettings with(Base64Variant base64) {
        if (base64 == _defaultBase64) {
            return this;
        }
        return new BaseSettings(_classIntrospector, _annotationIntrospector,
                _visibilityChecker, _propertyNamingStrategy, _typeFactory,
                _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,
                _timeZone, base64);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings;getBase64Variant();;;public Base64Variant getBase64Variant() {
        return _defaultBase64;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/cfg/HandlerInstantiator;namingStrategyInstance(MapperConfig<?>,Annotated,Class<?>);;;public PropertyNamingStrategy namingStrategyInstance(MapperConfig<?> config,
            Annotated annotated, Class<?> implClass) {
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode;set(String,JsonNode);;;public JsonNode set(String fieldName, JsonNode value)
    {
        if (value == null) {
            value = nullNode();
        }
        _put(fieldName, value);
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode;setAll(Map<String,JsonNode>);;;public JsonNode setAll(Map<String,JsonNode> properties)
    {
        if (_children == null) {
            _children = new LinkedHashMap<String, JsonNode>(properties);
        } else {
            for (Map.Entry<String, JsonNode> en : properties.entrySet()) {
                JsonNode n = en.getValue();
                if (n == null) {
                    n = nullNode();
                }
                _children.put(en.getKey(), n);
            }
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode;setAll(ObjectNode);;;public JsonNode setAll(ObjectNode other)
    {
        int len = other.size();
        if (len > 0) {
            if (_children == null) {
                _children = new LinkedHashMap<String, JsonNode>(len);
            }
            other.putContentsTo(_children);
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode;replace(String,JsonNode);;;public JsonNode replace(String fieldName, JsonNode value)
    {
        if (value == null) { // let's not store 'raw' nulls but nodes
            value = nullNode();
        }
        return _put(fieldName, value);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode;without(String);;;public JsonNode without(String fieldName)
    {
        if (_children != null) {
            _children.remove(fieldName);
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/node/ObjectNode;without(Collection<String>);;;public ObjectNode without(Collection<String> fieldNames)
    {
        if (_children != null) {
            for (String fieldName : fieldNames) {
                _children.remove(fieldName);
            }
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector;_findNamingStrategy();;;private PropertyNamingStrategy _findNamingStrategy()
    {
        Object namingDef = (_annotationIntrospector == null)? null
                : _annotationIntrospector.findNamingStrategy(_classDef);
        if (namingDef == null) {
            return _config.getPropertyNamingStrategy();
        }
        if (namingDef instanceof PropertyNamingStrategy) {
            return (PropertyNamingStrategy) namingDef;
        }
        /* Alas, there's no way to force return type of "either class
         * X or Y" -- need to throw an exception after the fact
         */
        if (!(namingDef instanceof Class)) {
            throw new IllegalStateException("AnnotationIntrospector returned PropertyNamingStrategy definition of type "
                    +namingDef.getClass().getName()+"; expected type PropertyNamingStrategy or Class<PropertyNamingStrategy> instead");
        }
        Class<?> namingClass = (Class<?>)namingDef;
        if (!PropertyNamingStrategy.class.isAssignableFrom(namingClass)) {
            throw new IllegalStateException("AnnotationIntrospector returned Class "
                    +namingClass.getName()+"; expected Class<PropertyNamingStrategy>");
        }
        HandlerInstantiator hi = _config.getHandlerInstantiator();
        if (hi != null) {
            return hi.namingStrategyInstance(_config, _classDef, namingClass);
        }
        return (PropertyNamingStrategy) ClassUtil.createInstance(namingClass,
                    _config.canOverrideAccessModifiers());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_8d2cdd7_2a4f66b/rev_8d2cdd7-2a4f66b;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findNamingStrategy(AnnotatedClass);;;@Override
    public Object findNamingStrategy(AnnotatedClass ac)
    {
        JsonNaming ann = ac.getAnnotation(JsonNaming.class);
        return (ann == null) ? null : ann.value();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_70c2de9_152c17d/rev_70c2de9-152c17d;/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter;filterOutAllExcept(Set<String>);		return new FilterExceptFilter(properties);
	};;        return new FilterExceptFilter(properties);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_70c2de9_152c17d/rev_70c2de9-152c17d;/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter;filterOutAllExcept(String);		HashSet<String> properties = new HashSet<String>(propertyArray.length);
		Collections.addAll(properties, propertyArray);
		return new FilterExceptFilter(properties);
	};;        HashSet<String> properties = new HashSet<String>(propertyArray.length);
        Collections.addAll(properties, propertyArray);
        return new FilterExceptFilter(properties);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_70c2de9_152c17d/rev_70c2de9-152c17d;/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter;serializeAllExcept(Set<String>);		return new SerializeExceptFilter(properties);
	};;        return new SerializeExceptFilter(properties);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_70c2de9_152c17d/rev_70c2de9-152c17d;/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter;serializeAllExcept(String);		HashSet<String> properties = new HashSet<String>(propertyArray.length);
		Collections.addAll(properties, propertyArray);
		return new SerializeExceptFilter(properties);
	};;        HashSet<String> properties = new HashSet<String>(propertyArray.length);
        Collections.addAll(properties, propertyArray);
        return new SerializeExceptFilter(properties);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_70c2de9_152c17d/rev_70c2de9-152c17d;/src/main/java/com/fasterxml/jackson/databind/ser/impl/SimpleBeanPropertyFilter;FilterExceptFilter(Set<String>);			_propertiesToInclude = properties;
		};;            _propertiesToInclude = properties;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics;ContainerWithTwoAnimals(U,V);;;public ContainerWithTwoAnimals(U a1, V a2) {
              super(a1);
              otherAnimal = a2;
         }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestWithGenerics;testValueWithMoreGenericParameters();;;public void testValueWithMoreGenericParameters() throws Exception
    {
        WrappedContainerWithField wrappedContainerWithField = new WrappedContainerWithField();
        wrappedContainerWithField.animalContainer = new ContainerWithTwoAnimals<Dog,Dog>(new Dog("d1",1), new Dog("d2",2));
        String json = MAPPER.writeValueAsString(wrappedContainerWithField);
        assertNotNull(json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypedDeserializationWithDefault;testInvalidTypeId511();;;public void testInvalidTypeId511() throws Exception {
        ObjectMapper mapper = new ObjectMapper().disable(
                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES
        );
        String json = "{\"many\":[{\"sub1\":{\"a\":\"foo\"}},{\"sub2\":{\"b\":\"bar\"}}]}" ;
        Good goodResult = mapper.readValue(json, Good.class) ;
        assertNotNull(goodResult) ;
        Bad badResult = mapper.readValue(json, Bad.class);
        assertNotNull(badResult);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization;testISO8601PartialMilliseconds();;;public void testISO8601PartialMilliseconds() throws Exception
    {
        String inputStr;
        Date inputDate;
        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
        
        inputStr = "2014-10-03T18:00:00.6-05:00";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(2014, c.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));
        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(600, c.get(Calendar.MILLISECOND));

        inputStr = "2014-10-03T18:00:00.61-05:00";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(2014, c.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));
        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, c.get(Calendar.MINUTE));
        assertEquals(0, c.get(Calendar.SECOND));
        assertEquals(610, c.get(Calendar.MILLISECOND));

        inputStr = "1997-07-16T19:20:30.45+01:00";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(1997, c.get(Calendar.YEAR));
        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));
        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(20, c.get(Calendar.MINUTE));
        assertEquals(30, c.get(Calendar.SECOND));
        assertEquals(450, c.get(Calendar.MILLISECOND));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization;testISO8601MissingSeconds();;;public void testISO8601MissingSeconds() throws Exception
    {
        String inputStr;
        Date inputDate;
        Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
    
        inputStr = "1997-07-16T19:20+01:00";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(1997, c.get(Calendar.YEAR));
        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));
        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, c.get(Calendar.SECOND));
        assertEquals(0, c.get(Calendar.MILLISECOND));
}
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode;testText();;;
        assertTrue(TextNode.valueOf("true").asBoolean(true));
        assertTrue(TextNode.valueOf("true").asBoolean(false));
        assertFalse(TextNode.valueOf("false").asBoolean(true));
        assertFalse(TextNode.valueOf("false").asBoolean(false));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts;Bean541(String);;;@JsonCreator
        public Bean541(@JsonProperty("str") String str) {
            this.str = str;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts;getStr();;;@JsonProperty("s")
        public String getStr() {
            return str;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/test/java/com/fasterxml/jackson/databind/introspect/TestPropertyConflicts;testIssue541();;;public void testIssue541() throws Exception {
        final ObjectMapper mapper = new ObjectMapper();
        mapper.disable(
                MapperFeature.AUTO_DETECT_CREATORS,
                MapperFeature.AUTO_DETECT_FIELDS,
                MapperFeature.AUTO_DETECT_GETTERS,
                MapperFeature.AUTO_DETECT_IS_GETTERS,
                MapperFeature.AUTO_DETECT_SETTERS,
                MapperFeature.USE_GETTERS_AS_SETTERS
        );
        Bean541 data = mapper.readValue("{\"str\":\"the string\"}", Bean541.class);
        if (data == null) {
            throw new IllegalStateException("data is null");
        }
        if (!"the string".equals(data.getStr())) {
            throw new IllegalStateException("bad value for data.str");
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/main/java/com/fasterxml/jackson/databind/node/TextNode;asBoolean(boolean);;;            if ("false".equals(v)) {
                return false;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;_explode(Collection<PropertyName>,Map<PropertyName,POJOPropertyBuilder>,Linked<?>);;;                // [Issue#541] ... but only as long as it's visible
                if (!node.isVisible) {
                    continue;
                }
                
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;parseAsISO8601(String,ParsePosition);                ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer;_readAndBind(JsonParser,DeserializationContext,Map<Object,Object>);            } catch(UnresolvedForwardReference reference) {;;            } catch (UnresolvedForwardReference reference) {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer;_readAndBind(JsonParser,DeserializationContext,Map<Object,Object>);;;            } catch (Exception e) {
                wrapAndThrow(e, result, fieldName);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3261453_d9c92cd/rev_3261453-d9c92cd;/src/main/java/com/fasterxml/jackson/databind/deser/std/MapDeserializer;_readAndBindStringMap(JsonParser,DeserializationContext,Map<Object,Object>);;;            } catch (Exception e) {
                wrapAndThrow(e, result, fieldName);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_655d2a1_edf8674/rev_655d2a1-edf8674;/src/main/java/com/fasterxml/jackson/databind/ser/std/EnumSerializer;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);            throws JsonMappingException;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2a2ae59_d7a94ed/rev_2a2ae59-d7a94ed;/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference;testForwardRef();;;public void testForwardRef() throws IOException {
		MAPPER.readValue("{" +
				"  \"@type\" : \"TestForwardReference$ForwardReferenceContainerClass\"," +
				"  \"frc\" : \"willBeForwardReferenced\"," +
				"  \"yac\" : {" +
				"    \"@type\" : \"TestForwardReference$YetAnotherClass\"," +
				"    \"frc\" : {" +
				"      \"@type\" : \"One\"," +
				"      \"id\" : \"willBeForwardReferenced\"" +
				"    }," +
				"    \"id\" : \"anId\"" +
				"  }," +
				"  \"id\" : \"ForwardReferenceContainerClass1\"" +
				"}", ForwardReferenceContainerClass.class);


	}
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2a2ae59_d7a94ed/rev_2a2ae59-d7a94ed;/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference;setId(String);;;public void setId(String id) {
			this.id = id;
		}
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2a2ae59_d7a94ed/rev_2a2ae59-d7a94ed;/src/test/java/com/fasterxml/jackson/databind/deser/TestForwardReference;YetAnotherClass();;;public YetAnotherClass() {}
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_603991b_7d4201c/rev_603991b-7d4201c;/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization;createContextual(DeserializationContext,BeanProperty);;;@Override
        public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
                BeanProperty property) throws JsonMappingException
        {
            // For now, we just need to access "untyped" deserializer; not use it.
            
            /*JsonDeserializer<Object> ob = */
            ctxt.findContextualValueDeserializer(ctxt.constructType(Object.class), property);
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_603991b_7d4201c/rev_603991b-7d4201c;/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer;resolve(DeserializationContext);;;
        /* 26-Nov-2014, tatu: This is highly unusual, as in general contextualization
         *    should always be called separately, from within "createContextual()".
         *    But this is a very singular deserializer since it operates on `Object`
         *    (and often for `?` type parameter), and as a result, easily and commonly
         *    results in cycles, being value deserializer for various Maps and Collections.
         *    Because of this, we must somehow break the cycles. This is done here by
         *    forcing pseudo-contextualization with null property.
         */

        // So: first find possible custom instances
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_603991b_7d4201c/rev_603991b-7d4201c;/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer;resolve(DeserializationContext);;;
        // and then do bogus contextualization, in case custom ones need to resolve dependencies of
        // their own
        _mapDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_mapDeserializer, null);
        _listDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_listDeserializer, null);
        _stringDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_stringDeserializer, null);
        _numberDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_numberDeserializer, null);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_38573ad_3e0d5d8/rev_38573ad-3e0d5d8;/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization;testCurrencyKeyMap();;;public void testCurrencyKeyMap() throws Exception {
        Currency key = Currency.getInstance("USD");
        String JSON = "{ \"" + key + "\":4}";
        Map<Currency, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<Currency, Object>>() {
        });
        assertNotNull(result);
        assertEquals(1, result.size());
        Object ob = result.keySet().iterator().next();
        assertNotNull(ob);
        assertEquals(Currency.class, ob.getClass());
        assertEquals(key, ob);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_38573ad_3e0d5d8/rev_38573ad-3e0d5d8;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer;forType(Class<?>);;;        } else if (raw == Currency.class) {
            FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);
            return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_38573ad_3e0d5d8/rev_38573ad-3e0d5d8;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer;_parse(String,DeserializationContext);;;        case TYPE_CURRENCY:
            try {
                return _deser._deserialize(key, ctxt);
            } catch (IOException e) {
                throw ctxt.weirdKeyException(_keyClass, key, "unable to parse key as currency");
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_7e507d1_e4ece74/rev_7e507d1-e4ece74;/src/main/java/com/fasterxml/jackson/databind/ObjectMapper;ObjectMapper(ObjectMapper);;;        _injectableValues = src._injectableValues;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_7cf964a_195e9b5/rev_7cf964a-195e9b5;/src/main/java/com/fasterxml/jackson/databind/SerializerProvider;_findExplicitUntypedSerializer(Class<?>);;;        /* 18-Sep-2014, tatu: This is unfortunate patch over related change
         *    that pushes creation of "unknown type" serializer deeper down
         *    in BeanSerializerFactory; as a result, we need to "undo" creation
         *    here.
         */
        if (isUnknownTypeSerializer(ser)) {
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_dd955cf_66bfe66/rev_dd955cf-66bfe66;/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization;Wat(String);;;@JsonCreator
        Wat(String wat) {
            this.wat = wat;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_dd955cf_66bfe66/rev_dd955cf-66bfe66;/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization;getWat();;;@JsonValue
        public String getWat() {
            return wat;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_dd955cf_66bfe66/rev_dd955cf-66bfe66;/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization;toString();;;@Override
        public String toString() {
            return "(String)[Wat: " + wat + "]";
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_0f7f583_61c226c/rev_0f7f583-61c226c;/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization;findEnumDeserializer(Class<?>,DeserializationConfig,BeanDescription);;;@Override
        public JsonDeserializer<?> findEnumDeserializer(final Class<?> type, final DeserializationConfig config, final BeanDescription beanDesc) throws JsonMappingException {
            final Collection<AnnotatedMethod> factoryMethods = beanDesc.getFactoryMethods();
            if (factoryMethods != null) {
                for (AnnotatedMethod am : factoryMethods) {
                    final JsonCreator creator = am.getAnnotation(JsonCreator.class);
                    if (creator != null) {
                        return EnumDeserializer.deserializerForCreator(config, type, am);
                    }
                }
            }
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_0f7f583_61c226c/rev_0f7f583-61c226c;/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization;setupModule(SetupContext);;;@Override
        public void setupModule(final SetupContext context) {
            context.addDeserializers(new DelegatingDeserializers());
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_0f7f583_61c226c/rev_0f7f583-61c226c;/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization;testDeserializerForCreatorWithEnumMaps();;;public void testDeserializerForCreatorWithEnumMaps() throws Exception
    {
        final ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new DelegatingDeserializersModule());
        EnumMap<EnumWithCreator,String> value = mapper.readValue("{\"enumA\":\"value\"}",
            new TypeReference<EnumMap<EnumWithCreator,String>>() {});
        assertEquals("value", value.get(EnumWithCreator.A));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_817a45a_85282b1/rev_817a45a-85282b1;/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue;DataADeserializer();;;DataADeserializer() {
            super(DataA.class);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_817a45a_85282b1/rev_817a45a-85282b1;/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue;deserialize(JsonParser,DeserializationContext);;;public DataA deserialize(JsonParser jp, DeserializationContext ctxt)
                throws JsonProcessingException, IOException {
            if (jp.getCurrentToken() != JsonToken.START_OBJECT) {
                throw ctxt.mappingException("Wrong current token, expected START_OBJECT, got: "
                        +jp.getCurrentToken());
            }
            /*JsonNode node =*/ jp.readValueAsTree();

            DataA da = new DataA();
            da.i = 5;
            return da;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_817a45a_85282b1/rev_817a45a-85282b1;/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue;testIssue744();;;public void testIssue744() throws IOException
    {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(DataA.class, new DataADeserializer());
        mapper.registerModule(module);

        DataB db = new DataB();
        db.da.i = 11;
        db.k = 13;
        String jsonBString = mapper.writeValueAsString(db);
        JsonNode jsonBNode = mapper.valueToTree(db);

        // create parent
        DataB dbNewViaString = mapper.readValue(jsonBString, DataB.class);
        assertEquals(5, dbNewViaString.da.i);
        assertEquals(13, dbNewViaString.k);

        DataB dbNewViaNode = mapper.treeToValue(jsonBNode, DataB.class);
        assertEquals(5, dbNewViaNode.da.i);
        assertEquals(13, dbNewViaNode.k);

        // update parent
        DataB dbUpdViaString = new DataB();
        DataB dbUpdViaNode = new DataB();

        assertEquals(1, dbUpdViaString.da.i);
        assertEquals(3, dbUpdViaString.k);
        mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);
        assertEquals(5, dbUpdViaString.da.i);
        assertEquals(13, dbUpdViaString.k);

        assertEquals(1, dbUpdViaNode.da.i);
        assertEquals(3, dbUpdViaNode.k);
        
        mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);
        assertEquals(5, dbUpdViaNode.da.i);
        assertEquals(13, dbUpdViaNode.k);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;getX();;;int getX();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;getX();;;int getX();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;ValueInterfaceImpl(int);;;protected ValueInterfaceImpl(int x) {
            _x = x+1;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;getX();;;@Override
        public int getX() {
            return _x;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;ValueInterface2Impl(int);;;protected ValueInterface2Impl(int x) {
            _x = x+1;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;getX();;;@Override
        public int getX() {
            return _x;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;withX(int);;;public ValueInterfaceBuilder withX(int x0) {
            this.x = x0;
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;build();;;public ValueInterface build() {
            return new ValueInterfaceImpl(x);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;withX(int);;;public ValueInterface2Builder withX(int x0) {
            this.x = x0;
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;build();;;public ValueInterface2Impl build() {
            return new ValueInterface2Impl(x);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;withX(int);;;public ValueBuilderWrongBuildType withX(int x0) {
            this.x = x0;
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;build();;;public ValueClassXY build() {
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;testSimple();    	String json = "{\"x\":1,\"y\":2}";
    	Object o = mapper.readValue(json, ValueClassXY.class);
    	assertNotNull(o);
    	assertSame(ValueClassXY.class, o.getClass());
    	ValueClassXY value = (ValueClassXY) o;
    	// note: ctor adds one to both values
    	assertEquals(value._x, 2);
    	assertEquals(value._y, 3);;;        String json = "{\"x\":1,\"y\":2}";
        Object o = mapper.readValue(json, ValueClassXY.class);
        assertNotNull(o);
    	    assertSame(ValueClassXY.class, o.getClass());
    	    ValueClassXY value = (ValueClassXY) o;
    	    // note: ctor adds one to both values
    	    assertEquals(value._x, 2);
    	    assertEquals(value._y, 3);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;testMultiAccess();    	String json = "{\"c\":3,\"a\":2,\"b\":-9}";
    	ValueClassABC value = mapper.readValue(json, ValueClassABC.class);
    	assertNotNull(value);
    	// note: ctor adds one to both values
    	assertEquals(value.a, 2);
    	assertEquals(value.b, -9);
    	assertEquals(value.c, 3);;;        String json = "{\"c\":3,\"a\":2,\"b\":-9}";
        ValueClassABC value = mapper.readValue(json, ValueClassABC.class);
        assertNotNull(value);
    	    // note: ctor adds one to both values
        assertEquals(value.a, 2);
        assertEquals(value.b, -9);
        assertEquals(value.c, 3);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;testBuilderMethodReturnMoreGeneral();;;public void testBuilderMethodReturnMoreGeneral() throws Exception
    {
        final String json = "{\"x\":1}";
        ValueInterface value = mapper.readValue(json, ValueInterface.class);
        assertEquals(2, value.getX());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;testBuilderMethodReturnMoreSpecific();;;public void testBuilderMethodReturnMoreSpecific() throws Exception
    {
        final String json = "{\"x\":1}";
        ValueInterface2 value = mapper.readValue(json, ValueInterface2.class);
        assertEquals(2, value.getX());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c9fa0e_3470803/rev_2c9fa0e-3470803;/src/test/java/com/fasterxml/jackson/databind/creators/TestBuilderSimple;testBuilderMethodReturnInvalidType();;;public void testBuilderMethodReturnInvalidType() throws Exception
    {
        final String json = "{\"x\":1}";
        try {
            mapper.readValue(json, ValueClassWrongBuildType.class);
            fail("Missing expected JsonProcessingException exception");
        } catch(JsonProcessingException e) {
            assertTrue(
                    "Exception cause must be IllegalArgumentException",
                    e.getCause() instanceof IllegalArgumentException);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4ef389_7db1f44/rev_f4ef389-7db1f44;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_isAnnotationBundle(Annotation);private final boolean _isAnnotationBundle(Annotation ann)
   {
       return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);
   };;private final boolean _isAnnotationBundle(Annotation ann) {
        return (_annotationIntrospector != null) && _annotationIntrospector.isAnnotationBundle(ann);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;Foo(Bar);;;@JsonCreator
        public Foo(@JsonProperty("bar") Bar bar) {
            this.bar = bar;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;getBar();;;public Bar getBar() {
            return bar;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;Bar(Baz);;;@JsonCreator
        public Bar(@JsonProperty("baz") Baz baz) {
            this.baz = baz;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;getBaz();;;public Baz getBaz() {
            return baz;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;Baz(String);;;@JsonCreator
        public Baz(@JsonProperty("qux") String qux) {
            this.qux = qux;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;getQux();;;public String getQux() {
            return qux;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithJsonCreatorDeserialization;testShouldThrowJsonMappingExceptionWithPathReference();;;public void testShouldThrowJsonMappingExceptionWithPathReference() throws IOException {
        // given
        ObjectMapper mapper = new ObjectMapper();
        String input = "{\"bar\":{\"baz\":{qux:\"quxValue\"))}";

        // when
        try {
            mapper.readValue(input, Foo.class);
            fail("Upsss! Exception has not been thrown.");
        } catch (JsonMappingException ex) {
            // then
            assertEquals("com.fasterxml.jackson.databind.deser.Foo[\"bar\"]->com.fasterxml.jackson.databind.deser.Bar[\"baz\"]",
                    ex.getPathReference());
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;Foo();;;public Foo() {
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;getBar();;;public Bar getBar() {
            return bar;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;Bar();;;public Bar() {
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;getBaz();;;public Baz getBaz() {
            return baz;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;Baz();;;public Baz() {
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;getQux();;;public String getQux() {
            return qux;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/test/java/com/fasterxml/jackson/databind/deser/TestExceptionHandlingWithDefaultDeserialization;testShouldThrowJsonMappingExceptionWithPathReference();;;public void testShouldThrowJsonMappingExceptionWithPathReference() throws IOException {
        // given
        ObjectMapper mapper = new ObjectMapper();
        String input = "{\"bar\":{\"baz\":{qux:\"quxValue\"))}";

        // when
        try {
            mapper.readValue(input, Foo.class);
            fail("Upsss! Exception has not been thrown.");
        } catch (JsonMappingException ex) {
            // then
            assertEquals("com.fasterxml.jackson.databind.deser.Foo[\"bar\"]->com.fasterxml.jackson.databind.deser.Bar[\"baz\"]",
                    ex.getPathReference());
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;_deserializeUsingPropertyBased(JsonParser,DeserializationContext);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;_deserializeUsingPropertyBased(JsonParser,DeserializationContext);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;deserializeWithExternalTypeId(JsonParser,DeserializationContext,Object);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2abf5a3_5f09320/rev_2abf5a3-5f09320;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;deserializeWithExternalTypeId(JsonParser,DeserializationContext,Object);            handleUnknownProperty(p, ctxt, bean, propName);         ;;            handleUnknownProperty(p, ctxt, bean, propName);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_e5b8ff1_5183922/rev_e5b8ff1-5183922;/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest;testCopy();;;        assertFalse(m.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
        m.enable(JsonParser.Feature.ALLOW_COMMENTS);
        assertTrue(m.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_e5b8ff1_5183922/rev_e5b8ff1-5183922;/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest;testCopy();;;
        // [Issue#913]: Ensure JsonFactory Features copied
        assertTrue(m2.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));
        
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_e5b8ff1_5183922/rev_e5b8ff1-5183922;/src/main/java/com/fasterxml/jackson/databind/MappingJsonFactory;MappingJsonFactory(JsonFactory,ObjectMapper);;;public MappingJsonFactory(JsonFactory src, ObjectMapper mapper)
    {
        super(src, mapper);
        if (mapper == null) {
          setCodec(new ObjectMapper(this));
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_313a713_d21210b/rev_313a713-d21210b;/src/main/java/com/fasterxml/jackson/databind/node/NullNode;hashCode();;;@Override
    public int hashCode() {
        return 0;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_313a713_d21210b/rev_313a713-d21210b;/src/main/java/com/fasterxml/jackson/databind/node/BooleanNode;hashCode();;;@Override
    public int hashCode() {
        return Boolean.valueOf(_value).hashCode();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_313a713_d21210b/rev_313a713-d21210b;/src/main/java/com/fasterxml/jackson/databind/node/ValueNode;hashCode();;;@Override public abstract int hashCode();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_313a713_d21210b/rev_313a713-d21210b;/src/main/java/com/fasterxml/jackson/databind/node/MissingNode;hashCode();;;@Override
    public int hashCode() {
        return 0;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/TestCustomKeyDeserializer;troubleWithKeys();;;@Test
    public void troubleWithKeys() throws Exception {
        ObjectMapper plainObjectMapper = new ObjectMapper();
        JsonNode tree = plainObjectMapper.readTree(Resources.getResource("data/enum-custom-key-test.json"));
        ObjectMapper fancyObjectMapper = TestEnumModule.setupObjectMapper(new ObjectMapper());
        // this line is might throw with Jackson 2.6.2.
        Map<TestEnum, Set<String>> map = fancyObjectMapper.convertValue(tree, new TypeReference<Map<TestEnum, Set<String>>>() {
        });
        assertNotNull(map);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/TestCustomKeyDeserializer;tree();;;@Ignore("issue 749, more or less")
    @Test
    public void tree() throws Exception {

        Map<KeyEnum, Object> inputMap = Maps.newHashMap();
        Map<TestEnum, Map<String, String>> replacements = Maps.newHashMap();
        Map<String, String> reps = Maps.newHashMap();
        reps.put("1", "one");
        replacements.put(TestEnum.GREEN, reps);
        inputMap.put(KeyEnum.replacements, replacements);
        ObjectMapper mapper = TestEnumModule.setupObjectMapper(new ObjectMapper());
        JsonNode tree = mapper.valueToTree(inputMap);
        ObjectNode ob = (ObjectNode) tree;
        JsonNode inner = ob.get("replacements");
        String firstFieldName = inner.fieldNames().next();
        assertEquals("green", firstFieldName);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/ModuleVersion;ModuleVersion();;;private ModuleVersion() {
        //
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumSerializer;serialize(TestEnum,JsonGenerator,SerializerProvider);;;@Override
    public void serialize(TestEnum languageCode, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        jsonGenerator.writeString(languageCode.code());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumSerializer;handledType();;;@Override
    public Class<TestEnum> handledType() {
        return TestEnum.class;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnum;TestEnum(String);;;TestEnum(String code) {
        this.code = code;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnum;lookup(String);;;public static TestEnum lookup(String lower) {
        for (TestEnum item : values()) {
            if (item.code().equals(lower)) {
                return item;
            }
        }
        throw new IllegalArgumentException("Invalid code " + lower);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnum;code();;;public String code() {
        return code;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumKeyDeserializer;deserializeKey(String,DeserializationContext);;;@Override
    public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
        try {
            return TestEnum.lookup(key);
        } catch (IllegalArgumentException e) {
            throw ctxt.weirdKeyException(TestEnum.class, key, "Unknown code");
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumKeySerializer;serialize(TestEnum,JsonGenerator,SerializerProvider);;;@Override
    public void serialize(TestEnum test, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        jsonGenerator.writeFieldName(test.code());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumKeySerializer;handledType();;;@Override
    public Class<TestEnum> handledType() {
        return TestEnum.class;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/Bean;getRootDirectory();;;public File getRootDirectory() {
        return rootDirectory;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/Bean;setRootDirectory(File);;;public void setRootDirectory(File rootDirectory) {
        this.rootDirectory = rootDirectory;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/Bean;getLicenseString();;;public String getLicenseString() {
        return licenseString;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/Bean;setLicenseString(String);;;public void setLicenseString(String licenseString) {
        this.licenseString = licenseString;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/Bean;getReplacements();;;public Map<TestEnum, Map<String, String>> getReplacements() {
        return replacements;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/Bean;setReplacements(Map<TestEnum,Map<String,String>>);;;public void setReplacements(Map<TestEnum, Map<String, String>> replacements) {
        this.replacements = replacements;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumDeserializer;TestEnumDeserializer();;;public TestEnumDeserializer() {
        super(TestEnum.class);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumDeserializer;deserialize(JsonParser,DeserializationContext);;;@Override
    public TestEnum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
        String code = jp.getText();
        try {
            return TestEnum.lookup(code);
        } catch (IllegalArgumentException e) {
            throw new InvalidFormatException("Undefined ISO-639 language code", jp.getCurrentLocation(), code, TestEnum.class);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumModule;TestEnumModule();;;public TestEnumModule() {
        super(ModuleVersion.VERSION);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumModule;setupModule(SetupContext);;;public void setupModule(SetupContext context) {
        context.setMixInAnnotations(TestEnum.class, TestEnumMixin.class);
        SimpleSerializers keySerializers = new SimpleSerializers();
        keySerializers.addSerializer(new TestEnumKeySerializer());
        context.addKeySerializers(keySerializers);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/test/java/com/fasterxml/jackson/databind/module/customenumkey/TestEnumModule;setupObjectMapper(ObjectMapper);;;public static ObjectMapper setupObjectMapper(ObjectMapper mapper) {
        final TestEnumModule module = new TestEnumModule();
        mapper.registerModule(module);
        return mapper;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;_createEnumKeyDeserializer(DeserializationContext,JavaType);;;        Class<?> enumClass = type.getRawClass();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_f4f71b9_2eafcdf/rev_f4f71b9-2eafcdf;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;findKeyDeserializerFromAnnotation(DeserializationContext,Annotated);;;protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext ctxt,
                                                                      Annotated ann)
            throws JsonMappingException
    {
        Object deserDef = ctxt.getAnnotationIntrospector().findKeyDeserializer(ann);
        if (deserDef == null) {
            return null;
        }
        return ctxt.keyDeserializerInstance(ann, deserDef);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_be11363_c966a03/rev_be11363-c966a03;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;deserializeWithExternalTypeId(JsonParser,DeserializationContext);;;        if (_delegateDeserializer != null) {
            /* 24-Nov-2015, tatu: Use of delegating creator needs to have precedence, and basically
             *   external type id handling just has to be ignored, as they would relate to target
             *   type and not delegate type. Whether this works as expected is another story, but
             *   there's no other way to really mix these conflicting features.
             */
            return _valueInstantiator.createUsingDelegate(ctxt,
                    _delegateDeserializer.deserialize(p, ctxt));
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_bf2b2b0_e59a1ae/rev_bf2b2b0-e59a1ae;/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs;getFoo();;;@Override
        public int getFoo() { return 42; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_bf2b2b0_e59a1ae/rev_bf2b2b0-e59a1ae;/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs;getBar();;;public int getBar() { return 15; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_bf2b2b0_e59a1ae/rev_bf2b2b0-e59a1ae;/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs;testSerializeAsInClass();public void testSerializeAsInClass() throws IOException
    {;;public void testSerializeAsInClass() throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_bf2b2b0_e59a1ae/rev_bf2b2b0-e59a1ae;/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs;testSerializeAsForArrayProp();public void testSerializeAsForArrayProp() throws IOException
    {
        assertEquals("{\"foos\":[{\"foo\":42}]}", WRITER.writeValueAsString(new Fooables()));;;public void testSerializeAsForArrayProp() throws IOException {
        assertEquals("{\"foos\":[{\"foo\":42}]}",
                WRITER.writeValueAsString(new Fooables()));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_bf2b2b0_e59a1ae/rev_bf2b2b0-e59a1ae;/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs;testSerializeAsForSimpleProp();public void testSerializeAsForSimpleProp() throws IOException
    {
        assertEquals("{\"foo\":{\"foo\":42}}", WRITER.writeValueAsString(new FooableWrapper()));;;public void testSerializeAsForSimpleProp() throws IOException {
        assertEquals("{\"foo\":{\"foo\":42}}",
                WRITER.writeValueAsString(new FooableWrapper()));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_bf2b2b0_e59a1ae/rev_bf2b2b0-e59a1ae;/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs;testSerializeWithFieldAnno();;;public void testSerializeWithFieldAnno() throws IOException {
        assertEquals("{\"foo\":{\"foo\":42}}",
                WRITER.writeValueAsString(new FooableWithFieldWrapper()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_11c200b_3aee590/rev_11c200b-3aee590;/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer;deserializeArray(JsonParser,DeserializationContext,JsonNodeFactory);                break;;;		break;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;TypeBindings(TypeFactory,ClassStack,Class<?>);;;public TypeBindings(TypeFactory typeFactory, ClassStack stack, Class<?> cc)
    {
        this(typeFactory, null, stack, cc, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;TypeBindings(TypeFactory,ClassStack,JavaType);;;public TypeBindings(TypeFactory typeFactory, ClassStack stack, JavaType type)
    {
        this(typeFactory, null, stack, type.getRawClass(), type);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;childInstance();;;public TypeBindings childInstance() {
        return new TypeBindings(_typeFactory, this, _classStack, _contextClass, _contextType);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;TypeBindings(TypeFactory,TypeBindings,ClassStack,Class<?>,JavaType);;;private TypeBindings(TypeFactory tf, TypeBindings parent, ClassStack stack,
            Class<?> cc, JavaType type)
    {
        _typeFactory = tf;
        _parentBindings = parent;
        _classStack = stack;
        _contextClass = cc;
        _contextType = type;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;resolveType(Class<?>);;;public JavaType resolveType(Class<?> cls) {
        return _typeFactory._constructType(_classStack, cls, this);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;resolveType(Type);;;public JavaType resolveType(Type type) {
        return _typeFactory._constructType(_classStack, type, this);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;findType(String,boolean);;;public JavaType findType(String name, boolean mustFind)
    {
        if (_bindings == null) {
            _resolve();
        }
        JavaType t = _bindings.get(name);
        if (t != null) {
            return t;
        }
        if (_placeholders != null && _placeholders.contains(name)) {
            return UNBOUND;
        }
        if (_parentBindings != null) {
            return _parentBindings.findType(name, mustFind);
        }
        // nothing found, so...
        // Should we throw an exception or just return null?

        /* 18-Feb-2011, tatu: There are some tricky type bindings within
         *   java.util, such as HashMap$KeySet; so let's punt the problem
         *   (honestly not sure what to do -- they are unbound for good, I think)
         */
        if (_contextClass != null) {
            if (ClassUtil.getEnclosingClass(_contextClass) != null) {
                // [JACKSON-572]: Actually, let's skip this for all non-static inner classes
                //   (which will also cover 'java.util' type cases...
                if (!Modifier.isStatic(_contextClass.getModifiers())) {
                    return UNBOUND;
                }
            }
        }

        if (!mustFind) {
            return null;
        }
        
        String className;
        if (_contextClass != null) {
            className = _contextClass.getName();
        } else if (_contextType != null) {
            className = _contextType.toString();
        } else {
            className = "UNKNOWN";
        }
        throw new IllegalArgumentException("Type variable '"+name
                +"' can not be resolved (with context of class "+className+")");
        //t = UNBOUND;                
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;addBinding(String,JavaType);;;public void addBinding(String name, JavaType type)
    {
        // note: emptyMap() is unmodifiable, hence second check is needed:
        if (_bindings == null || _bindings.size() == 0) {
            _bindings = new LinkedHashMap<String,JavaType>();
        }
        _bindings.put(name, type);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;typesAsArray();;;public JavaType[] typesAsArray()
    {
        if (_bindings == null) {
            _resolve();
        }
        if (_bindings.size() == 0) {
            return NO_TYPES;
        }
        return _bindings.values().toArray(new JavaType[_bindings.size()]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;getBindingCount();;;protected int getBindingCount() {
        if (_bindings == null) {
            _resolve();
        }
        return _bindings.size();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;_resolve();;;protected void _resolve()
    {
        _resolveBindings(_contextClass);

        // finally: may have root level type info too
        if (_contextType != null) {
            int count = _contextType.containedTypeCount();
            if (count > 0) {
                for (int i = 0; i < count; ++i) {
                    String name = _contextType.containedTypeName(i);
                    JavaType type = _contextType.containedType(i);
                    addBinding(name, type);
                }
            }
        }

        // nothing bound? mark with empty map to prevent further calls
        if (_bindings == null) {
            _bindings = Collections.emptyMap();
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;_addPlaceholder(String);;;public void _addPlaceholder(String name) {
        if (_placeholders == null) {
            _placeholders = new HashSet<String>();
        }
        _placeholders.add(name);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;_resolveBindings(Type);;;protected void _resolveBindings(Type t)
    {
        if (t == null) return;

        Class<?> raw;
        if (t instanceof ParameterizedType) {
            ParameterizedType pt = (ParameterizedType) t;
            Type[] args = pt.getActualTypeArguments();
            if (args  != null && args.length > 0) {
                Class<?> rawType = (Class<?>) pt.getRawType();    
                TypeVariable<?>[] vars = rawType.getTypeParameters();
                if (vars.length != args.length) {
                    throw new IllegalArgumentException("Strange parametrized type (in class "+rawType.getName()+"): number of type arguments != number of type parameters ("+args.length+" vs "+vars.length+")");
                }
                for (int i = 0, len = args.length; i < len; ++i) {
                    TypeVariable<?> var = vars[i];
                    String name = var.getName();
                    if (_bindings == null) {
                        _bindings = new LinkedHashMap<String,JavaType>();
                    } else {
                        // 24-Mar-2010, tatu: Better ensure that we do not overwrite something
                        //  collected earlier (since we descend towards super-classes):
                        if (_bindings.containsKey(name)) continue;
                    }
                    // first: add a placeholder to prevent infinite loops
                    _addPlaceholder(name);
                    // then resolve type
                    _bindings.put(name, _typeFactory._constructType(_classStack, args[i], this));
                }
            }
            raw = (Class<?>)pt.getRawType();
        } else if (t instanceof Class<?>) {
            raw = (Class<?>) t;
            /* [JACKSON-677]: If this is an inner class then the generics are defined on the 
             * enclosing class so we have to check there as well.  We don't
             * need to call getEnclosingClass since anonymous classes declare 
             * generics
             */
            Class<?> decl = ClassUtil.getDeclaringClass(raw);
            /* 08-Feb-2013, tatu: Except that if context is also super-class, we must
             *   skip it; context will be checked anyway, and we'd get StackOverflow if
             *   we went there.
             */
            if (decl != null && !decl.isAssignableFrom(raw)) {
                _resolveBindings(decl);
            }

            /* 24-Mar-2010, tatu: Can not have true generics definitions, but can
             *   have lower bounds ("<T extends BeanBase>") in declaration itself
             */
            TypeVariable<?>[] vars = raw.getTypeParameters();
            if (vars != null && vars.length > 0) {
                JavaType[] typeParams = null;

                if (_contextType != null && raw.isAssignableFrom(_contextType.getRawClass())) {
                    typeParams = _typeFactory.findTypeParameters(_contextType, raw);
                }

                for (int i = 0; i < vars.length; i++) {
                    TypeVariable<?> var = vars[i];

                    String name = var.getName();
                    Type varType = var.getBounds()[0];
                    if (varType != null) {
                        if (_bindings == null) {
                            _bindings = new LinkedHashMap<String,JavaType>();
                        } else { // and no overwriting...
                            if (_bindings.containsKey(name)) continue;
                        }
                        _addPlaceholder(name); // to prevent infinite loops

                        if (typeParams != null && typeParams.length > i) {
                            _bindings.put(name, typeParams[i]);
                        } else {
                            _bindings.put(name, _typeFactory._constructType(_classStack, varType, this));
                        }
                    }
                }
            }
        } else { // probably can't be any of these... so let's skip for now
            //if (type instanceof GenericArrayType) {
            //if (type instanceof TypeVariable<?>) {
            // if (type instanceof WildcardType) {
            return;
        }
        // but even if it's not a parameterized type, its super types may be:
        _resolveBindings(ClassUtil.getGenericSuperclass(raw));
        for (Type intType : raw.getGenericInterfaces()) {
            _resolveBindings(intType);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/attic/TypeBindings;toString();;;@Override
    public String toString()
    {
        if (_bindings == null) {
            _resolve();
        }
        StringBuilder sb = new StringBuilder("[TypeBindings for ");
        if (_contextType != null) {
            sb.append(_contextType.toString());
        } else {
            sb.append(_contextClass.getName());
        }
        sb.append(": ").append(_bindings).append("]");
        return sb.toString();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;MyPOJO(String,String);;;@JsonCreator
      public MyPOJO(@JsonProperty("x") String x, @JsonProperty("y") String y) {
        this.x = x;
        this.y = y;
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;MyGenericPOJO(List<T>);;;private MyGenericPOJO(List<T> d) {
        data = d;
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;getData();;;public List<T> getData() {
        return data;
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;withData(List<T>);;;public Builder<T> withData(List<T> d) {
          data = d;
          return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;build();;;public MyGenericPOJO<T> build() {
          return new MyGenericPOJO<T>(data);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;MyGenericPOJOWithCreator(List<T>);;;private MyGenericPOJOWithCreator(List<T> d) {
          data = d;
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;create(List<T>);;;@JsonCreator
      public static <T> MyGenericPOJOWithCreator<T> create(@JsonProperty("data") List<T> data) {
          return new MyGenericPOJOWithCreator.Builder<T>().withData(data).build();
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;getData();;;public List<T> getData() {
          return data;
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;withData(List<T>);;;public Builder<T> withData(List<T> d) {
              data = d;
              return this;
          }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;build();;;public MyGenericPOJOWithCreator<T> build() {
              return new MyGenericPOJOWithCreator<T>(data);
          }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;testWithBuilder();;;public void testWithBuilder() throws Exception {
      final ObjectMapper mapper = new ObjectMapper();
      final String json = aposToQuotes("{ 'data': [ { 'x': 'x', 'y': 'y' } ] }");
      final MyGenericPOJO<MyPOJO> deserialized =
          mapper.readValue(json, new TypeReference<MyGenericPOJO<MyPOJO>>() {});
      assertEquals(1, deserialized.data.size());
      Object ob = deserialized.data.get(0);
      assertNotNull(ob);
      assertEquals(MyPOJO.class, ob.getClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/BuilderDeserializationTest921;testWithCreator();;;public void testWithCreator() throws Exception {
      final ObjectMapper mapper = new ObjectMapper();
      final String json = aposToQuotes("{ 'data': [ { 'x': 'x', 'y': 'y' } ] }");
      final MyGenericPOJOWithCreator<MyPOJO> deserialized =
          mapper.readValue(json,
                  new TypeReference<MyGenericPOJOWithCreator<MyPOJO>>() {});
      assertEquals(1, deserialized.data.size());
      Object ob = deserialized.data.get(0);
      assertNotNull(ob);
      assertEquals(MyPOJO.class, ob.getClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/ExternalTypeId999Test;Message(String,P);;;@JsonCreator
        public Message(@JsonProperty("type") String type,
                @JsonProperty("payload") P payload)
        {
            if (payload == null) {
                throw new RuntimeException("'payload' is null");
            }
            if (type == null) {
                throw new RuntimeException("'type' is null");
            }
            this.type = type;
            this.payload = payload;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/ExternalTypeId999Test;testExternalTypeId();;;public void testExternalTypeId() throws Exception
    {
        ObjectMapper objectMapper = new ObjectMapper();
        Message<?> msg = objectMapper.readValue(
                "{ \"type\": \"foo\", \"payload\": {} }",
                new TypeReference<Message<FooPayload>>() { });
        assertNotNull(msg);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/TestUnknownProperty426;setUserId(CharSequence);;;void setUserId(CharSequence id) {
            // 21-Dec-2015, tatu: With a fix in 2.7, use of String would not
            //   trigger the problem, so use CharSequence...
            setUserId(new Integer(id.toString()));
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;getStaticallyMappedProperty();;;public String getStaticallyMappedProperty() {
            return staticallyMappedProperty;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;addDynamicallyMappedProperty(T,int);;;@JsonAnySetter
        public void addDynamicallyMappedProperty(T key, int value) {
            dynamicallyMappedProperties.put(key, value);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;setStaticallyMappedProperty(String);;;public void setStaticallyMappedProperty(String staticallyMappedProperty) {
            this.staticallyMappedProperty = staticallyMappedProperty;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;getDynamicallyMappedProperties();;;@JsonAnyGetter
        public Map<T, Integer> getDynamicallyMappedProperties() {
            return dynamicallyMappedProperties;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;getMyStringGeneric();;;public MyGeneric<String> getMyStringGeneric() {
            return myStringGeneric;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;setMyStringGeneric(MyGeneric<String>);;;public void setMyStringGeneric(MyGeneric<String> myStringGeneric) {
            this.myStringGeneric = myStringGeneric;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;getMyIntegerGeneric();;;public MyGeneric<Integer> getMyIntegerGeneric() {
            return myIntegerGeneric;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;setMyIntegerGeneric(MyGeneric<Integer>);;;public void setMyIntegerGeneric(MyGeneric<Integer> myIntegerGeneric) {
            this.myIntegerGeneric = myIntegerGeneric;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/failing/AnySetter1035Test;testGenericAnySetter();;;public void testGenericAnySetter() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();

        Map<String, Integer> stringGenericMap = new HashMap<String, Integer>();
        stringGenericMap.put("testStringKey", 5);
        Map<Integer, Integer> integerGenericMap = new HashMap<Integer, Integer>();
        integerGenericMap.put(111, 6);

        MyWrapper deserialized = mapper.readValue("{\"myStringGeneric\":{\"staticallyMappedProperty\":\"Test\",\"testStringKey\":5},\"myIntegerGeneric\":{\"staticallyMappedProperty\":\"Test2\",\"111\":6}}", MyWrapper.class);
        MyGeneric<String> stringGeneric = deserialized.getMyStringGeneric();
        MyGeneric<Integer> integerGeneric = deserialized.getMyIntegerGeneric();

        assertNotNull(stringGeneric);
        assertEquals(stringGeneric.getStaticallyMappedProperty(), "Test");
        for(Map.Entry<String, Integer> entry : stringGeneric.getDynamicallyMappedProperties().entrySet()) {
            assertTrue("A key in MyGeneric<String> is not an String.", entry.getKey() instanceof String);
            assertTrue("A value in MyGeneric<Integer> is not an Integer.", entry.getValue() instanceof Integer);
        }
        assertEquals(stringGeneric.getDynamicallyMappedProperties(), stringGenericMap);

        assertNotNull(integerGeneric);
        assertEquals(integerGeneric.getStaticallyMappedProperty(), "Test2");
        for(Map.Entry<Integer, Integer> entry : integerGeneric.getDynamicallyMappedProperties().entrySet()) {
            Object key = entry.getKey();
            assertEquals("A key in MyGeneric<Integer> is not an Integer.", Integer.class, key.getClass());
            Object value = entry.getValue();
            assertEquals("A value in MyGeneric<Integer> is not an Integer.", Integer.class, value.getClass());
        }
        assertEquals(integerGeneric.getDynamicallyMappedProperties(), integerGenericMap);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest;testNonSerializabilityOfObject();;;
        // [databind#978]: Different answer if empty Beans ARE allowed
        m = new ObjectMapper();
        m.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
        assertTrue(m.canSerialize(Object.class));
        assertTrue(MAPPER.writer().without(SerializationFeature.FAIL_ON_EMPTY_BEANS)
                .canSerialize(Object.class));
        assertFalse(MAPPER.writer().with(SerializationFeature.FAIL_ON_EMPTY_BEANS)
                .canSerialize(Object.class));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ObjectMapperTest;testSerializerProviderAccess();;;public void testSerializerProviderAccess() throws Exception
    {
        // ensure we have "fresh" instance, just in case
        ObjectMapper mapper = new ObjectMapper();
        JsonSerializer<?> ser = mapper.getSerializerProviderInstance()
                .findValueSerializer(Bean.class);
        assertNotNull(ser);
        assertEquals(Bean.class, ser.handledType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestStdDateFormat;testLenient();;;public void testLenient() throws Exception
    {
        StdDateFormat f = StdDateFormat.instance;

        // default should be lenient
        assertTrue(f.isLenient());

        StdDateFormat f2 = f.clone();
        assertTrue(f2.isLenient());

        f2.setLenient(false);
        assertFalse(f2.isLenient());

        f2.setLenient(true);
        assertTrue(f2.isLenient());

        // and for testing, finally, leave as non-lenient
        f2.setLenient(false);
        assertFalse(f2.isLenient());
        StdDateFormat f3 = f2.clone();
        assertFalse(f3.isLenient());

        // first, legal dates are... legal
        Date dt = f3.parse("2015-11-30");
        assertNotNull(dt);

        // but as importantly, when not lenient, do not allow
        try {
            f3.parse("2015-11-32");
            fail("Should not pass");
        } catch (ParseException e) {
            verifyException(e, "can not parse date");
        }

        // ... yet, with lenient, do allow
        f3.setLenient(true);
        dt = f3.parse("2015-11-32");
        assertNotNull(dt);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/BaseMapTest;newTypeFactory();;;protected TypeFactory newTypeFactory() {
        // this is a work-around; no null modifier added
        return TypeFactory.defaultInstance().withModifier(null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/BaseMapTest;quotesToApos(String);;;protected static String quotesToApos(String json) {
        return json.replace("\"", "'");
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;TestCustomIdResolver(String);;;public TestCustomIdResolver(String idForBean) {
            _id = idForBean;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;getMechanism();;;@Override
        public Id getMechanism() {
            return Id.CUSTOM;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;idFromValue(Object);;;@Override
        public String idFromValue(Object value)
        {
            if (value.getClass() == TypeIdBean.class) {
                return _id;
            }
            return "unknown";
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;idFromValueAndType(Object,Class<?>);;;@Override
        public String idFromValueAndType(Object value, Class<?> type) {
            return idFromValue(value);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;init(JavaType);;;@Override
        public void init(JavaType baseType) {
            if (initTypes != null) {
                initTypes.add(baseType);
            }
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;typeFromId(DatabindContext,String);;;@Override
        public JavaType typeFromId(DatabindContext context, String id)
        {
            if (id.equals(_id)) {
                return TypeFactory.defaultInstance().constructType(TypeIdBean.class);
            }
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/TestHandlerInstantiation;idFromBaseType();;;@Override
        public String idFromBaseType() {
            return "xxx";
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest;testJsonValueFormatHandling();;;public void testJsonValueFormatHandling() throws Exception
    {
        // first: serialize using 'toString()', not name
        final String EXP = quote("host-name");
        assertEquals(EXP, MAPPER.writeValueAsString(JsonValueFormat.HOST_NAME));

        // and second, deserialize ok from that as well
        assertSame(JsonValueFormat.HOST_NAME, MAPPER.readValue(EXP, JsonValueFormat.class));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest;testSimpleNumbers();;;public void testSimpleNumbers() throws Exception
    {
        final StringBuilder sb = new StringBuilder();
        
        MAPPER.acceptJsonFormatVisitor(Numbers.class,
                new JsonFormatVisitorWrapper.Base() {
            @Override
            public JsonObjectFormatVisitor expectObjectFormat(final JavaType type) {
                return new JsonObjectFormatVisitor.Base(getProvider()) {
                    @Override
                    public void optionalProperty(BeanProperty prop) throws JsonMappingException {
                        sb.append("[optProp ").append(prop.getName()).append("(");
                        JsonSerializer<Object> ser = null;
                        if (prop instanceof BeanPropertyWriter) {
                            BeanPropertyWriter bpw = (BeanPropertyWriter) prop;
                            ser = bpw.getSerializer();
                        }
                        final SerializerProvider prov = getProvider();
                        if (ser == null) {
                            ser = prov.findValueSerializer(prop.getType(), prop);
                        }
                        ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base() {
                            @Override
                            public JsonNumberFormatVisitor expectNumberFormat(
                                    JavaType t) throws JsonMappingException {
                                return new JsonNumberFormatVisitor() {
                                    @Override
                                    public void format(JsonValueFormat format) {
                                        sb.append("[numberFormat=").append(format).append("]");
                                    }

                                    @Override
                                    public void enumTypes(Set<String> enums) { }

                                    @Override
                                    public void numberType(NumberType numberType) {
                                        sb.append("[numberType=").append(numberType).append("]");
                                    }
                                };
                            }

                            @Override
                            public JsonIntegerFormatVisitor expectIntegerFormat(JavaType t) throws JsonMappingException {
                                return new JsonIntegerFormatVisitor() {
                                    @Override
                                    public void format(JsonValueFormat format) {
                                        sb.append("[integerFormat=").append(format).append("]");
                                    }

                                    @Override
                                    public void enumTypes(Set<String> enums) { }

                                    @Override
                                    public void numberType(NumberType numberType) {
                                        sb.append("[numberType=").append(numberType).append("]");
                                    }
                                };
                            }
                        }, prop.getType());

                        sb.append(")]");
                    }
                };
            }
        });
        assertEquals("[optProp dec([numberType=BIG_DECIMAL])][optProp bigInt([numberType=BIG_INTEGER])]",
                sb.toString());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema;testOldSchemaGeneration();;;public void testOldSchemaGeneration() throws Exception
    {
        JsonSchema jsonSchema = MAPPER.generateJsonSchema(SimpleBean.class);
        
        assertNotNull(jsonSchema);

        // test basic equality, and that equals() handles null, other obs
        assertTrue(jsonSchema.equals(jsonSchema));
        assertFalse(jsonSchema.equals(null));
        assertFalse(jsonSchema.equals("foo"));

        // other basic things
        assertNotNull(jsonSchema.toString());
        assertNotNull(JsonSchema.getDefaultSchemaNode());

        ObjectNode root = jsonSchema.getSchemaNode();
        assertEquals("object", root.get("type").asText());
        assertEquals(false, root.path("required").booleanValue());
        JsonNode propertiesSchema = root.get("properties");
        assertNotNull(propertiesSchema);
        JsonNode property1Schema = propertiesSchema.get("property1");
        assertNotNull(property1Schema);
        assertEquals("integer", property1Schema.get("type").asText());
        assertEquals(false, property1Schema.path("required").booleanValue());
        JsonNode property2Schema = propertiesSchema.get("property2");
        assertNotNull(property2Schema);
        assertEquals("string", property2Schema.get("type").asText());
        assertEquals(false, property2Schema.path("required").booleanValue());
        JsonNode property3Schema = propertiesSchema.get("property3");
        assertNotNull(property3Schema);
        assertEquals("array", property3Schema.get("type").asText());
        assertEquals(false, property3Schema.path("required").booleanValue());
        assertEquals("string", property3Schema.get("items").get("type").asText());
        JsonNode property4Schema = propertiesSchema.get("property4");
        assertNotNull(property4Schema);
        assertEquals("array", property4Schema.get("type").asText());
        assertEquals(false, property4Schema.path("required").booleanValue());
        assertEquals("number", property4Schema.get("items").get("type").asText());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema;testSchemaSerialization();public void testSchemaSerialization()
            throws Exception;;public void testSchemaSerialization() throws Exception
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema;testSchemaSerialization();	Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);
	assertNotNull(result);
	// no need to check out full structure, just basics...
	assertEquals("object", result.get("type"));
	// only add 'required' if it is true...
	assertNull(result.get("required"));
	assertNotNull(result.get("properties"));;;        Map<String,Object> result = writeAndMap(MAPPER, jsonSchema);
        assertNotNull(result);
        // no need to check out full structure, just basics...
        assertEquals("object", result.get("type"));
        // only add 'required' if it is true...
        assertNull(result.get("required"));
        assertNotNull(result.get("properties"));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsonschema/TestGenerateJsonSchema;testNumberTypes();;;public void testNumberTypes()  throws Exception
    {
        JsonSchema jsonSchema = MAPPER.generateJsonSchema(Numbers.class);
        String json = quotesToApos(jsonSchema.toString());
        String EXP = "{'type':'object',"
                +"'properties':{'dec':{'type':'number'},"
                +"'bigInt':{'type':'integer'}}}";
        assertEquals(EXP, json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/views/TestViewSerialization;test868();;;public void test868() throws IOException
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);
        String json = mapper.writerWithView(OtherView.class).writeValueAsString(new Foo());
        assertEquals(json, "{}");
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/views/ViewsWithSchemaTest;expectObjectFormat(JavaType);;;@Override
        public JsonObjectFormatVisitor expectObjectFormat(JavaType type) {
            return new JsonObjectFormatVisitor.Base() {
                @Override
                public void optionalProperty(BeanProperty writer) {
                    names.add(writer.getName());
                }

                @Override
                public void optionalProperty(String name,
                        JsonFormatVisitable handler, JavaType propertyTypeHint) {
                    names.add(name);
                }
            };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/views/ViewsWithSchemaTest;testSchemaWithViews();;;public void testSchemaWithViews() throws Exception
    {
        ListingVisitor v = new ListingVisitor();
        MAPPER.writerWithView(ViewBC.class)
            .acceptJsonFormatVisitor(POJO.class, v);
        assertEquals(Arrays.asList("b", "c"), v.names);

        v = new ListingVisitor();
        MAPPER.writerWithView(ViewAB.class)
            .acceptJsonFormatVisitor(POJO.class, v);
        assertEquals(Arrays.asList("a", "b"), v.names);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/views/ViewsWithSchemaTest;testSchemaWithoutViews();;;public void testSchemaWithoutViews() throws Exception
    {
        ListingVisitor v = new ListingVisitor();
        MAPPER.acceptJsonFormatVisitor(POJO.class, v);
        assertEquals(Arrays.asList("a", "b", "c"), v.names);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testProperties();;;        MapType mt = (MapType) t;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testParametricTypes();;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testCollectionTypesRefined();;;public void testCollectionTypesRefined()
    {
        TypeFactory tf = newTypeFactory();
        JavaType type = tf.constructType(new TypeReference<List<Long>>() { });
        assertEquals(List.class, type.getRawClass());
        assertEquals(Long.class, type.getContentType().getRawClass());
        // No super-class, since it's an interface:
        assertNull(type.getSuperClass());

        // But then refine to reflect sub-classing
        JavaType subtype = tf.constructSpecializedType(type, ArrayList.class);
        assertEquals(ArrayList.class, subtype.getRawClass());
        assertEquals(Long.class, subtype.getContentType().getRawClass());

        // but with refinement, should have non-null super class
        // 20-Oct-2015, tatu: For now refinement does not faithfully replicate the
        //    structure, it only retains most important information. Here it means
        //    that actually existing super-classes are skipped, and only original
        //    type is linked as expected
        /*
        JavaType superType = subtype.getSuperClass();
        assertNotNull(superType);
        assertEquals(AbstractList.class, superType.getRawClass());
        */
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testMaps();;;
        JavaType type = tf.constructType(new TypeReference<Map<String,Boolean>>() { });
        MapType mapType = (MapType) type;
        assertEquals(tf.constructType(String.class), mapType.getKeyType());
        assertEquals(tf.constructType(Boolean.class), mapType.getContentType());
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testMapTypesRefined();;;public void testMapTypesRefined()
    {
        TypeFactory tf = newTypeFactory();
        JavaType type = tf.constructType(new TypeReference<Map<String,List<Integer>>>() { });
        MapType mapType = (MapType) type;
        assertEquals(Map.class, mapType.getRawClass());
        assertEquals(String.class, mapType.getKeyType().getRawClass());
        assertEquals(List.class, mapType.getContentType().getRawClass());
        assertEquals(Integer.class, mapType.getContentType().getContentType().getRawClass());
        // No super-class, since it's an interface:
        assertNull(type.getSuperClass());
        
        // But then refine to reflect sub-classing
        JavaType subtype = tf.constructSpecializedType(type, LinkedHashMap.class);
        assertEquals(LinkedHashMap.class, subtype.getRawClass());
        assertEquals(String.class, subtype.getKeyType().getRawClass());
        assertEquals(List.class, subtype.getContentType().getRawClass());
        assertEquals(Integer.class, subtype.getContentType().getContentType().getRawClass());

        // but with refinement, should have non-null super class
        // 20-Oct-2015, tatu: For now refinement does not faithfully replicate the
        //    structure, it only retains most important information. Here it means
        //    that actually existing super-classes are skipped, and only original
        //    type is linked as expected

        /*
        JavaType superType = subtype.getSuperClass();
        assertNotNull(superType);
        assertEquals(HashMap.class, superType.getRawClass());
        // which also should have proper typing
        assertEquals(String.class, superType.getKeyType().getRawClass());
        assertEquals(List.class, superType.getContentType().getRawClass());
        assertEquals(Integer.class, superType.getContentType().getContentType().getRawClass());
        */
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testMapTypesAdvanced();;;        
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testMapTypesAdvanced();;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory;testRawCollections();;;        type = tf.constructRawCollectionLikeType(CollectionLike.class); // must have type vars
        assertTrue(type.isCollectionLikeType());
        assertEquals(TypeFactory.unknownType(), type.getContentType());
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;StringyList(Collection<T>);;;@JsonCreator
        public StringyList(Collection<T> src) {
            _stuff = new ArrayList<T>(src);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;StringyList();;;public StringyList() {
            _stuff = new ArrayList<T>();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;add(T);;;@Override
        public boolean add(T arg) {
            return _stuff.add(arg);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;addAll(Collection<?extendsT>);;;@Override
        public boolean addAll(Collection<? extends T> args) {
            return _stuff.addAll(args);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;clear();;;@Override
        public void clear() {
            _stuff.clear();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;contains(Object);;;@Override
        public boolean contains(Object arg) {
            return _stuff.contains(arg);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;containsAll(Collection<?>);;;@Override
        public boolean containsAll(Collection<?> args) {
            return _stuff.containsAll(args);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;isEmpty();;;@Override
        public boolean isEmpty() {
            return _stuff.isEmpty();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;iterator();;;@Override
        public Iterator<T> iterator() {
            return _stuff.iterator();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;remove(Object);;;@Override
        public boolean remove(Object arg) {
            return _stuff.remove(arg);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;removeAll(Collection<?>);;;@Override
        public boolean removeAll(Collection<?> args) {
            return _stuff.removeAll(args);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;retainAll(Collection<?>);;;@Override
        public boolean retainAll(Collection<?> args) {
            return _stuff.retainAll(args);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;size();;;@Override
        public int size() {
            return _stuff.size();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;toArray();;;@Override
        public Object[] toArray() {
            return _stuff.toArray();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;toArray(X[]);;;@Override
        public <X> X[] toArray(X[] arg) {
            return _stuff.toArray(arg);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/PolymorphicList036Test;testPolymorphicWithOverride();;;public void testPolymorphicWithOverride() throws Exception
    {
        JavaType type = MAPPER.getTypeFactory().constructCollectionType(StringyList.class, String.class);
        
        StringyList<String> list = new StringyList<String>();
        list.add("value 1");
        list.add("value 2");
        
        String serialized = MAPPER.writeValueAsString(list);
//        System.out.println(serialized);
        
        StringyList<String> deserialized = MAPPER.readValue(serialized, type);
//        System.out.println(deserialized);
        
        assertNotNull(deserialized);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TypeAliasesTest;testAliasResolutionIssue743();;;public void testAliasResolutionIssue743() throws Exception
    {
        String s3 = "{\"dataObj\" : [ \"one\", \"two\", \"three\" ] }";
        ObjectMapper m = new ObjectMapper();
   
        Child.ChildData d = m.readValue(s3, Child.ChildData.class);
        assertNotNull(d.dataObj);
        assertEquals(3, d.dataObj.size());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/JavaType76Test;testRecursiveType();;;public void testRecursiveType()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType type = tf.constructType(HashTree.class);
        assertNotNull(type);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution;Range(E,E);;;public Range(E start, E end) { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution;DoubleRange();;;public DoubleRange() { super(null, null); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution;DoubleRange(Double,Double);;;public DoubleRange(Double s, Double e) { super(s, e); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution;testListViaTypeRef();;;public void testListViaTypeRef()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType t = tf.constructType(new TypeReference<MyLongList<Integer>>() {});
        CollectionType type = (CollectionType) t;
        assertSame(MyLongList.class, type.getRawClass());
        assertEquals(tf.constructType(Long.class), type.getContentType());        
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution;testListViaClass();;;public void testListViaClass()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType t = tf.constructType(LongList.class);
        JavaType type = (CollectionType) t;
        assertSame(LongList.class, type.getRawClass());
        assertEquals(tf.constructType(Long.class), type.getContentType());        
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestTypeResolution;testGeneric();;;public void testGeneric()
    {
        TypeFactory tf = TypeFactory.defaultInstance();

        // First, via simple sub-class
        JavaType t = tf.constructType(DoubleRange.class);
        JavaType rangeParams = t.findSuperType(Range.class);
        assertEquals(1, rangeParams.containedTypeCount());
        assertEquals(Double.class, rangeParams.containedType(0).getRawClass());

        // then using TypeRef
        t = tf.constructType(new TypeReference<DoubleRange>() { });
        rangeParams = t.findSuperType(Range.class);
        assertEquals(1, rangeParams.containedTypeCount());
        assertEquals(Double.class, rangeParams.containedType(0).getRawClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;Range();;;public Range(){ }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;Range(E,E);;;public Range(E start, E end) {
             this.start = start;
             this.end = end;
         }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getEnd();;;public E getEnd() { return end; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;setEnd(E);;;public void setEnd(E e) { end = e; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getStart();;;public E getStart() { return start; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;setStart(E);;;public void setStart(E s) {
             start = s;
         }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;DoubleRange();;;public DoubleRange() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;DoubleRange(Double,Double);;;public DoubleRange(Double s, Double e) { super(s, e); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getAnnotation();;;public String getAnnotation();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getValue();;;public E getValue();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;AnnotatedValueSimple();;;protected AnnotatedValueSimple() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;AnnotatedValueSimple(E);;;public AnnotatedValueSimple(E v) { value = v; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getAnnotation();;;@Override
        public String getAnnotation() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getValue();;;@Override
        public E getValue() { return value; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;CbFailing(E);;;public CbFailing(E item) {
            this.item = item;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getItem();;;public E getItem() {
            return item;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;getId();;;public ID getId() {
            return item.getValue();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;testLowerBound();;;public void testLowerBound() throws Exception
    {
        IntBeanWrapper<?> result = MAPPER.readValue("{\"wrapped\":{\"x\":3}}",
                IntBeanWrapper.class);
        assertNotNull(result);
        assertEquals(IntBean.class, result.wrapped.getClass());
        assertEquals(3, result.wrapped.x);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;testBounded();;;public void testBounded() throws Exception
    {
        BoundedWrapper<IntBean> result = MAPPER.readValue
            ("{\"values\":[ {\"x\":3} ] } ", new TypeReference<BoundedWrapper<IntBean>>() {});
        List<?> list = result.values;
        assertEquals(1, list.size());
        Object ob = list.get(0);
        assertEquals(IntBean.class, ob.getClass());
        assertEquals(3, result.values.get(0).x);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;testGenericsComplex();;;public void testGenericsComplex() throws Exception
    {
        DoubleRange in = new DoubleRange(-0.5, 0.5);
        String json = MAPPER.writeValueAsString(in);
        DoubleRange out = MAPPER.readValue(json, DoubleRange.class);
        assertNotNull(out);
        assertEquals(-0.5, out.start);
        assertEquals(0.5, out.end);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;testIssue778();;;public void testIssue778() throws Exception
    {
        String json = "{\"rows\":[{\"d\":{}}]}";

        final TypeReference<?> typeRef = new TypeReference<ResultSetWithDoc<MyDoc>>() {};

        // First, verify type introspection:

        JavaType type = MAPPER.getTypeFactory().constructType(typeRef);
        JavaType resultSetType = type.findSuperType(ResultSet.class);
        assertNotNull(resultSetType);
        assertEquals(1, resultSetType.containedTypeCount());

        JavaType rowType = resultSetType.containedType(0);
        assertNotNull(rowType);
        assertEquals(RowWithDoc.class, rowType.getRawClass());
        
        assertEquals(1, rowType.containedTypeCount());
        JavaType docType = rowType.containedType(0);
        assertEquals(MyDoc.class, docType.getRawClass());

        // type passed is correct, but somehow it gets mangled when passed...
        ResultSetWithDoc<MyDoc> rs = MAPPER.readValue(json, type);
        Document d = rs.rows.iterator().next().d;
    
        assertEquals(MyDoc.class, d.getClass()); //expected MyDoc but was Document
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/type/TestGenericsBounded;test();;;public void test() throws Exception
    {
        AnnotatedValueSimple<Integer> item = new AnnotatedValueSimple<Integer>(5);
        CbFailing<AnnotatedValueSimple<Integer>, Integer> codebook = new CbFailing<AnnotatedValueSimple<Integer>, Integer>(item);
        String json = MAPPER.writeValueAsString(codebook);
        assertNotNull(json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;setY(int);;;public void setY(int y0) { _y = y0; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;getY();;;public int getY() { return _y; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;testSimplePOJOType();;;@SuppressWarnings("deprecation")
    public void testSimplePOJOType() throws Exception
    {
        JavaType elem = SimpleType.construct(Point.class);

        Point p = MAPPER.readValue(aposToQuotes("{'x':1,'y':2}"), elem);
        assertNotNull(p);
        assertEquals(1, p.x);
        assertEquals(2, p.getY());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;testPOJOSubType();;;@SuppressWarnings("deprecation")
    public void testPOJOSubType() throws Exception
    {
        JavaType elem = SimpleType.construct(Point3D.class);

        Point3D p = MAPPER.readValue(aposToQuotes("{'x':1,'z':3,'y':2}"), elem);
        assertNotNull(p);
        assertEquals(1, p.x);
        assertEquals(2, p.getY());
        assertEquals(3, p.z);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;testExplicitCollectionType();;;@SuppressWarnings("deprecation")
    public void testExplicitCollectionType() throws Exception
    {
        JavaType elem = SimpleType.construct(Point.class);
        JavaType t = CollectionType.construct(List.class, elem);

        final String json = aposToQuotes("[ {'x':1,'y':2}, {'x':3,'y':6 }]");        

        List<Point> l = MAPPER.readValue(json, t);
        assertNotNull(l);
        assertEquals(2, l.size());
        Object ob = l.get(0);
        assertEquals(Point.class, ob.getClass());
        Point p = (Point) ob;
        assertEquals(1, p.x);
        assertEquals(2, p.getY());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;testExplicitMapType();;;@SuppressWarnings("deprecation")
    public void testExplicitMapType() throws Exception
    {
        JavaType key = SimpleType.construct(String.class);
        JavaType elem = SimpleType.construct(Point.class);
        JavaType t = MapType.construct(Map.class, key, elem);

        final String json = aposToQuotes("{'x':{'x':3,'y':5}}");        

        Map<String,Point> m = MAPPER.readValue(json, t);
        assertNotNull(m);
        assertEquals(1, m.size());
        Object ob = m.values().iterator().next();
        assertEquals(Point.class, ob.getClass());
        Point p = (Point) ob;
        assertEquals(3, p.x);
        assertEquals(5, p.getY());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test;testDeprecatedTypeResolution();;;@SuppressWarnings("deprecation")
    public void testDeprecatedTypeResolution() throws Exception
    {
        TypeFactory tf = MAPPER.getTypeFactory();

        // first, with real (if irrelevant) context
        JavaType t = tf.constructType(Point.class, getClass());
        assertEquals(Point.class, t.getRawClass());

        // and then missing context
        JavaType t2 = tf.constructType(Point.class, (Class<?>) null);
        assertEquals(Point.class, t2.getRawClass());

        JavaType ctxt = tf.constructType(getClass());
        JavaType t3 = tf.constructType(Point.class, ctxt);
        assertEquals(Point.class, t3.getRawClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ext/TestJdk7Types;testPathRoundtrip();;;public void testPathRoundtrip() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
    
        // Start with serialization, actually
        Path input = Paths.get("tmp", "foo.txt");

        String json = mapper.writeValueAsString(input);
        assertNotNull(json);
        
        Path p = mapper.readValue(json, Path.class);
        assertNotNull(p);
        
        assertEquals(input.toUri(), p.toUri());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ext/TestJdk16Types;test16Types();;;public void test16Types() throws Exception
    {
        final ObjectMapper mapper = new ObjectMapper();
        Deque<?> dq = mapper.readValue("[1]", Deque.class);
        assertNotNull(dq);
        assertEquals(1, dq.size());
        assertTrue(dq instanceof Deque<?>);

        NavigableSet<?> ns = mapper.readValue("[ true ]", NavigableSet.class);
        assertEquals(1, ns.size());
        assertTrue(ns instanceof NavigableSet<?>);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers;testMapLikeTypeConstruction();;;public void testMapLikeTypeConstruction() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));

        JavaType type = mapper.constructType(MyMapLikeType.class);
        assertTrue(type.isMapLikeType());
        // also, must have resolved type info
        JavaType param = ((MapLikeType) type).getKeyType();
        assertNotNull(param);
        assertSame(String.class, param.getRawClass());
        param = ((MapLikeType) type).getContentType();
        assertNotNull(param);
        assertSame(Integer.class, param.getRawClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/module/TestTypeModifiers;testCollectionLikeTypeConstruction();;;public void testCollectionLikeTypeConstruction() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setTypeFactory(mapper.getTypeFactory().withModifier(new MyTypeModifier()));

        JavaType type = mapper.constructType(MyCollectionLikeType.class);
        assertTrue(type.isCollectionLikeType());
        JavaType param = ((CollectionLikeType) type).getContentType();
        assertNotNull(param);
        assertSame(Integer.class, param.getRawClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer;convert(Value);;;@Override
        public List<String> convert(Value value) {
            return Arrays.asList("Hello world!");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer;testConverterForList357();;;public void testConverterForList357() throws Exception {
        String json = objectWriter().writeValueAsString(new ListWrapper());
        assertEquals("{\"list\":[[\"Hello world!\"]]}", json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleStringArrayRead();;;public void testSingleStringArrayRead() throws Exception {
        String json = aposToQuotes(
                "{ 'values': 'first' }");
        StringArrayWrapper result = MAPPER.readValue(json, StringArrayWrapper.class);
        assertNotNull(result.values);
        assertEquals(1, result.values.length);
        assertEquals("first", result.values[0]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleIntArrayRead();;;public void testSingleIntArrayRead() throws Exception {
        String json = aposToQuotes(
                "{ 'values': 123 }");
        IntArrayWrapper result = MAPPER.readValue(json, IntArrayWrapper.class);
        assertNotNull(result.values);
        assertEquals(1, result.values.length);
        assertEquals(123, result.values[0]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleLongArrayRead();;;public void testSingleLongArrayRead() throws Exception {
        String json = aposToQuotes(
                "{ 'values': -205 }");
        LongArrayWrapper result = MAPPER.readValue(json, LongArrayWrapper.class);
        assertNotNull(result.values);
        assertEquals(1, result.values.length);
        assertEquals(-205L, result.values[0]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleElementArrayRead();;;public void testSingleElementArrayRead() throws Exception {
        String json = aposToQuotes(
                "{ 'roles': { 'Name': 'User', 'ID': '333' } }");
        RolesInArray response = MAPPER.readValue(json, RolesInArray.class);
        assertNotNull(response.roles);
        assertEquals(1, response.roles.length);
        assertEquals("333", response.roles[0].ID);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleStringListRead();;;public void testSingleStringListRead() throws Exception {
        String json = aposToQuotes(
                "{ 'values': 'first' }");
        StringListWrapper result = MAPPER.readValue(json, StringListWrapper.class);
        assertNotNull(result.values);
        assertEquals(1, result.values.size());
        assertEquals("first", result.values.get(0));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleElementListRead();;;public void testSingleElementListRead() throws Exception {
        String json = aposToQuotes(
                "{ 'roles': { 'Name': 'User', 'ID': '333' } }");
        RolesInList response = MAPPER.readValue(json, RolesInList.class);
        assertNotNull(response.roles);
        assertEquals(1, response.roles.size());
        assertEquals("333", response.roles.get(0).ID);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/struct/FormatFeaturesTest;testSingleEnumSetRead();;;public void testSingleEnumSetRead() throws Exception {
        String json = aposToQuotes("{ 'values': 'B' }");
        EnumSetWrapper result = MAPPER.readValue(json, EnumSetWrapper.class);
        assertNotNull(result.values);
        assertEquals(1, result.values.size());
        assertEquals(ABC.B, result.values.iterator().next());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/creators/DelegatingExternalProperty1003Test;HeroBattle(Hero);;;private HeroBattle(Hero hero) {
            if (hero == null) throw new Error();
            this.hero = hero;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/creators/DelegatingExternalProperty1003Test;getHero();;;@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "heroType")
        public Hero getHero() {
            return hero;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/creators/DelegatingExternalProperty1003Test;fromJson(Delegate);;;@JsonCreator
        static HeroBattle fromJson(Delegate json) {
            return new HeroBattle(json.hero);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/creators/DelegatingExternalProperty1003Test;getName();;;public String getName() {
            return name;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/creators/DelegatingExternalProperty1003Test;testExtrnalPropertyDelegatingCreator();;;public void testExtrnalPropertyDelegatingCreator() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();

        final String json = mapper.writeValueAsString(new HeroBattle(new Superman()));

        final HeroBattle battle = mapper.readValue(json, HeroBattle.class);

        assertTrue(battle.getHero() instanceof Superman);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;TestCustomResolverBase(Class<?>,Class<?>);;;public TestCustomResolverBase(Class<?> baseType, Class<?> implType) {
            superType = baseType;
            subType = implType;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;getMechanism();;;@Override public Id getMechanism() { return Id.CUSTOM; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;idFromValue(Object);;;@Override public String idFromValue(Object value) {
            if (superType.isAssignableFrom(value.getClass())) {
                return "*";
            }
            return "unknown";
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;idFromValueAndType(Object,Class<?>);;;@Override
        public String idFromValueAndType(Object value, Class<?> type) {
            return idFromValue(value);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;init(JavaType);;;@Override
        public void init(JavaType baseType) { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;typeFromId(DatabindContext,String);;;@Override
        public JavaType typeFromId(DatabindContext context, String id)
        {
            if ("*".equals(id)) {
                return TypeFactory.defaultInstance().constructType(subType);
            }
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver;idFromBaseType();;;@Override
        public String idFromBaseType() {
            return "xxx";
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestScalars;ScalarList();;;public ScalarList() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestScalars;add(Object);;;public ScalarList add(Object v) {
            values.add(v);
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestScalars;testScalarsWithTyping();;;        ObjectMapper m = MAPPER;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/jsontype/TestScalars;testHeterogenousStringScalars();;;public void testHeterogenousStringScalars() throws Exception
    {
        final UUID NULL_UUID = UUID.fromString("00000000-0000-0000-0000-000000000000");
        ScalarList input = new ScalarList()
                .add("Test")
                .add(java.lang.Object.class)
                .add(NULL_UUID)
                ;
        String json = MAPPER.writeValueAsString(input);

        ScalarList result = MAPPER.readValue(json, ScalarList.class);
        assertNotNull(result.values);
        assertEquals(3, result.values.size());
        assertEquals("Test", result.values.get(0));
        assertEquals(Object.class, result.values.get(1));
        assertEquals(NULL_UUID, result.values.get(2));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/util/ISO8601UtilsTest;testParseRfc3339Examples();;;public void testParseRfc3339Examples() throws java.text.ParseException {
        // Two digit milliseconds.
        Date d = ISO8601Utils.parse("1985-04-12T23:20:50.52Z", new ParsePosition(0));
        assertEquals(newDate(1985, 4, 12, 23, 20, 50, 520, 0), d);

        d = ISO8601Utils.parse("1996-12-19T16:39:57-08:00", new ParsePosition(0));
        assertEquals(newDate(1996, 12, 19, 16, 39, 57, 0, -8 * 60), d);

        // Truncated leap second.
        d = ISO8601Utils.parse("1990-12-31T23:59:60Z", new ParsePosition(0));
        assertEquals(newDate(1990, 12, 31, 23, 59, 59, 0, 0), d);

        // Truncated leap second.
        d = ISO8601Utils.parse("1990-12-31T15:59:60-08:00", new ParsePosition(0));
        assertEquals(newDate(1990, 12, 31, 15, 59, 59, 0, -8 * 60), d);

        // Two digit milliseconds.
        d = ISO8601Utils.parse("1937-01-01T12:00:27.87+00:20", new ParsePosition(0));
        assertEquals(newDate(1937, 1, 1, 12, 0, 27, 870, 20), d);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/util/ISO8601UtilsTest;testFractionalSeconds();;;public void testFractionalSeconds() throws java.text.ParseException {
        Date d = ISO8601Utils.parse("1970-01-01T00:00:00.9Z", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 900, 0), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.09Z", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 90, 0), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.009Z", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 9, 0), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.0009Z", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 0, 0), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.2147483647Z", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 214, 0), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.2147483648Z", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 214, 0), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.9+02:00", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 900, 2 * 60), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.09+02:00", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 90, 2 * 60), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.009+02:00", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 9, 2 * 60), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.0009+02:00", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 0, 2 * 60), d);

        d = ISO8601Utils.parse("1970-01-01T00:00:00.2147483648+02:00", new ParsePosition(0));
        assertEquals(newDate(1970, 1, 1, 0, 0, 0, 214, 2 * 60), d);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/util/ISO8601UtilsTest;testDecimalWithoutDecimalPointButNoFractionalSeconds();;;public void testDecimalWithoutDecimalPointButNoFractionalSeconds() throws java.text.ParseException {
        try {
            ISO8601Utils.parse("1970-01-01T00:00:00.Z", new ParsePosition(0));
            fail();
        } catch (ParseException expected) {
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/util/ISO8601UtilsTest;newDate(int,int,int,int,int,int,int,int);;;private Date newDate(int year, int month, int day, int hour,
                         int minute, int second, int millis, int timezoneOffsetMinutes) {
        Calendar calendar = new GregorianCalendar(TimeZone.getTimeZone("GMT"));
        calendar.set(year, month - 1, day, hour, minute, second);
        calendar.set(Calendar.MILLISECOND, millis);
        return new Date(calendar.getTimeInMillis() - TimeUnit.MINUTES.toMillis(timezoneOffsetMinutes));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;serialize(Object,JsonGenerator,SerializerProvider);;;@Override
        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider)
            throws IOException
        {
            gen.writeString("foobar");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;MyNullProvider();;;public MyNullProvider() { super(); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;MyNullProvider(MyNullProvider,SerializationConfig,SerializerFactory);;;public MyNullProvider(MyNullProvider base, SerializationConfig config, SerializerFactory jsf) {
            super(base, config, jsf);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;copy();;;@Override
        public DefaultSerializerProvider copy() {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;createInstance(SerializationConfig,SerializerFactory);;;@Override
        public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {
            return new MyNullProvider(this, config, jsf);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;findNullValueSerializer(BeanProperty);;;@Override
        public JsonSerializer<Object> findNullValueSerializer(BeanProperty property)
            throws JsonMappingException
        {
            if ("name".equals(property.getName())) {
                return new NullSerializer();
            }
            return super.findNullValueSerializer(property);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;testSimple();;;public void testSimple() throws Exception
    {
        assertEquals("null", MAPPER.writeValueAsString(null));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;testOverriddenDefaultNulls();;;public void testOverriddenDefaultNulls() throws Exception
    {
        DefaultSerializerProvider sp = new DefaultSerializerProvider.Impl();
        sp.setNullValueSerializer(new NullSerializer());
        ObjectMapper m = new ObjectMapper();
        m.setSerializerProvider(sp);
        assertEquals("\"foobar\"", m.writeValueAsString(null));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;testCustomNulls();;;public void testCustomNulls() throws Exception
    {
        ObjectMapper m = new ObjectMapper();
        m.setSerializerProvider(new MyNullProvider());
        assertEquals("{\"name\":\"foobar\"}", m.writeValueAsString(new Bean1()));
        assertEquals("{\"type\":null}", m.writeValueAsString(new Bean2()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;testCustomNullForTrees();;;public void testCustomNullForTrees() throws Exception
    {
        ObjectNode root = MAPPER.createObjectNode();
        root.putNull("a");

        // by default, null is... well, null
        assertEquals("{\"a\":null}", MAPPER.writeValueAsString(root));

        // but then we can customize it:
        DefaultSerializerProvider prov = new MyNullProvider();
        prov.setNullValueSerializer(new NullSerializer());
        ObjectMapper m = new ObjectMapper();
        m.setSerializerProvider(prov);
        assertEquals("{\"a\":\"foobar\"}", m.writeValueAsString(root));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/NullSerializationTest;testNullSerializerForProperty();;;public void testNullSerializerForProperty() throws Exception
    {
        assertEquals("{\"a\":\"foobar\"}", MAPPER.writeValueAsString(new BeanWithNullProps()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/MapInclusionTest;add(String,String);;;public NoEmptiesMapContainer add(String key, String value) {
            stuff.put(key, value);
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/MapInclusionTest;testNonNullValueMapViaProp();;;public void testNonNullValueMapViaProp() throws IOException
    {
        String json = MAPPER.writeValueAsString(new NoEmptiesMapContainer()
            .add("a", null)
            .add("b", ""));
        assertEquals(aposToQuotes("{}"), json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getA();;;public String getA() { return "a"; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getB();;;public String getB() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getA();;;@JsonInclude(JsonInclude.Include.NON_NULL)
        public String getA() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getB();;;public String getB() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;NonDefaultBean();;;NonDefaultBean() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getA();;;public String getA() { return _a; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getB();;;public String getB() { return _b; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;NonDefaultBeanXYZ(int,int,int);;;NonDefaultBeanXYZ(int x, int y, int z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;MixedBean();;;MixedBean() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getA();;;public String getA() { return _a; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getB();;;@JsonInclude(JsonInclude.Include.NON_NULL)
        public String getB() { return _b; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;DefaultIntBean(int,Integer);;;public DefaultIntBean(int i1, Integer i2) {
            this.i1 = i1;
            this.i2 = i2;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;NonEmptyString(String);;;public NonEmptyString(String v) { value = v; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;NonEmptyInt(int);;;public NonEmptyInt(int v) { value = v; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;NonEmptyDouble(double);;;public NonEmptyDouble(double v) { value = v; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testGlobal();;;public void testGlobal() throws IOException
    {
        Map<String,Object> result = writeAndMap(MAPPER, new SimpleBean());
        assertEquals(2, result.size());
        assertEquals("a", result.get("a"));
        assertNull(result.get("b"));
        assertTrue(result.containsKey("b"));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testNonNullByClass();;;public void testNonNullByClass() throws IOException
    {
        Map<String,Object> result = writeAndMap(MAPPER, new NoNullsBean());
        assertEquals(1, result.size());
        assertFalse(result.containsKey("a"));
        assertNull(result.get("a"));
        assertTrue(result.containsKey("b"));
        assertNull(result.get("b"));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testNonDefaultByClass();;;public void testNonDefaultByClass() throws IOException
    {
        NonDefaultBean bean = new NonDefaultBean();
        // need to change one of defaults
        bean._a = "notA";
        Map<String,Object> result = writeAndMap(MAPPER, bean);
        assertEquals(1, result.size());
        assertTrue(result.containsKey("a"));
        assertEquals("notA", result.get("a"));
        assertFalse(result.containsKey("b"));
        assertNull(result.get("b"));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testNonDefaultByClassNoCtor();;;public void testNonDefaultByClassNoCtor() throws IOException
    {
        NonDefaultBeanXYZ bean = new NonDefaultBeanXYZ(1, 2, 0);
        String json = MAPPER.writeValueAsString(bean);
        assertEquals(aposToQuotes("{'x':1,'y':2}"), json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testMixedMethod();;;public void testMixedMethod() throws IOException
    {
        MixedBean bean = new MixedBean();
        bean._a = "xyz";
        bean._b = null;
        Map<String,Object> result = writeAndMap(MAPPER, bean);
        assertEquals(1, result.size());
        assertEquals("xyz", result.get("a"));
        assertFalse(result.containsKey("b"));

        bean._a = "a";
        bean._b = "b";
        result = writeAndMap(MAPPER, bean);
        assertEquals(1, result.size());
        assertEquals("b", result.get("b"));
        assertFalse(result.containsKey("a"));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testDefaultForEmptyList();;;public void testDefaultForEmptyList() throws IOException
    {
        assertEquals("{}", MAPPER.writeValueAsString(new ListBean()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testNonEmptyDefaultArray();;;public void testNonEmptyDefaultArray() throws IOException
    {
        assertEquals("{}", MAPPER.writeValueAsString(new ArrayBean()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testDefaultForIntegers();;;public void testDefaultForIntegers() throws IOException
    {
        assertEquals("{}", MAPPER.writeValueAsString(new DefaultIntBean(0, Integer.valueOf(0))));
        assertEquals("{\"i2\":1}", MAPPER.writeValueAsString(new DefaultIntBean(0, Integer.valueOf(1))));
        assertEquals("{\"i1\":3}", MAPPER.writeValueAsString(new DefaultIntBean(3, Integer.valueOf(0))));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;testEmptyInclusionScalars();;;public void testEmptyInclusionScalars() throws IOException
    {
        ObjectMapper defMapper = MAPPER;
        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);

        // First, Strings
        StringWrapper str = new StringWrapper("");
        assertEquals("{\"str\":\"\"}", defMapper.writeValueAsString(str));
        assertEquals("{}", inclMapper.writeValueAsString(str));
        assertEquals("{}", inclMapper.writeValueAsString(new StringWrapper()));

        assertEquals("{\"value\":\"x\"}", defMapper.writeValueAsString(new NonEmptyString("x")));
        assertEquals("{}", defMapper.writeValueAsString(new NonEmptyString("")));

        // Then numbers
        // 11-Nov-2015, tatu: As of Jackson 2.7, scalars should NOT be considered empty,
        //   except for wrappers if they are `null`
        assertEquals("{\"value\":12}", defMapper.writeValueAsString(new NonEmptyInt(12)));
        assertEquals("{\"value\":0}", defMapper.writeValueAsString(new NonEmptyInt(0)));

        assertEquals("{\"value\":1.25}", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));
        assertEquals("{\"value\":0.0}", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));

        
        IntWrapper zero = new IntWrapper(0);
        assertEquals("{\"i\":0}", defMapper.writeValueAsString(zero));
        assertEquals("{\"i\":0}", inclMapper.writeValueAsString(zero));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;Impl();;;public Impl() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;Impl(int);;;public Impl(int v) { value = v; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;RefWrapper();;;public RefWrapper() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;RefWrapper(Base);;;public RefWrapper(Base b) {
            w = new AtomicReference<Base>(b);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;RefWrapper(int);;;public RefWrapper(int i) {
            w = new AtomicReference<Base>(new Impl(i));
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;SimpleWrapper();;;public SimpleWrapper() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;SimpleWrapper(Object);;;public SimpleWrapper(Object o) { value = new AtomicReference<Object>(o); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;getChild();;;@JsonUnwrapped
        public Child getChild() {
             return child;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;WrappedString(String);;;public WrappedString(String s) { value = s; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testAtomicBoolean();;;public void testAtomicBoolean() throws Exception
    {
        AtomicBoolean b = MAPPER.readValue("true", AtomicBoolean.class);
        assertTrue(b.get());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testAtomicInt();;;public void testAtomicInt() throws Exception
    {
        AtomicInteger value = MAPPER.readValue("13", AtomicInteger.class);
        assertEquals(13, value.get());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testAtomicLong();;;public void testAtomicLong() throws Exception
    {
        AtomicLong value = MAPPER.readValue("12345678901", AtomicLong.class);
        assertEquals(12345678901L, value.get());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testAtomicReference();;;public void testAtomicReference() throws Exception
    {
        AtomicReference<long[]> value = MAPPER.readValue("[1,2]",
                new com.fasterxml.jackson.core.type.TypeReference<AtomicReference<long[]>>() { });
        Object ob = value.get();
        assertNotNull(ob);
        assertEquals(long[].class, ob.getClass());
        long[] longs = (long[]) ob;
        assertNotNull(longs);
        assertEquals(2, longs.length);
        assertEquals(1, longs[0]);
        assertEquals(2, longs[1]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testAbsentExclusion();;;public void testAbsentExclusion() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);
        assertEquals(aposToQuotes("{'value':true}"),
                mapper.writeValueAsString(new SimpleWrapper(Boolean.TRUE)));
        assertEquals(aposToQuotes("{}"),
                mapper.writeValueAsString(new SimpleWrapper(null)));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testPolymorphicAtomicReference();;;public void testPolymorphicAtomicReference() throws Exception
    {
        RefWrapper input = new RefWrapper(13);
        String json = MAPPER.writeValueAsString(input);
        
        RefWrapper result = MAPPER.readValue(json, RefWrapper.class);
        assertNotNull(result.w);
        Object ob = result.w.get();
        assertEquals(Impl.class, ob.getClass());
        assertEquals(13, ((Impl) ob).value);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testFilteringOfAtomicReference();;;public void testFilteringOfAtomicReference() throws Exception
    {
        SimpleWrapper input = new SimpleWrapper(null);
        ObjectMapper mapper = MAPPER;

        // by default, include as null
        assertEquals("{\"value\":null}", mapper.writeValueAsString(input));

        // ditto with "no nulls"
        mapper = new ObjectMapper().setSerializationInclusion(JsonInclude
                .Include.NON_NULL);
        assertEquals("{\"value\":null}", mapper.writeValueAsString(input));

        // but not with "non empty"
        mapper = new ObjectMapper().setSerializationInclusion(JsonInclude
                .Include.NON_EMPTY);
        assertEquals("{}", mapper.writeValueAsString(input));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testTypeRefinement();;;public void testTypeRefinement() throws Exception
    {
        RefiningWrapper input = new RefiningWrapper();
        BigDecimal bd = new BigDecimal("0.25");
        input.value = new AtomicReference<Serializable>(bd);
        String json = MAPPER.writeValueAsString(input);

        // so far so good. But does it come back as expected?
        RefiningWrapper result = MAPPER.readValue(json, RefiningWrapper.class);
        assertNotNull(result.value);
        Object ob = result.value.get();
        assertEquals(BigDecimal.class, ob.getClass());
        assertEquals(bd, ob);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testDeserializeWithContentAs();;;public void testDeserializeWithContentAs() throws Exception
    {
        AtomicRefReadWrapper result = MAPPER.readValue(aposToQuotes("{'value':'abc'}"),
                AtomicRefReadWrapper.class);
         Object v = result.value.get();
         assertNotNull(v);
         assertEquals(WrappedString.class, v.getClass());
         assertEquals("abc", ((WrappedString)v).value);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes;testWithUnwrapping();;;public void testWithUnwrapping() throws Exception
    {
         String jsonExp = aposToQuotes("{'XX.name':'Bob'}");
         String jsonAct = MAPPER.writeValueAsString(new UnwrappingRefParent());
         assertEquals(jsonExp, jsonAct);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/ExceptionFromCustomEnumKeyDeserializerTest;testLostMessage();;;@Test
    public void testLostMessage() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new EnumModule());
        try {
            objectMapper.readValue("{\"TWO\": \"dumpling\"}", new TypeReference<Map<AnEnum, String>>() {});
        } catch (IOException e) {
            assertTrue(e.getMessage().contains("Undefined AnEnum"));
            return;
        }
        fail("No exception");
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectOrArrayDeserialization;ArrayOrObject(List<SomeObject>);;;@JsonCreator
        public ArrayOrObject(List<SomeObject> objects) {
            this.objects = objects;
            this.object = null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectOrArrayDeserialization;ArrayOrObject(SomeObject);;;@JsonCreator
        public ArrayOrObject(SomeObject object) {
            this.objects = null;
            this.object = object;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectOrArrayDeserialization;testObjectCase();;;public void testObjectCase() throws Exception {
        ArrayOrObject arrayOrObject = new ObjectMapper().readValue("{}", ArrayOrObject.class);
        assertNull("expected objects field to be null", arrayOrObject.objects);
        assertNotNull("expected object field not to be null", arrayOrObject.object);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectOrArrayDeserialization;testEmptyArrayCase();;;public void testEmptyArrayCase() throws Exception {
        ArrayOrObject arrayOrObject = new ObjectMapper().readValue("[]", ArrayOrObject.class);
        assertNotNull("expected objects field not to be null", arrayOrObject.objects);
        assertTrue("expected objects field to be an empty list", arrayOrObject.objects.isEmpty());
        assertNull("expected object field to be null", arrayOrObject.object);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/deser/TestObjectOrArrayDeserialization;testNotEmptyArrayCase();;;public void testNotEmptyArrayCase() throws Exception {
        ArrayOrObject arrayOrObject = new ObjectMapper().readValue("[{}, {}]", ArrayOrObject.class);
        assertNotNull("expected objects field not to be null", arrayOrObject.objects);
        assertEquals("expected objects field to have size 2", 2, arrayOrObject.objects.size());
        assertNull("expected object field to be null", arrayOrObject.object);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode;testCustomComparators();;;        ObjectNode nestedObject1 = MAPPER.createObjectNode();
        nestedObject1.put("value", 6);
        ArrayNode nestedArray1 = MAPPER.createArrayNode();
        nestedArray1.add(7);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode;testCustomComparators();;;        root1.set("nested_object", nestedObject1);
        root1.set("nested_array", nestedArray1);

        ObjectNode nestedObject2 = MAPPER.createObjectNode();
        nestedObject2.put("value", 6.9);
        ArrayNode nestedArray2 = MAPPER.createArrayNode();
        nestedArray2.add(7.0);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode;testCustomComparators();;;        root2.set("nested_object", nestedObject2);
        root2.set("nested_array", nestedArray2);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode;testCustomComparators();;;                if (o1 instanceof ContainerNode || o2 instanceof ContainerNode) {
                    fail("container nodes should be traversed, comparator should not be invoked");
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;DateAsDefaultStringBean(long);;;public DateAsDefaultStringBean(long l) { date = new java.util.Date(l); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;testDateWithJsonFormat();;;
        // and with default (ISO8601) format (databind#1109)
        json = mapper.writeValueAsString(new DateAsDefaultStringBean(0L));
        assertEquals("{\"date\":\"1970-01-01T00:00:00.000+0000\"}", json);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;IterableWrapper(int[]);;;public IterableWrapper(int[] values) {
            for (int i : values) {
                _ints.add(Integer.valueOf(i));
            }
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;iterator();;;@Override
        public Iterator<Integer> iterator() {
            return _ints.iterator();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;getValues();;;public Iterable<String> getValues() { return values; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;iterator();;;@Override
        public Iterator<Integer> iterator() {
            return new IntIterator(1, 3);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;IntIterator(int,int);;;public IntIterator(int first, int last) {
            i = first;
            this.last = last;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;hasNext();;;@Override
        public boolean hasNext() {
            return i <= last;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;next();;;@Override
        public Integer next() {
            return i++;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;remove();;;@Override
        public void remove() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;getX();;;public int getX() { return 13; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;serialize(A,JsonGenerator,SerializerProvider);;;@Override
        public void serialize(A a, JsonGenerator jsonGenerator, SerializerProvider provider) throws IOException {
            jsonGenerator.writeStartArray();
            jsonGenerator.writeString("Hello world.");
            jsonGenerator.writeEndArray();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;testIterator();;;public void testIterator() throws IOException
    {
        StringWriter sw = new StringWriter();
        ArrayList<Integer> l = new ArrayList<Integer>();
        l.add(1);
        l.add(-9);
        l.add(0);
        MAPPER.writeValue(sw, l.iterator());
        assertEquals("[1,-9,0]", sw.toString().trim());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;testIterable();;;public void testIterable() throws IOException
    {
        StringWriter sw = new StringWriter();
        MAPPER.writeValue(sw, new IterableWrapper(new int[] { 1, 2, 3 }));
        assertEquals("[1,2,3]", sw.toString().trim());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;testWithIterable();;;public void testWithIterable() throws IOException
    {
        // 689:
        assertEquals("{\"values\":[\"value\"]}",
                MAPPER.writeValueAsString(new BeanWithIterable()));
        // 876:
        assertEquals("[1,2,3]",
                MAPPER.writeValueAsString(new IntIterable()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestIterable;testIterable358();;;public void testIterable358() throws Exception {
        String json = MAPPER.writeValueAsString(new B());
        assertEquals("{\"list\":[[\"Hello world.\"]]}", json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization;testCollections();public void testCollections()
        throws IOException;;public void testCollections() throws IOException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization;testBigCollection();    public void testBigCollection()
        throws IOException;;    public void testBigCollection() throws IOException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization;testEnumMap();public void testEnumMap()
        throws IOException;;public void testEnumMap() throws IOException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization;testEmptyBeanCollection();    public void testEmptyBeanCollection()
        throws IOException;;    public void testEmptyBeanCollection() throws IOException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization;testEmptyBeanEnumMap();    public void testEmptyBeanEnumMap()
        throws IOException;;    public void testEmptyBeanEnumMap() throws IOException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/ser/TestCollectionSerialization;testNullBeanEnumMap();public void testNullBeanEnumMap()
        throws IOException;;public void testNullBeanEnumMap() throws IOException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ReferentialWithObjectIdTest;next(Employee);;;public Employee next(Employee n) {
            next = new AtomicReference<Employee>(n);
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ReferentialWithObjectIdTest;testAtomicWithObjectId();;;public void testAtomicWithObjectId() throws Exception
    {
        Employee first = new Employee();
        first.id = 1;
        first.name = "Alice";

        Employee second = new Employee();
        second.id = 2;
        second.name = "Bob";

        first.next(second);
        second.next(first);

        EmployeeList input = new EmployeeList();
        input.first = new AtomicReference<Employee>(first);

        String json = MAPPER.writeValueAsString(input);

        // and back
 
        EmployeeList result = MAPPER.readValue(json, EmployeeList.class);
        Employee firstB = result.first.get();
        assertNotNull(firstB);
        assertEquals("Alice", firstB.name);
        Employee secondB = firstB.next.get();
        assertNotNull(secondB);
        assertEquals("Bob", secondB.name);
        assertNotNull(secondB.next.get());
        assertSame(firstB, secondB.next.get());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getOutTr();;;public java.util.ArrayList<Tr> getOutTr() {
            return this.outTr;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setOutTr(java.util.ArrayList<Tr>);;;public void setOutTr(java.util.ArrayList<Tr> outTr) {
            this.outTr = outTr;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getDec();;;public java.util.ArrayList<Dec> getDec() {
            return this.dec;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setDec(java.util.ArrayList<Dec>);;;public void setDec(java.util.ArrayList<Dec> dec) {
            this.dec = dec;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;AbstractEntity();;;protected AbstractEntity() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getOidString();;;public String getOidString() {
            return oidString;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setOidString(String);;;public void setOidString(String oidString) {
            this.oidString = oidString;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getAct();;;public java.util.ArrayList<? extends AbstractAct> getAct() {
            return this.act;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setAct(java.util.ArrayList<?extendsAbstractAct>);;;public void setAct(java.util.ArrayList<? extends AbstractAct> act) {
            this.act = act;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;CTC();;;public CTC() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getVar();;;public java.util.ArrayList<CTV> getVar() {
            if (var == null) {
                var = new ArrayList<CTV>();
            }
            return new ArrayList<CTV>(var);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setVar(java.util.ArrayList<CTV>);;;public void setVar(java.util.ArrayList<CTV> var) {
            this.var = var;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getCh();;;public Ch getCh() {
            return this.ch;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setCh(Ch);;;public void setCh(Ch ch) {
            this.ch = ch;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getLocV();;;public java.util.ArrayList<? extends AbstractData> getLocV() {
            return this.locV;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setLocV(java.util.ArrayList<?extendsAbstractData>);;;public void setLocV(java.util.ArrayList<? extends AbstractData> locV) {
            this.locV = locV;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getTimer();;;public AbstractData getTimer() {
            return this.timer;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setTimer(AbstractData);;;public void setTimer(AbstractData timer) {
            this.timer = timer;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;getTarget();;;public AbstractAct getTarget() {
            return this.target;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;setTarget(AbstractAct);;;public void setTarget(AbstractAct target) {
            this.target = target;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectId825BTest;testFull825();;;public void testFull825() throws Exception
    {
        final ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
        mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);

        String INPUT = aposToQuotes(
"{\n"+
"    '@class': '_PKG_CTC',\n"+
"     'var': [{\n"+
"      'ch': {\n"+
"        '@class': '_PKG_Ch',\n"+
"         'act': [{\n"+
"            '@class': '_PKG_CTD',\n"+
"            'oidString': 'oid1',\n"+
"            'dec': [{\n"+
"              '@class': '_PKG_Dec',\n"+
"                'oidString': 'oid2',\n"+
"                'outTr': [{\n"+
"                  '@class': '_PKG_Tr',\n"+
"                  'target': {\n"+
"                    '@class': '_PKG_Ti',\n"+
"                    'oidString': 'oid3',\n"+
"                    'timer': 'problemoid',\n"+
"                    'outTr': [{\n"+
"                      '@class': '_PKG_Tr',\n"+
"                      'target': {\n"+
"                        '@class': '_PKG_Ti',\n"+
"                        'oidString': 'oid4',\n"+
"                        'timer': {\n"+
"                          '@class': '_PKG_V',\n"+
"                          'oidString': 'problemoid'\n"+
"                        }\n"+
"                      }\n"+
"                    }]\n"+
"                  }\n"+
"                }]\n"+
"              }]\n"+
"         }],\n"+
"         'oidString': 'oid5'\n"+
"      },\n"+
"       '@class': '_PKG_CTV',\n"+
"       'oidString': 'oid6',\n"+
"       'locV': ['problemoid']\n"+
"    }],\n"+
"     'oidString': 'oid7'\n"+
"}\n"
                );

        // also replace package
        final String newPkg = getClass().getName() + "\\$";
        INPUT = INPUT.replaceAll("_PKG_", newPkg);
        
        CTC result = mapper.readValue(INPUT, CTC.class);
        assertNotNull(result);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithEquals;equals(Object);;;@Override
        public boolean equals(Object object) {
            if (object == this) {
                return true;
            } else if (object == null || !(object instanceof Element)) {
                return false;
            } else {
                Element element = (Element) object;
                if (element.uri.toString().equalsIgnoreCase(this.uri.toString())) {
                    return true;
                }
            }
            return false;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithEquals;hashCode();;;@Override
        public int hashCode() {
            return uri.hashCode();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdWithEquals;testEqualObjectIdsExternal();;;public void testEqualObjectIdsExternal() throws Exception
    {
        Element element = new Element();
        element.uri = URI.create("URI");
        element.name = "Element1";

        Element element2 = new Element();
        element2.uri = URI.create("URI");
        element2.name = "Element2";

        // 12-Nov-2015, tatu: array works fine regardless of Type Erasure, but if using List,
        //   must provide additional piece of type info
//        Element[] input = new Element[] { element, element2 };
        List<Element> input = Arrays.asList(element, element2);

        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID);

//        String json = mapper.writeValueAsString(input);
        String json = mapper.writerFor(new TypeReference<List<Element>>() { })
                .writeValueAsString(input);

        Element[] output = mapper.readValue(json, Element[].class);
        assertNotNull(output);
        assertEquals(2, output.length);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization;StringIdentifiable();;;public StringIdentifiable() { this(0); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization;StringIdentifiable(int);;;public StringIdentifiable(int v) {
            value = v;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization;testSerializeWithOpaqueStringId();;;public void testSerializeWithOpaqueStringId() throws Exception
    {
        StringIdentifiable ob1 = new StringIdentifiable(12);
        StringIdentifiable ob2 = new StringIdentifiable(34);
        ob1.next = ob2;
        ob2.next = ob1;

        // first just verify we get some output
        String json = MAPPER.writeValueAsString(ob1);
        assertNotNull(json);

        // then get them back
        StringIdentifiable output = MAPPER.readValue(json, StringIdentifiable.class);
        assertNotNull(output);
        assertEquals(12, output.value);
        assertNotNull(output.next);
        assertEquals(34, output.next.value);
        assertSame(output.next.next, output);

        String json2 = aposToQuotes("{'id':'foobar','value':3, 'next':{'id':'barf','value':5,'next':'foobar'}}");
        output = MAPPER.readValue(json2, StringIdentifiable.class);
        assertNotNull(output);
        assertEquals(3, output.value);
        assertNotNull(output.next);
        assertEquals(5, output.next.value);
        assertSame(output.next.next, output);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectId;testObjectAndTypeId();;;public void testObjectAndTypeId() throws Exception
    {
        final ObjectMapper mapper = new ObjectMapper();

        Bar inputRoot = new Bar();
        Foo inputChild = new Foo();
        inputRoot.next = inputChild;
        inputChild.ref = inputRoot;

        String json = mapper.writerWithDefaultPrettyPrinter()
                .writeValueAsString(inputRoot);
        
        BaseEntity resultRoot = mapper.readValue(json, BaseEntity.class);
        assertNotNull(resultRoot);
        assertTrue(resultRoot instanceof Bar);
        Bar first = (Bar) resultRoot;

        assertNotNull(first.next);
        assertTrue(first.next instanceof Foo);
        Foo second = (Foo) first.next;
        assertNotNull(second.ref);
        assertSame(first, second.ref);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/objectid/Objecid1083Test;testSimple();;;public void testSimple() throws Exception {
          final ObjectMapper mapper = new ObjectMapper();
          final String json = aposToQuotes("{'schemas': [{\n"
              + "  'name': 'FoodMart'\n"
              + "}]}\n");
          mapper.readValue(json, JsonRoot.class);
      }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector;findEnumValue(Enum<?>);        public String findEnumValue(Enum<?> value)
        {;;        public String findEnumValue(Enum<?> value) {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector;findEnumValues(Class<?>,Enum<?>[],String[]);;;@Override
        public  String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {
            // kinda sorta wrong, but for testing's sake...
            for (int i = 0, len = enumValues.length; i < len; ++i) {
                names[i] = enumValues[i].name().toLowerCase();
            }
            return names;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestJacksonAnnotationIntrospector;testJsonTypeResolver();;;        ObjectMapper mapper = new ObjectMapper();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd;FirstNameBean();;;protected FirstNameBean() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd;FirstNameBean(String);;;public FirstNameBean(String n) { firstName = n; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd;testKebabCaseStrategyStandAlone();;;public void testKebabCaseStrategyStandAlone()
    {
        assertEquals("some-value",
                PropertyNamingStrategy.KEBAB_CASE.nameForField(null, null, "someValue"));
        assertEquals("some-value",
                PropertyNamingStrategy.KEBAB_CASE.nameForField(null, null, "SomeValue"));
        assertEquals("url",
                PropertyNamingStrategy.KEBAB_CASE.nameForField(null, null, "URL"));
        assertEquals("url-stuff",
                PropertyNamingStrategy.KEBAB_CASE.nameForField(null, null, "URLStuff"));
        assertEquals("some-url-stuff",
                PropertyNamingStrategy.KEBAB_CASE.nameForField(null, null, "SomeURLStuff"));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd;testSimpleKebabCase();;;public void testSimpleKebabCase() throws Exception
    {
        final FirstNameBean input = new FirstNameBean("Bob");
        ObjectMapper m = new ObjectMapper()
                .setPropertyNamingStrategy(PropertyNamingStrategy.KEBAB_CASE);

        assertEquals(aposToQuotes("{'first-name':'Bob'}"), m.writeValueAsString(input));

        FirstNameBean result = m.readValue(aposToQuotes("{'first-name':'Billy'}"),
                FirstNameBean.class);
        assertEquals("Billy", result.firstName);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd;testExplicitRename();;;public void testExplicitRename() throws Exception
    {
      ObjectMapper m = new ObjectMapper();
      m.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
      m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);
      // by default, renaming will not take place on explicitly named fields
      assertEquals(aposToQuotes("{'firstName':'Peter','lastName':'Venkman','user_age':'35'}"),
          m.writeValueAsString(new ExplicitBean()));

      m = new ObjectMapper();
      m.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
      m.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);
      m.enable(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING);
      // w/ feature enabled, ALL property names should get re-written
      assertEquals(aposToQuotes("{'first_name':'Peter','last_name':'Venkman','user_age':'35'}"),
          m.writeValueAsString(new ExplicitBean()));

      // test deserialization as well
      ExplicitBean bean =
          m.readValue(aposToQuotes("{'first_name':'Egon','last_name':'Spengler','user_age':'32'}"),
              ExplicitBean.class);

      assertNotNull(bean);
      assertEquals("Egon", bean.userFirstName);
      assertEquals("Spengler", bean.userLastName);
      assertEquals("32", bean.userAge);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest;version();;;@Override
        public Version version() {
            return Version.unknownVersion();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest;findPropertyInclusion(Annotated);;;@Override
        public JsonInclude.Value findPropertyInclusion(Annotated a) {
            return JsonInclude.Value.empty()
                    .withContentInclusion(JsonInclude.Include.ALWAYS)
                    .withValueInclusion(JsonInclude.Include.NON_ABSENT);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest;version();;;@Override
        public Version version() {
            return Version.unknownVersion();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest;findPropertyInclusion(Annotated);;;@Override
        public JsonInclude.Value findPropertyInclusion(Annotated a) {
            return JsonInclude.Value.empty()
                    .withContentInclusion(JsonInclude.Include.NON_EMPTY)
                    .withValueInclusion(JsonInclude.Include.USE_DEFAULTS);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/IntrospectorPairTest;testInclusionMerging();;;public void testInclusionMerging() throws Exception
    {
        // argument is ignored by test introspectors, may be null
        JsonInclude.Value v12 = introPair12.findPropertyInclusion(null);
        JsonInclude.Value v21 = introPair21.findPropertyInclusion(null);

        assertEquals(JsonInclude.Include.ALWAYS, v12.getContentInclusion());
        assertEquals(JsonInclude.Include.NON_ABSENT, v12.getValueInclusion());

        assertEquals(JsonInclude.Include.NON_EMPTY, v21.getContentInclusion());
        assertEquals(JsonInclude.Include.NON_ABSENT, v21.getValueInclusion());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/SetterConflictTest;setValue(int);;;public void setValue(int v) { value = v; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/SetterConflictTest;setValue(Issue1033Bean);;;public void setValue(Issue1033Bean foo) {
            throw new Error("Should not get called");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/SetterConflictTest;testSetterPriority();;;public void testSetterPriority() throws Exception
    {
        Issue1033Bean bean = MAPPER.readValue(aposToQuotes("{'value':42}"),
                Issue1033Bean.class);
        assertEquals(42, bean.value);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/BeanDescriptionTest;testClassDesc();;;public void testClassDesc() throws Exception
    {
        BeanDescription beanDesc = MAPPER.getDeserializationConfig().introspect(MAPPER.constructType(DocumentedBean.class));
        assertEquals(CLASS_DESC, beanDesc.findClassDescription());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest;getValue();;;public int getValue() { return value; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest;getX();;;public int getX() { return 42; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest;getX();;;@Transient
        public int getX() { return 3; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest;getY();;;public int getY() { return 4; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest;testTransientFieldHandling();;;public void testTransientFieldHandling() throws Exception
    {
        // default handling: remove transient field but do not propagate
        assertEquals(aposToQuotes("{'x':42,'value':3}"),
                MAPPER.writeValueAsString(new ClassyTransient()));

        // but may change that
        ObjectMapper m = new ObjectMapper()
            .enable(MapperFeature.PROPAGATE_TRANSIENT_MARKER);
        assertEquals(aposToQuotes("{'x':42}"),
                m.writeValueAsString(new ClassyTransient()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/test/java/com/fasterxml/jackson/databind/introspect/TransientTest;testBeanTransient();;;public void testBeanTransient() throws Exception
    {
        assertEquals(aposToQuotes("{'y':4}"),
                MAPPER.writeValueAsString(new BeanTransient()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/MappingJsonFactory;MappingJsonFactory(JsonFactory,ObjectMapper);          setCodec(new ObjectMapper(this));;;            setCodec(new ObjectMapper(this));
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;JsonMappingException(Closeable,String);;;public JsonMappingException(Closeable processor, String msg) {
        super(msg);
        _processor = processor;
        if (processor instanceof JsonParser) {
            // 17-Aug-2015, tatu: Use of token location makes some sense from databinding,
            //   since actual parsing (current) location is typically only needed for low-level
            //   parsing exceptions.
            _location = ((JsonParser) processor).getTokenLocation();
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;JsonMappingException(Closeable,String,Throwable);;;public JsonMappingException(Closeable processor, String msg, Throwable problem) {
        super(msg, problem);
        _processor = processor;
        if (processor instanceof JsonParser) {
            _location = ((JsonParser) processor).getTokenLocation();
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;JsonMappingException(Closeable,String,JsonLocation);;;public JsonMappingException(Closeable processor, String msg, JsonLocation loc) {
        super(msg, loc);
        _processor = processor;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;from(JsonGenerator,String);;;public static JsonMappingException from(JsonGenerator g, String msg) {
        return new JsonMappingException(g, msg, (Throwable) null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;from(JsonGenerator,String,Throwable);;;public static JsonMappingException from(JsonGenerator g, String msg, Throwable problem) {
        return new JsonMappingException(g, msg, problem);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;from(DeserializationContext,String);;;public static JsonMappingException from(DeserializationContext ctxt, String msg) {
        return new JsonMappingException(ctxt.getParser(), msg);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;from(DeserializationContext,String,Throwable);;;public static JsonMappingException from(DeserializationContext ctxt, String msg, Throwable t) {
        return new JsonMappingException(ctxt.getParser(), msg, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;from(SerializerProvider,String);;;public static JsonMappingException from(SerializerProvider ctxt, String msg) {
        /* 17-Aug-2015, tatu: As per [databind#903] this is bit problematic as
         *   SerializerProvider instance does not currently hold on to generator...
         */
        JsonGenerator g = null;
        return new JsonMappingException(g, msg);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JsonMappingException;from(SerializerProvider,String,Throwable);;;public static JsonMappingException from(SerializerProvider ctxt, String msg, Throwable problem) {
        /* 17-Aug-2015, tatu: As per [databind#903] this is bit problematic as
         *   SerializerProvider instance does not currently hold on to generator...
         */
        JsonGenerator g = null;
        return new JsonMappingException(g, msg, problem);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;with(FormatFeature);;;public ObjectReader with(FormatFeature feature) {
        return _with(_config.with(feature));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;withFeatures(FormatFeature);;;public ObjectReader withFeatures(FormatFeature... features) {
        return _with(_config.withFeatures(features));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;without(FormatFeature);;;public ObjectReader without(FormatFeature feature) {
        return _with(_config.without(feature)); 
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;withoutFeatures(FormatFeature);;;public ObjectReader withoutFeatures(FormatFeature... features) {
        return _with(_config.withoutFeatures(features));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectReader;withAttributes(Map<?,?>);;;public ObjectReader withAttributes(Map<?,?> attrs) {
        return _with(_config.withAttributes(attrs));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SequenceWriter;writeAll(C);public <C extends Collection<?>> SequenceWriter writeAll(C container) throws IOException
    {;;public <C extends Collection<?>> SequenceWriter writeAll(C container) throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SequenceWriter;writeAll(Iterable<?>);;;public SequenceWriter writeAll(Iterable<?> iterable) throws IOException
    {
        for (Object value : iterable) {
            write(value);
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy;translate(String);;;@Override
        public String translate(String input)
        {
            if (input == null) return input; // garbage in, garbage out
            int length = input.length();
            StringBuilder result = new StringBuilder(length * 2);
            int resultLength = 0;
            boolean wasPrevTranslated = false;
            for (int i = 0; i < length; i++)
            {
                char c = input.charAt(i);
                if (i > 0 || c != '_') // skip first starting underscore
                {
                    if (Character.isUpperCase(c))
                    {
                        if (!wasPrevTranslated && resultLength > 0 && result.charAt(resultLength - 1) != '_')
                        {
                            result.append('_');
                            resultLength++;
                        }
                        c = Character.toLowerCase(c);
                        wasPrevTranslated = true;
                    }
                    else
                    {
                        wasPrevTranslated = false;
                    }
                    result.append(c);
                    resultLength++;
                }
            }
            return resultLength > 0 ? result.toString() : input;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy;translate(String);;;@Override
        public String translate(String input) {
            if (input == null || input.length() == 0){
                return input; // garbage in, garbage out
            }
            // Replace first lower-case letter with upper-case equivalent
            char c = input.charAt(0);
            char uc = Character.toUpperCase(c);
            if (c == uc) {
                return input;
            }
            StringBuilder sb = new StringBuilder(input);
            sb.setCharAt(0, uc);
            return sb.toString();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/PropertyNamingStrategy;translate(String);;;@Override
        public String translate(String input)
        {
            if (input == null) return input; // garbage in, garbage out
            int length = input.length();
            if (length == 0) {
                return input;
            }

            StringBuilder result = new StringBuilder(length + (length >> 1));

            int upperCount = 0;

            for (int i = 0; i < length; ++i) {
                char ch = input.charAt(i);
                char lc = Character.toLowerCase(ch);
                
                if (lc == ch) { // lower-case letter means we can get new word
                    // but need to check for multi-letter upper-case (acronym), where assumption
                    // is that the last upper-case char is start of a new word
                    if (upperCount > 1) {
                        // so insert hyphen before the last character now
                        result.insert(result.length() - 1, '-');
                    }
                    upperCount = 0;
                } else {
                    // Otherwise starts new word, unless beginning of string
                    if ((upperCount == 0) && (i > 0)) {
                        result.append('-');
                    }
                    ++upperCount;
                }
                result.append(lc);
            }
            return result.toString();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(BaseSettings,SubtypeResolver,SimpleMixInResolver,RootNameLookup);;;        _formatReadFeatures = 0;
        _formatReadFeaturesToChange = 0;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,int,int,int,int,int,int);;;private DeserializationConfig(DeserializationConfig src,
            int mapperFeatures, int deserFeatures,
            int parserFeatures, int parserFeatureMask,
            int formatFeatures, int formatFeatureMask)
    {
        super(src, mapperFeatures);
        _deserFeatures = deserFeatures;
        _nodeFactory = src._nodeFactory;
        _problemHandlers = src._problemHandlers;
        _parserFeatures = parserFeatures;
        _parserFeaturesToChange = parserFeatureMask;
        _formatReadFeatures = formatFeatures;
        _formatReadFeaturesToChange = formatFeatureMask;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,SubtypeResolver);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,BaseSettings);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,JsonNodeFactory);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,LinkedNode<DeserializationProblemHandler>);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,PropertyName);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,Class<?>);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,ContextAttributes);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,SimpleMixInResolver);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;DeserializationConfig(DeserializationConfig,SimpleMixInResolver,RootNameLookup);;;        _formatReadFeatures = src._formatReadFeatures;
        _formatReadFeaturesToChange = src._formatReadFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;with(FormatFeature);;;public DeserializationConfig with(FormatFeature feature)
    {
        int newSet = _formatReadFeatures | feature.getMask();
        int newMask = _formatReadFeaturesToChange | feature.getMask();
        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :
            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,
                    _parserFeatures, _parserFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;withFeatures(FormatFeature);;;public DeserializationConfig withFeatures(FormatFeature... features)
    {
        int newSet = _formatReadFeatures;
        int newMask = _formatReadFeaturesToChange;
        for (FormatFeature f : features) {
            int mask = f.getMask();
            newSet |= mask;
            newMask |= mask;
        }
        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :
            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,
                    _parserFeatures, _parserFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;without(FormatFeature);;;public DeserializationConfig without(FormatFeature feature)
    {
        int newSet = _formatReadFeatures & ~feature.getMask();
        int newMask = _formatReadFeaturesToChange | feature.getMask();
        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :
            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,
                    _parserFeatures, _parserFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;withoutFeatures(FormatFeature);;;public DeserializationConfig withoutFeatures(FormatFeature... features)
    {
        int newSet = _formatReadFeatures;
        int newMask = _formatReadFeaturesToChange;
        for (FormatFeature f : features) {
            int mask = f.getMask();
            newSet &= ~mask;
            newMask |= mask;
        }
        return ((_formatReadFeatures == newSet) && (_formatReadFeaturesToChange == newMask)) ? this :
            new DeserializationConfig(this,  _mapperFeatures, _deserFeatures,
                    _parserFeatures, _parserFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;getDefaultPropertyInclusion();;;@Override
    public JsonInclude.Value getDefaultPropertyInclusion() {
        return EMPTY_INCLUDE;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;getDefaultPropertyInclusion(Class<?>);;;@Override
    public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {
        return EMPTY_INCLUDE;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationConfig;getDefaultPropertyFormat(Class<?>);;;@Override
    public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {
        // !!! TODO: per-type defaults
        return EMPTY_FORMAT;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;JavaType(JavaType);;;protected JavaType(JavaType base) 
    {
        _class = base._class;
        _hash = base._hash;
        _valueHandler = base._valueHandler;
        _typeHandler = base._typeHandler;
        _asStatic = base._asStatic;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;withContentType(JavaType);;;public abstract JavaType withContentType(JavaType contentType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;public abstract JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;getBindings();;;public abstract TypeBindings getBindings();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;findSuperType(Class<?>);;;public abstract JavaType findSuperType(Class<?> erasedTarget);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;getSuperClass();;;public abstract JavaType getSuperClass();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;getInterfaces();;;public abstract List<JavaType> getInterfaces();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;findTypeParameters(Class<?>);;;public abstract JavaType[] findTypeParameters(Class<?> expType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;getContentValueHandler();;;public Object getContentValueHandler() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/JavaType;getContentTypeHandler();;;public Object getContentTypeHandler() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanDescription;findPropertyInclusion(JsonInclude.Value);;;public abstract JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanDescription;findClassDescription();;;public String findClassDescription() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializerProvider;canOverrideAccessModifiers();;;@Override
    public final boolean canOverrideAccessModifiers() {
        return _config.canOverrideAccessModifiers();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializerProvider;isEnabled(MapperFeature);;;@Override
    public final boolean isEnabled(MapperFeature feature) {
        return _config.isEnabled(feature);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializerProvider;getDefaultPropertyFormat(Class<?>);;;@Override
    public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {
        return _config.getDefaultPropertyFormat(baseType);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializerProvider;_createAndCacheUntypedSerializer(JavaType);;;            // 21-Dec-2015, tatu: Should we also cache using raw key?
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectMapper;getSerializerProviderInstance();;;public SerializerProvider getSerializerProviderInstance() {
        return _serializerProvider(_serializationConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectMapper;setPropertyInclusion(JsonInclude.Value);;;public ObjectMapper setPropertyInclusion(JsonInclude.Value incl) {
        _serializationConfig = _serializationConfig.withPropertyInclusion(incl);
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(BaseSettings,SubtypeResolver,SimpleMixInResolver,RootNameLookup);;;        _formatWriteFeatures = 0;
        _formatWriteFeaturesToChange = 0;
        _serializationInclusion = DEFAULT_INCLUSION;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,SubtypeResolver);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,int,int,int,int,int,int);;;private SerializationConfig(SerializationConfig src,
            int mapperFeatures, int serFeatures,
            int generatorFeatures, int generatorFeatureMask,
            int formatFeatures, int formatFeaturesMask)
    {
        super(src, mapperFeatures);
        _serFeatures = serFeatures;
        _serializationInclusion = src._serializationInclusion;
        _filterProvider = src._filterProvider;
        _defaultPrettyPrinter = src._defaultPrettyPrinter;
        _generatorFeatures = generatorFeatures;
        _generatorFeaturesToChange = generatorFeatureMask;
        _formatWriteFeatures = formatFeatures;
        _formatWriteFeaturesToChange = formatFeaturesMask;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,BaseSettings);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,FilterProvider);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,Class<?>);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,JsonInclude.Value);;;private SerializationConfig(SerializationConfig src, JsonInclude.Value incl)
    {
        super(src);
        _serFeatures = src._serFeatures;
        _serializationInclusion = incl;
        _filterProvider = src._filterProvider;
        _defaultPrettyPrinter = src._defaultPrettyPrinter;
        _generatorFeatures = src._generatorFeatures;
        _generatorFeaturesToChange = src._generatorFeaturesToChange;
        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,PropertyName);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,ContextAttributes);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,SimpleMixInResolver);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,PrettyPrinter);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;SerializationConfig(SerializationConfig,SimpleMixInResolver,RootNameLookup);;;        _formatWriteFeatures = src._formatWriteFeatures;
        _formatWriteFeaturesToChange = src._formatWriteFeaturesToChange;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;with(FormatFeature);;;public SerializationConfig with(FormatFeature feature)
    {
        int newSet = _formatWriteFeatures | feature.getMask();
        int newMask = _formatWriteFeaturesToChange | feature.getMask();
        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :
            new SerializationConfig(this,  _mapperFeatures, _serFeatures,
                    _generatorFeatures, _generatorFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;withFeatures(FormatFeature);;;public SerializationConfig withFeatures(FormatFeature... features)
    {
        int newSet = _formatWriteFeatures;
        int newMask = _formatWriteFeaturesToChange;
        for (FormatFeature f : features) {
            int mask = f.getMask();
            newSet |= mask;
            newMask |= mask;
        }
        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :
            new SerializationConfig(this,  _mapperFeatures, _serFeatures,
                    _generatorFeatures, _generatorFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;without(FormatFeature);;;public SerializationConfig without(FormatFeature feature)
    {
        int newSet = _formatWriteFeatures & ~feature.getMask();
        int newMask = _formatWriteFeaturesToChange | feature.getMask();
        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :
            new SerializationConfig(this,  _mapperFeatures, _serFeatures,
                    _generatorFeatures, _generatorFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;withoutFeatures(FormatFeature);;;public SerializationConfig withoutFeatures(FormatFeature... features)
    {
        int newSet = _formatWriteFeatures;
        int newMask = _formatWriteFeaturesToChange;
        for (FormatFeature f : features) {
            int mask = f.getMask();
            newSet &= ~mask;
            newMask |= mask;
        }
        return ((_formatWriteFeatures == newSet) && (_formatWriteFeaturesToChange == newMask)) ? this :
            new SerializationConfig(this,  _mapperFeatures, _serFeatures,
                    _generatorFeatures, _generatorFeaturesToChange,
                    newSet, newMask);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;withPropertyInclusion(JsonInclude.Value);;;public SerializationConfig withPropertyInclusion(JsonInclude.Value incl) {
        if (_serializationInclusion.equals(incl)) {
            return this;
        }
        return new SerializationConfig(this, incl);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;initialize(JsonGenerator);;;            g.overrideStdFeatures(newFlags, mask);
        }
        if (_formatWriteFeaturesToChange != 0) {
            g.overrideFormatFeatures(_formatWriteFeatures, _formatWriteFeaturesToChange);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;getDefaultPropertyInclusion();;;@Override
    public JsonInclude.Value getDefaultPropertyInclusion() {
        return _serializationInclusion;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;getDefaultPropertyInclusion(Class<?>);;;@Override
    public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) {
        // !!! TODO: per-type defaults
        return _serializationInclusion;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/SerializationConfig;getDefaultPropertyFormat(Class<?>);;;@Override
    public JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {
        // !!! TODO: per-type defaults
        return EMPTY_FORMAT;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationContext;canOverrideAccessModifiers();;;@Override
    public final boolean canOverrideAccessModifiers() {
        return _config.canOverrideAccessModifiers();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationContext;isEnabled(MapperFeature);;;@Override
    public final boolean isEnabled(MapperFeature feature) {
        return _config.isEnabled(feature);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationContext;getDefaultPropertyFormat(Class<?>);;;@Override
    public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {
        return _config.getDefaultPropertyFormat(baseType);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationContext;_desc(String);;;        if (desc == null) {
            return "[N/A]";
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DeserializationContext;_quotedString(String);;;protected String _quotedString(String desc) {
        if (desc == null) {
            return "[N/A]";
        }
        // !!! should we quote it? (in case there are control chars, linefeeds)
        if (desc.length() > MAX_ERROR_STR_LEN) {
            return String.format("\"%s]...[%s\"",
                    desc.substring(0, MAX_ERROR_STR_LEN),
                    desc.substring(desc.length() - MAX_ERROR_STR_LEN));
        }
        return "\"" + desc + "\"";
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectWriter;with(FormatFeature);;;public ObjectWriter with(FormatFeature feature)  {
        SerializationConfig newConfig = _config.with(feature);
        return (newConfig == _config) ? this : _new(this, newConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectWriter;withFeatures(FormatFeature);;;public ObjectWriter withFeatures(FormatFeature... features) {
        SerializationConfig newConfig = _config.withFeatures(features);
        return (newConfig == _config) ? this : _new(this, newConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectWriter;without(FormatFeature);;;public ObjectWriter without(FormatFeature feature) {
        SerializationConfig newConfig = _config.without(feature);
        return (newConfig == _config) ? this : _new(this, newConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectWriter;withoutFeatures(FormatFeature);;;public ObjectWriter withoutFeatures(FormatFeature... features) {
        SerializationConfig newConfig = _config.withoutFeatures(features);
        return (newConfig == _config) ? this : _new(this, newConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ObjectWriter;withAttributes(Map<?,?>);;;public ObjectWriter withAttributes(Map<?,?> attrs) {
        SerializationConfig newConfig = _config.withAttributes(attrs);
        return (newConfig == _config) ? this :  _new(this, newConfig);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;isVirtual();;;public boolean isVirtual();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;findPropertyFormat(MapperConfig<?>,Class<?>);;;public JsonFormat.Value findPropertyFormat(MapperConfig<?> config, Class<?> baseType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;findPropertyInclusion(MapperConfig<?>,Class<?>);;;public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Class<?> baseType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
            SerializerProvider provider)
        throws JsonMappingException;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;findFormatOverrides(AnnotationIntrospector);;;        @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;findPropertyFormat(MapperConfig<?>,Class<?>);;;@Override
        public JsonFormat.Value findPropertyFormat(MapperConfig<?> config, Class<?> baseType) {
            JsonFormat.Value v0 = config.getDefaultPropertyFormat(baseType);
            AnnotationIntrospector intr = config.getAnnotationIntrospector();
            if ((intr == null) || (_member == null)) {
                return v0;
            }
            JsonFormat.Value v = intr.findFormat(_member);
            if (v == null) {
                return v0;
            }
            return v0.withOverrides(v);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;findPropertyInclusion(MapperConfig<?>,Class<?>);;;@Override
        public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Class<?> baseType)
        {
            JsonInclude.Value v0 = config.getDefaultPropertyInclusion(baseType);
            AnnotationIntrospector intr = config.getAnnotationIntrospector();
            if ((intr == null) || (_member == null)) {
                return v0;
            }
            JsonInclude.Value v = intr.findPropertyInclusion(_member);
            if (v == null) {
                return v0;
            }
            return v0.withOverrides(v);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/BeanProperty;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
        public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
                SerializerProvider provider) {
            throw new UnsupportedOperationException("Instances of "+getClass().getName()+" should not get visited");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;findClassDescription(AnnotatedClass);;;public String findClassDescription(AnnotatedClass ac) { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;resolveSetterConflict(MapperConfig<?>,AnnotatedMethod,AnnotatedMethod);;;public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config,
            AnnotatedMethod setter1, AnnotatedMethod setter2) {
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;refineSerializationType(MapperConfig<?>,Annotated,JavaType);;;public JavaType refineSerializationType(final MapperConfig<?> config,
            final Annotated a, final JavaType baseType) throws JsonMappingException
    {
        JavaType type = baseType;
        final TypeFactory tf = config.getTypeFactory();
        
        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods

        
        // Ok: start by refining the main type itself; common to all types
        Class<?> serClass = findSerializationType(a);
        if (serClass != null) {
            if (type.hasRawClass(serClass)) {
                // 30-Nov-2015, tatu: As per [databind#1023], need to allow forcing of
                //    static typing this way
                type = type.withStaticTyping();
            } else {
                try {
                    // 11-Oct-2015, tatu: For deser, we call `TypeFactory.constructSpecializedType()`,
                    //   may be needed here too in future?
                    type = tf.constructGeneralizedType(type, serClass);
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to widen type %s with annotation (value %s), from '%s': %s",
                                    type, serClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
        }
        // Then further processing for container types

        // First, key type (for Maps, Map-like types):
        if (type.isMapLikeType()) {
            JavaType keyType = type.getKeyType();
            Class<?> keyClass = findSerializationKeyType(a, keyType);
            if (keyClass != null) {
                if (keyType.hasRawClass(keyClass)) {
                    keyType = keyType.withStaticTyping();
                } else {
                    try {
                        keyType = tf.constructGeneralizedType(keyType, keyClass);
                    } catch (IllegalArgumentException iae) {
                        throw new JsonMappingException(null,
                                String.format("Failed to widen key type of %s with concrete-type annotation (value %s), from '%s': %s",
                                        type, keyClass.getName(), a.getName(), iae.getMessage()),
                                        iae);
                    }
                }
                type = ((MapLikeType) type).withKeyType(keyType);
            }
        }

        JavaType contentType = type.getContentType();
        if (contentType != null) { // collection[like], map[like], array, reference
            // And then value types for all containers:
           Class<?> contentClass = findSerializationContentType(a, contentType);
           if (contentClass != null) {
               if (contentType.hasRawClass(contentClass)) {
                   contentType = contentType.withStaticTyping();
               } else {
                   try {
                       contentType = tf.constructGeneralizedType(contentType, contentClass);
                   } catch (IllegalArgumentException iae) {
                       throw new JsonMappingException(null,
                               String.format("Failed to widen value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                       type, contentClass.getName(), a.getName(), iae.getMessage()),
                                       iae);
                   }
               }
               type = type.withContentType(contentType);
           }
        }
        return type;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;findEnumValues(Class<?>,Enum<?>[],String[]);;;public  String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {
        for (int i = 0, len = enumValues.length; i < len; ++i) {
            names[i] = findEnumValue(enumValues[i]);
        }
        return names;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;refineDeserializationType(MapperConfig<?>,Annotated,JavaType);;;public JavaType refineDeserializationType(final MapperConfig<?> config,
            final Annotated a, final JavaType baseType) throws JsonMappingException
    {
        JavaType type = baseType;
        final TypeFactory tf = config.getTypeFactory();

        // 10-Oct-2015, tatu: For 2.7, we'll need to delegate back to
        //    now-deprecated secondary methods; this because while
        //    direct sub-class not yet retrofitted may only override
        //    those methods. With 2.8 or later we may consider removal
        //    of these methods

        
        // Ok: start by refining the main type itself; common to all types
        Class<?> valueClass = findDeserializationType(a, type);
        if ((valueClass != null) && !type.hasRawClass(valueClass)) {
            try {
                type = tf.constructSpecializedType(type, valueClass);
            } catch (IllegalArgumentException iae) {
                throw new JsonMappingException(null,
                        String.format("Failed to narrow type %s with annotation (value %s), from '%s': %s",
                                type, valueClass.getName(), a.getName(), iae.getMessage()),
                                iae);
            }
        }
        // Then further processing for container types

        // First, key type (for Maps, Map-like types):
        if (type.isMapLikeType()) {
            JavaType keyType = type.getKeyType();
            Class<?> keyClass = findDeserializationKeyType(a, keyType);
            if (keyClass != null) {
                try {
                    keyType = tf.constructSpecializedType(keyType, keyClass);
                    type = ((MapLikeType) type).withKeyType(keyType);
                } catch (IllegalArgumentException iae) {
                    throw new JsonMappingException(null,
                            String.format("Failed to narrow key type of %s with concrete-type annotation (value %s), from '%s': %s",
                                    type, keyClass.getName(), a.getName(), iae.getMessage()),
                                    iae);
                }
            }
        }
        JavaType contentType = type.getContentType();
        if (contentType != null) { // collection[like], map[like], array, reference
            // And then value types for all containers:
           Class<?> contentClass = findDeserializationContentType(a, contentType);
           if (contentClass != null) {
               try {
                   contentType = tf.constructSpecializedType(contentType, contentClass);
                   type = type.withContentType(contentType);
               } catch (IllegalArgumentException iae) {
                   throw new JsonMappingException(null,
                           String.format("Failed to narrow value type of %s with concrete-type annotation (value %s), from '%s': %s",
                                   type, contentClass.getName(), a.getName(), iae.getMessage()),
                                   iae);
               }
           }
        }
        return type;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector;_hasOneOf(Annotated,Class<?extendsAnnotation>[]);;;protected boolean _hasOneOf(Annotated annotated, Class<? extends Annotation>[] annoClasses) {
        return annotated.hasOneOf(annoClasses);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/AbstractTypeResolver;resolveAbstractType(DeserializationConfig,BeanDescription);;;public JavaType resolveAbstractType(DeserializationConfig config,
            BeanDescription typeDesc) {
        return resolveAbstractType(config, typeDesc.getType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/DatabindContext;getDefaultPropertyFormat(Class<?>);;;public abstract JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/exc/IgnoredPropertyException;IgnoredPropertyException(JsonParser,String,JsonLocation,Class<?>,String,Collection<Object>);;;public IgnoredPropertyException(JsonParser p, String msg, JsonLocation loc,
            Class<?> referringClass, String propName,
            Collection<Object> propertyIds)
    {
        super(p, msg, loc, referringClass, propName, propertyIds);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/exc/InvalidFormatException;InvalidFormatException(JsonParser,String,Object,Class<?>);;;public InvalidFormatException(JsonParser p,
            String msg, Object value, Class<?> targetType)
    {
        super(p, msg);
        _value = value;
        _targetType = targetType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/exc/UnrecognizedPropertyException;UnrecognizedPropertyException(JsonParser,String,JsonLocation,Class<?>,String,Collection<Object>);;;public UnrecognizedPropertyException(JsonParser p, String msg, JsonLocation loc,
            Class<?> referringClass, String propName,
            Collection<Object> propertyIds)
    {
        super(p, msg, loc, referringClass, propName, propertyIds);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/exc/PropertyBindingException;PropertyBindingException(JsonParser,String,JsonLocation,Class<?>,String,Collection<Object>);;;protected PropertyBindingException(JsonParser p, String msg, JsonLocation loc,
            Class<?> referringClass, String propName,
            Collection<Object> propertyIds)
    {
        super(p, msg, loc);
        _referringClass = referringClass;
        _propertyName = propName;
        _propertyIds = propertyIds;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfigBase;withAttributes(Map<?,?>);;;public T withAttributes(Map<?,?> attributes) {
        return with(getAttributes().withSharedAttributes(attributes));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig;getDefaultPropertyInclusion();;;public abstract JsonInclude.Value getDefaultPropertyInclusion();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig;getDefaultPropertyInclusion(Class<?>);;;public abstract JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/MapperConfig;getDefaultPropertyFormat(Class<?>);;;public abstract JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes;withSharedAttributes(Map<?,?>);;;public abstract ContextAttributes withSharedAttributes(Map<?,?> attributes);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes;Impl(Map<?,?>);;;protected Impl(Map<?,?> shared) {
            _shared = shared;
            _nonShared = null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes;Impl(Map<?,?>,Map<Object,Object>);;;protected Impl(Map<?,?> shared, Map<Object,Object> nonShared) {
            _shared = shared;
            _nonShared = nonShared;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes;withSharedAttributes(Map<?,?>);;;@Override
        public ContextAttributes withSharedAttributes(Map<?,?> shared) {
            return new Impl(shared);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/cfg/ContextAttributes;_copy(Map<?,?>);;;private Map<Object,Object> _copy(Map<?,?> src)
        {
            return new HashMap<Object,Object>(src);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory;findDeserializer(JavaType,DeserializationConfig,BeanDescription);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory;hasSuperClassStartingWith(Class<?>,String);;;private boolean hasSuperClassStartingWith(Class<?> rawType, String prefix)
    {
        for (Class<?> supertype = rawType.getSuperclass(); supertype != null; supertype = supertype.getSuperclass()) {
            if (supertype == Object.class) {
                return false;
            }
            if (supertype.getName().startsWith(prefix)) {
                return true;
            }
        }
        return false;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ext/PathDeserializer;PathDeserializer();;;public PathDeserializer() { super(Path.class); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ext/PathDeserializer;deserialize(JsonParser,DeserializationContext);;;@Override
    public Path deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        JsonToken t= p.getCurrentToken();
        if (t != null) {
            if (t.isScalarValue()) {
                return Paths.get(p.getValueAsString());
            }
            // 16-Oct-2015: should we perhaps allow JSON Arrays (of Strings) as well?
        }
        throw ctxt.mappingException(Path.class, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;ResolvedRecursiveType(Class<?>,TypeBindings);;;public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) {
        super(erasedType, bindings, null, null, 0, null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;setReference(JavaType);;;public void setReference(JavaType ref)
    {
        // sanity check; should not be called multiple times
        if (_referencedType != null) {
            throw new IllegalStateException("Trying to re-set self reference; old value = "+_referencedType+", new = "+ref);
        }
        _referencedType = ref;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;getSelfReferencedType();;;public JavaType getSelfReferencedType() { return _referencedType; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;getGenericSignature(StringBuilder);;;@Override
    public StringBuilder getGenericSignature(StringBuilder sb) {
        return _referencedType.getGenericSignature(sb);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;getErasedSignature(StringBuilder);;;@Override
    public StringBuilder getErasedSignature(StringBuilder sb) {
        return _referencedType.getErasedSignature(sb);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;withTypeHandler(Object);;;@Override
    public JavaType withTypeHandler(Object h) {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;withContentTypeHandler(Object);;;@Override
    public JavaType withContentTypeHandler(Object h) {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;withValueHandler(Object);;;@Override
    public JavaType withValueHandler(Object h) {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;withContentValueHandler(Object);;;@Override
    public JavaType withContentValueHandler(Object h) {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;withStaticTyping();;;@Override
    public JavaType withStaticTyping() {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;_narrow(Class<?>);;;@Deprecated // since 2.7
    @Override
    protected JavaType _narrow(Class<?> subclass) {
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;isContainerType();;;@Override
    public boolean isContainerType() {
        return false;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;toString();;;@Override
    public String toString() {
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType;equals(Object);;;@Override
    public boolean equals(Object o) {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() != getClass()) return false;

        return ((ResolvedRecursiveType) o).getSelfReferencedType().equals(getSelfReferencedType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;TypeBindings(String[],JavaType[],String[]);;;private TypeBindings(String[] names, JavaType[] types, String[] uvars)
    {
        _names = (names == null) ? NO_STRINGS : names;
        _types = (types == null) ? NO_TYPES : types;
        if (_names.length != _types.length) {
            throw new IllegalArgumentException("Mismatching names ("+_names.length+"), types ("+_types.length+")");
        }
        int h = 1;
        for (int i = 0, len = _types.length; i < len; ++i) {
            h += _types[i].hashCode();
        }
        _unboundVariables = uvars;
        _hashCode = h;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;emptyBindings();;;public static TypeBindings emptyBindings() {
        return EMPTY;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;readResolve();;;protected Object readResolve() {
        if ((_names == null) || (_names.length == 0)) {
            return EMPTY;
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;create(Class<?>,List<JavaType>);;;public static TypeBindings create(Class<?> erasedType, List<JavaType> typeList)
    {
        JavaType[] types = (typeList == null || typeList.isEmpty()) ?
                NO_TYPES : typeList.toArray(new JavaType[typeList.size()]);
        return create(erasedType, types);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;create(Class<?>,JavaType[]);;;public static TypeBindings create(Class<?> erasedType, JavaType[] types)
    {
        if (types == null) {
            types = NO_TYPES;
        } else switch (types.length) {
        case 1:
            return create(erasedType, types[0]);
        case 2:
            return create(erasedType, types[0], types[1]);
        }
        TypeVariable<?>[] vars = erasedType.getTypeParameters();
        String[] names;
        if (vars == null || vars.length == 0) {
            names = NO_STRINGS;
        } else {
            int len = vars.length;
            names = new String[len];
            for (int i = 0; i < len; ++i) {
                names[i] = vars[i].getName();
            }
        }
        // Check here to give better error message
        if (names.length != types.length) {
            throw new IllegalArgumentException("Can not create TypeBindings for class "+erasedType.getName()
                   +" with "+types.length+" type parameter"
                   +((types.length == 1) ? "" : "s")+": class expects "+names.length);
        }
        return new TypeBindings(names, types, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;create(Class<?>,JavaType);;;public static TypeBindings create(Class<?> erasedType, JavaType typeArg1)
    {
        // 30-Oct-2015, tatu: Minor optimization for relatively common cases
        TypeVariable<?>[] vars = TypeParamStash.paramsFor1(erasedType);
        int varLen = (vars == null) ? 0 : vars.length;
        if (varLen != 1) {
            throw new IllegalArgumentException("Can not create TypeBindings for class "+erasedType.getName()
                    +" with 1 type parameter: class expects "+varLen);
        }
        return new TypeBindings(new String[] { vars[0].getName() },
                new JavaType[] { typeArg1 }, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;create(Class<?>,JavaType,JavaType);;;public static TypeBindings create(Class<?> erasedType, JavaType typeArg1, JavaType typeArg2)
    {
        // 30-Oct-2015, tatu: Minor optimization for relatively common cases
        TypeVariable<?>[] vars = TypeParamStash.paramsFor2(erasedType);
        int varLen = (vars == null) ? 0 : vars.length;
        if (varLen != 2) {
            throw new IllegalArgumentException("Can not create TypeBindings for class "+erasedType.getName()
                    +" with 2 type parameters: class expects "+varLen);
        }
        return new TypeBindings(new String[] { vars[0].getName(), vars[1].getName() },
                new JavaType[] { typeArg1, typeArg2 }, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;createIfNeeded(Class<?>,JavaType);;;public static TypeBindings createIfNeeded(Class<?> erasedType, JavaType typeArg1)
    {
        TypeVariable<?>[] vars = erasedType.getTypeParameters();
        int varLen = (vars == null) ? 0 : vars.length;
        if (varLen == 0) {
            return EMPTY;
        }
        if (varLen != 1) {
            throw new IllegalArgumentException("Can not create TypeBindings for class "+erasedType.getName()
                    +" with 1 type parameter: class expects "+varLen);
        }
        return new TypeBindings(new String[] { vars[0].getName() },
                new JavaType[] { typeArg1 }, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;createIfNeeded(Class<?>,JavaType[]);;;public static TypeBindings createIfNeeded(Class<?> erasedType, JavaType[] types)
    {
        TypeVariable<?>[] vars = erasedType.getTypeParameters();
        if (vars == null || vars.length == 0) {
            return EMPTY;
        }
        if (types == null) {
            types = NO_TYPES;
        }
        int len = vars.length;
        String[] names = new String[len];
        for (int i = 0; i < len; ++i) {
            names[i] = vars[i].getName();
        }
        // Check here to give better error message
        if (names.length != types.length) {
            throw new IllegalArgumentException("Can not create TypeBindings for class "+erasedType.getName()
                   +" with "+types.length+" type parameter"
                   +((types.length == 1) ? "" : "s")+": class expects "+names.length);
        }
        return new TypeBindings(names, types, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;withUnboundVariable(String);;;public TypeBindings withUnboundVariable(String name)
    {
        int len = (_unboundVariables == null) ? 0 : _unboundVariables.length;
        String[] names =  (len == 0)
                ? new String[1] : Arrays.copyOf(_unboundVariables, len+1);
        names[len] = name;
        return new TypeBindings(_names, _types, names);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;findBoundType(String);;;public JavaType findBoundType(String name)
    {
        for (int i = 0, len = _names.length; i < len; ++i) {
            if (name.equals(_names[i])) {
                return _types[i];
            }
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;isEmpty();;;public boolean isEmpty() {
        return (_types.length == 0);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;size();;;public int size() { 
        return _types.length;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;getBoundName(int);;;public String getBoundName(int index)
    {
        if (index < 0 || index >= _names.length) {
            return null;
        }
        return _names[index];
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;getBoundType(int);;;public JavaType getBoundType(int index)
    {
        if (index < 0 || index >= _types.length) {
            return null;
        }
        return _types[index];
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;getTypeParameters();;;public List<JavaType> getTypeParameters()
    {
        if (_types.length == 0) {
            return Collections.emptyList();
        }
        return Arrays.asList(_types);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;hasUnbound(String);;;public boolean hasUnbound(String name) {
        if (_unboundVariables != null) {
            for (int i = _unboundVariables.length; --i >= 0; ) {
                if (name.equals(_unboundVariables[i])) {
                    return true;
                }
            }
        }
        return false;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;toString();@Override
    public String toString();;@Override public String toString()
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;hashCode();;;@Override public int hashCode() { return _hashCode; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;equals(Object);;;@Override public boolean equals(Object o)
    {
        if (o == this) return true;
        if (o == null || o.getClass() != getClass()) return false;
        TypeBindings other = (TypeBindings) o;
        int len = _types.length;
        if (len != other.size()) {
            return false;
        }
        JavaType[] otherTypes = other._types;
        for (int i = 0; i < len; ++i) {
            if (!otherTypes[i].equals(_types[i])) {
                return false;
            }
        }
        return true;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;typeParameterArray();;;protected JavaType[] typeParameterArray() {
        return _types;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;paramsFor1(Class<?>);;;public static TypeVariable<?>[] paramsFor1(Class<?> erasedType)
        {
            if (erasedType == Collection.class) {
                return VARS_COLLECTION;
            }
            if (erasedType == List.class) {
                return VARS_LIST;
            }
            if (erasedType == ArrayList.class) {
                return VARS_ARRAY_LIST;
            }
            if (erasedType == AbstractList.class) {
                return VARS_ABSTRACT_LIST;
            }
            if (erasedType == Iterable.class) {
                return VARS_ITERABLE;
            }
            return erasedType.getTypeParameters();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBindings;paramsFor2(Class<?>);;;public static TypeVariable<?>[] paramsFor2(Class<?> erasedType)
        {
            if (erasedType == Map.class) {
                return VARS_MAP;
            }
            if (erasedType == HashMap.class) {
                return VARS_HASH_MAP;
            }
            if (erasedType == LinkedHashMap.class) {
                return VARS_LINKED_HASH_MAP;
            }
            return erasedType.getTypeParameters();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;ArrayType(JavaType,TypeBindings,Object,Object,Object,boolean);;;protected ArrayType(JavaType componentType, TypeBindings bindings, Object emptyInstance,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        // No super-class, interfaces, for now
        super(emptyInstance.getClass(), bindings, null, null,
                componentType.hashCode(),
                valueHandler, typeHandler, asStatic);
        _componentType = componentType;
        _emptyArray = emptyInstance;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;construct(JavaType,TypeBindings);;;public static ArrayType construct(JavaType componentType, TypeBindings bindings) {
        return construct(componentType, bindings, null, null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;construct(JavaType,TypeBindings,Object,Object);;;public static ArrayType construct(JavaType componentType, TypeBindings bindings,
            Object valueHandler, Object typeHandler) {
        // Figuring out raw class for generic array is actually bit tricky...
        Object emptyInstance = Array.newInstance(componentType.getRawClass(), 0);
        return new ArrayType(componentType, bindings, emptyInstance, valueHandler, typeHandler, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        Object emptyInstance = Array.newInstance(contentType.getRawClass(), 0);
        return new ArrayType(contentType, _bindings, emptyInstance,
                _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> contentClass, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;_reportUnsupported();;;private JavaType _reportUnsupported() {
        throw new UnsupportedOperationException("Can not narrow or widen array types");
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;getContentValueHandler();;;@Override
    public Object getContentValueHandler() {
        return _componentType.getValueHandler();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ArrayType;getContentTypeHandler();;;@Override
    public Object getContentTypeHandler() {
        return _componentType.getTypeHandler();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionType;CollectionType(Class<?>,TypeBindings,JavaType,JavaType[],JavaType,Object,Object,boolean);;;private CollectionType(Class<?> collT, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType elemT,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        super(collT, bindings, superClass, superInts, elemT, valueHandler, typeHandler, asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionType;CollectionType(TypeBase,JavaType);;;protected CollectionType(TypeBase base, JavaType elemT) {
        super(base, elemT);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionType;construct(Class<?>,TypeBindings,JavaType,JavaType[],JavaType);;;public static CollectionType construct(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType elemT) {
        return new CollectionType(rawType, bindings, superClass, superInts, elemT,
                null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        if (_elementType == contentType) {
            return this;
        }
        return new CollectionType(_class, _bindings, _superClass, _superInterfaces,
                contentType, _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return new CollectionType(rawType, bindings,
                superClass, superInterfaces, _elementType,
                _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;getClassLoader();    	return _classLoader;;;        return _classLoader;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;rawClass(Type);        // Shouldbe able to optimize bit more in future...;;        // Should be able to optimize bit more in future...
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;classForName(String);    	return Class.forName(name);;;        return Class.forName(name);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;constructSpecializedType(JavaType,Class<?>);;;        // But there is the need for special case for arrays too, it seems
        if (baseType instanceof ArrayType) {
            if (subclass.isArray()) {
                // actually see if it might be a no-op first:
                ArrayType at = (ArrayType) baseType;
                Class<?> rawComp = subclass.getComponentType();
                if (at.getContentType().getRawClass() == rawComp) {
                    return baseType;
                }
                JavaType componentType = _fromAny(null, rawComp, null);
                return ((ArrayType) baseType).withComponentType(componentType);
            }
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;constructSpecializedType(JavaType,Class<?>);;;        */
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;constructGeneralizedType(JavaType,Class<?>);;;public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)
    {
        // simple optimization to avoid costly introspection if type-erased type does NOT differ
        final Class<?> rawBase = baseType.getRawClass();
        if (rawBase == superClass) {
            return baseType;
        }
        JavaType superType = baseType.findSuperType(superClass);
        if (superType == null) {
            // Most likely, caller did not verify sub/super-type relationship
            if (!superClass.isAssignableFrom(rawBase)) {
                throw new IllegalArgumentException(String.format(
                        "Class %s not a super-type of %s", superClass.getName(), baseType));
            }
            // 01-Nov-2015, tatu: Should never happen, but ch
            throw new IllegalArgumentException(String.format(
                    "Internal error: class %s not included as super-type for %s",
                    superClass.getName(), baseType));
        }
        return superType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_mapType(Class<?>,TypeBindings,JavaType,JavaType[]);;;private JavaType _mapType(Class<?> rawClass, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        JavaType kt, vt;
        
        // 28-May-2015, tatu: Properties are special, as per [databind#810]; fake "correct" parameter sig
        if (rawClass == Properties.class) {
            kt = vt = CORE_TYPE_STRING;
        } else {
            List<JavaType> typeParams = bindings.getTypeParameters();
            // ok to have no types ("raw")
            switch (typeParams.size()) {
            case 0: // acceptable?
                kt = vt = _unknownType();
                break;
            case 2:
                kt = typeParams.get(0);
                vt = typeParams.get(1);
                break;
            default:
                throw new IllegalArgumentException("Strange Map type "+rawClass.getName()+": can not determine type parameters");
            }
        }
        return MapType.construct(rawClass, bindings, superClass, superInterfaces, kt, vt);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_collectionType(Class<?>,TypeBindings,JavaType,JavaType[]);;;private JavaType _collectionType(Class<?> rawClass, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        List<JavaType> typeParams = bindings.getTypeParameters();
        // ok to have no types ("raw")
        JavaType ct;
        if (typeParams.isEmpty()) {
            ct = _unknownType();
        } else if (typeParams.size() == 1) {
            ct = typeParams.get(0);
        } else {
            throw new IllegalArgumentException("Strange Collection type "+rawClass.getName()+": can not determine type parameters");
        }
        return CollectionType.construct(rawClass, bindings, superClass, superInterfaces, ct);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_referenceType(Class<?>,TypeBindings,JavaType,JavaType[]);;;private JavaType _referenceType(Class<?> rawClass, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        List<JavaType> typeParams = bindings.getTypeParameters();
        // ok to have no types ("raw")
        JavaType ct;
        if (typeParams.isEmpty()) {
            ct = _unknownType();
        } else if (typeParams.size() == 1) {
            ct = typeParams.get(0);
        } else {
            throw new IllegalArgumentException("Strange Reference type "+rawClass.getName()+": can not determine type parameters");
        }
        return ReferenceType.construct(rawClass, bindings, superClass, superInterfaces, ct);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_constructSimple(Class<?>,TypeBindings,JavaType,JavaType[]);;;protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        if (bindings.isEmpty()) {
            JavaType result = _findWellKnownSimple(raw);
            if (result != null) {
                return result;
            }
        }
        return _newSimpleType(raw, bindings, superClass, superInterfaces);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_newSimpleType(Class<?>,TypeBindings,JavaType,JavaType[]);;;protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        return new SimpleType(raw, bindings, superClass, superInterfaces);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_findWellKnownSimple(Class<?>);;;protected JavaType _findWellKnownSimple(Class<?> clz) {
        if (clz.isPrimitive()) {
            if (clz == CLS_BOOL) return CORE_TYPE_BOOL;
            if (clz == CLS_INT) return CORE_TYPE_INT;
            if (clz == CLS_LONG) return CORE_TYPE_LONG;
        } else {
            if (clz == CLS_STRING) return CORE_TYPE_STRING;
            if (clz == CLS_OBJECT) return CORE_TYPE_OBJECT; // since 2.7
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromAny(ClassStack,Type,TypeBindings);;;protected JavaType _fromAny(ClassStack context, Type type, TypeBindings bindings)
    {
        JavaType resultType;

        // simple class?
        if (type instanceof Class<?>) {
            // Important: remove possible bindings since this is type-erased thingy
            resultType = _fromClass(context, (Class<?>) type, EMPTY_BINDINGS);
        }
        // But if not, need to start resolving.
        else if (type instanceof ParameterizedType) {
            resultType = _fromParamType(context, (ParameterizedType) type, bindings);
        }
        else if (type instanceof JavaType) { // [databind#116]
            // no need to modify further if we already had JavaType
            return (JavaType) type;
        }
        else if (type instanceof GenericArrayType) {
            resultType = _fromArrayType(context, (GenericArrayType) type, bindings);
        }
        else if (type instanceof TypeVariable<?>) {
            resultType = _fromVariable(context, (TypeVariable<?>) type, bindings);
        }
        else if (type instanceof WildcardType) {
            resultType = _fromWildcard(context, (WildcardType) type, bindings);
        } else {
            // sanity check
            throw new IllegalArgumentException("Unrecognized Type: "+((type == null) ? "[null]" : type.toString()));
        }
        /* Need to allow TypeModifiers to alter actual type; however,
         * for now only call for simple types (i.e. not for arrays, map or collections).
         * Can be changed in future it necessary
         */
        if (_modifiers != null && !resultType.isContainerType()) {
            TypeBindings b = resultType.getBindings();
            if (b == null) {
                b = EMPTY_BINDINGS;
            }
            for (TypeModifier mod : _modifiers) {
                resultType = mod.modifyType(resultType, type, b, this);
            }
        }
        return resultType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromClass(ClassStack,Class<?>,TypeBindings);;;protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)
    {
        // Very first thing: small set of core types we know well:
        JavaType result = _findWellKnownSimple(rawType);
        if (result != null) {
            return result;
        }
        // Barring that, we may have recently constructed an instance:
        // !!! TODO 16-Oct-2015, tatu: For now let's only cached non-parameterized; otherwise
        //     need better cache key
        boolean cachable = (bindings == null) || bindings.isEmpty();
        if (cachable) {
            result = _typeCache.get(rawType); // ok, cache object is synced
            if (result != null) {
                return result;
            }
        }

        // 15-Oct-2015, tatu: recursive reference?
        if (context == null) {
            context = new ClassStack(rawType);
        } else {
            ClassStack prev = context.find(rawType);
            if (prev != null) {
                // Self-reference: needs special handling, then...
                ResolvedRecursiveType selfRef = new ResolvedRecursiveType(rawType, EMPTY_BINDINGS);
                prev.addSelfReference(selfRef);
                return selfRef;
            }
            // no, but need to update context to allow for proper cycle resolution
            context = context.child(rawType);
        }

        // First: do we have an array type?
        if (rawType.isArray()) {
            result = ArrayType.construct(_fromAny(context, rawType.getComponentType(), bindings),
                    bindings);
        } else {
            // If not, need to proceed by first resolving parent type hierarchy
            
            JavaType superClass;
            JavaType[] superInterfaces;

            if (rawType.isInterface()) {
                superClass = null;
                superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);
            } else {
                // Note: even Enums can implement interfaces, so can not drop those
                superClass = _resolveSuperClass(context, rawType, bindings);
                superInterfaces = _resolveSuperInterfaces(context, rawType, bindings);
            }

            // 19-Oct-2015, tatu: Bit messy, but we need to 'fix' java.util.Properties here...
            if (rawType == Properties.class) {
                result = MapType.construct(rawType, bindings, superClass, superInterfaces,
                        CORE_TYPE_STRING, CORE_TYPE_STRING);
            }
            // And then check what flavor of type we got. Start by asking resolved
            // super-type if refinement is all that is needed?
            else if (superClass != null) {
                result = superClass.refine(rawType, bindings, superClass, superInterfaces);
            }
            // if not, perhaps we are now resolving a well-known class or interface?
            if (result == null) {
                result = _fromWellKnownClass(context, rawType, bindings, superClass, superInterfaces); 
                if (result == null) {
                    result = _fromWellKnownInterface(context, rawType, bindings, superClass, superInterfaces);
                    if (result == null) {
                        // but if nothing else, "simple" class for now:
                        result = _newSimpleType(rawType, bindings, superClass, superInterfaces);
                    }
                }
            }
        }
        context.resolveSelfReferences(result);

        if (cachable) {
            _typeCache.putIfAbsent(rawType, result); // cache object syncs
        }
        return result;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_resolveSuperClass(ClassStack,Class<?>,TypeBindings);;;protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
    {
        Type parent = ClassUtil.getGenericSuperclass(rawType);
        if (parent == null) {
            return null;
        }
        return _fromAny(context, parent, parentBindings);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_resolveSuperInterfaces(ClassStack,Class<?>,TypeBindings);;;protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
    {
        Type[] types = ClassUtil.getGenericInterfaces(rawType);
        if (types == null || types.length == 0) {
            return NO_TYPES;
        }
        int len = types.length;
        JavaType[] resolved = new JavaType[len];
        for (int i = 0; i < len; ++i) {
            Type type = types[i];
            resolved[i] = _fromAny(context, type, parentBindings);
        }
        return resolved;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromWellKnownClass(ClassStack,Class<?>,TypeBindings,JavaType,JavaType[]);;;protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        // Quite simple when we resolving exact class/interface; start with that
        if (rawType == Map.class) {
            return _mapType(rawType, bindings, superClass, superInterfaces);
        }
        if (rawType == Collection.class) {
            return _collectionType(rawType, bindings, superClass, superInterfaces);
        }
        // and since 2.6 one referential type
        if (rawType == AtomicReference.class) {
            return _referenceType(rawType, bindings, superClass, superInterfaces);
        }
        // 01-Nov-2015, tatu: As of 2.7, couple of potential `CollectionLikeType`s (like
        //    `Iterable`, `Iterator`), and `MapLikeType`s (`Map.Entry`) are not automatically
        //    detected, related to difficulties in propagating type upwards (Iterable, for
        //    example, is a weak, tag-on type). They may be detectable in future.
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromWellKnownInterface(ClassStack,Class<?>,TypeBindings,JavaType,JavaType[]);;;protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces)
    {
        // But that's not all: may be possible current type actually implements an
        // interface type. So...
        final int intCount = superInterfaces.length;

        for (int i = 0; i < intCount; ++i) {
            JavaType result = superInterfaces[i].refine(rawType, bindings, superClass, superInterfaces);
            if (result != null) {
                return result;
            }
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromParamType(ClassStack,ParameterizedType,TypeBindings);;;protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype,
            TypeBindings parentBindings)
    {
        // Assumption here is we'll always get Class, not one of other Types
        Class<?> rawType = (Class<?>) ptype.getRawType();

        // 29-Oct-2015, tatu: For performance reasons, let's streamline handling of
        //   couple of not-so-useful parametric types
        if (rawType == CLS_ENUM) {
            return CORE_TYPE_ENUM;
        }
        if (rawType == CLS_COMPARABLE) {
            return CORE_TYPE_COMPARABLE;
        }
        if (rawType == CLS_CLASS) {
            return CORE_TYPE_CLASS;
        }

        // First: what is the actual base type? One odd thing is that 'getRawType'
        // returns Type, not Class<?> as one might expect. But let's assume it is
        // always of type Class: if not, need to add more code to resolve it to Class.        
        Type[] args = ptype.getActualTypeArguments();
        int paramCount = (args == null) ? 0 : args.length;
        JavaType[] pt;
        TypeBindings newBindings;        

        if (paramCount == 0) {
            newBindings = EMPTY_BINDINGS;
        } else {
            pt = new JavaType[paramCount];
            for (int i = 0; i < paramCount; ++i) {
                pt[i] = _fromAny(context, args[i], parentBindings);
            }
            newBindings = TypeBindings.create(rawType, pt);
        }
        return _fromClass(context, rawType, newBindings);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromArrayType(ClassStack,GenericArrayType,TypeBindings);;;protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)
    {
        JavaType elementType = _fromAny(context, type.getGenericComponentType(), bindings);
        return ArrayType.construct(elementType, bindings);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromVariable(ClassStack,TypeVariable<?>,TypeBindings);;;protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)
    {
        // ideally should find it via bindings:
        final String name = var.getName();
        JavaType type = bindings.findBoundType(name);
        if (type != null) {
            return type;
        }
        // but if not, use bounds... note that approach here is simplistic; not taking
        // into account possible multiple bounds, nor consider upper bounds.
        if (bindings.hasUnbound(name)) {
            return CORE_TYPE_OBJECT;
        }
        bindings = bindings.withUnboundVariable(name);

        Type[] bounds = var.getBounds();
        return _fromAny(context, bounds[0], bindings);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;_fromWildcard(ClassStack,WildcardType,TypeBindings);;;protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)
    {
        /* Similar to challenges with TypeVariable, we may have multiple upper bounds.
         * But it is also possible that if upper bound defaults to Object, we might
         * want to consider lower bounds instead.
         * For now, we won't try anything more advanced; above is just for future reference.
         */
        return _fromAny(context, type.getUpperBounds()[0], bindings);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;SimpleType(Class<?>,TypeBindings,JavaType,JavaType[]);;;protected SimpleType(Class<?> cls, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts) {
        this(cls, bindings, superClass, superInts, null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;SimpleType(TypeBase);;;protected SimpleType(TypeBase base) {
        super(base);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;SimpleType(Class<?>,TypeBindings,JavaType,JavaType[],Object,Object,boolean);;;protected SimpleType(Class<?> cls, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        super(cls, bindings, superClass, superInts,
                0, valueHandler, typeHandler, asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;SimpleType(Class<?>,TypeBindings,JavaType,JavaType[],int,Object,Object,boolean);;;protected SimpleType(Class<?> cls, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, int extraHash,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        super(cls, bindings, superClass, superInts, 
                extraHash, valueHandler, typeHandler, asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;_narrow(Class<?>);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;_narrow(Class<?>);;;        if (_class == subclass) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        throw new IllegalArgumentException("Simple types have no content types; can not call withContentType()");
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        // SimpleType means something not-specialized, so:
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/SimpleType;_buildSuperClass(Class<?>,TypeBindings);;;private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b)
    {
        if (superClass == null) {
            return null;
        }
        if (superClass == Object.class) {
            return TypeFactory.unknownType();
        }
        JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b);
        return new SimpleType(superClass, b,
                superSuper, null, null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;CollectionLikeType(Class<?>,TypeBindings,JavaType,JavaType[],JavaType,Object,Object,boolean);;;protected CollectionLikeType(Class<?> collT, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType elemT,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        super(collT, bindings, superClass, superInts,
                elemT.hashCode(), valueHandler, typeHandler, asStatic);
        _elementType = elemT;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;CollectionLikeType(TypeBase,JavaType);;;protected CollectionLikeType(TypeBase base, JavaType elemT)
    {
        super(base);
        _elementType = elemT;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;construct(Class<?>,TypeBindings,JavaType,JavaType[],JavaType);;;public static CollectionLikeType construct(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType elemT) {
        return new CollectionLikeType(rawType, bindings, superClass, superInts, elemT,
                null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;upgradeFrom(JavaType,JavaType);;;public static CollectionLikeType upgradeFrom(JavaType baseType, JavaType elementType) {
        // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;
        //    will cross that bridge if and when need be
        if (baseType instanceof TypeBase) {
            return new CollectionLikeType((TypeBase) baseType, elementType);
        }
        throw new IllegalArgumentException("Can not upgrade from an instance of "+baseType.getClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;_narrow(Class<?>);;;    @Deprecated // since 2.7
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        if (_elementType == contentType) {
            return this;
        }
        return new CollectionLikeType(_class, _bindings, _superClass, _superInterfaces,
                contentType, _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return new CollectionLikeType(rawType, bindings,
                superClass, superInterfaces, _elementType,
                _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;getContentValueHandler();;;@Override
    public Object getContentValueHandler() {
        return _elementType.getValueHandler();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/CollectionLikeType;getContentTypeHandler();;;@Override
    public Object getContentTypeHandler() {
        return _elementType.getTypeHandler();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;ReferenceType(Class<?>,TypeBindings,JavaType,JavaType[],JavaType,Object,Object,boolean);;;protected ReferenceType(Class<?> cls, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType refType,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        super(cls, bindings, superClass, superInts, refType.hashCode(),
                valueHandler, typeHandler, asStatic);
        _referencedType = refType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;ReferenceType(TypeBase,JavaType);;;protected ReferenceType(TypeBase base, JavaType refType)
    {
        super(base);
        _referencedType = refType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;upgradeFrom(JavaType,JavaType);;;public static ReferenceType upgradeFrom(JavaType baseType, JavaType refType) {
        if (refType == null) {
            throw new IllegalArgumentException("Missing referencedType");
        }
        // 19-Oct-2015, tatu: Not sure if and how other types could be used as base;
        //    will cross that bridge if and when need be
        if (baseType instanceof TypeBase) {
            return new ReferenceType((TypeBase) baseType, refType);
        }
        throw new IllegalArgumentException("Can not upgrade from an instance of "+baseType.getClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;construct(Class<?>,TypeBindings,JavaType,JavaType[],JavaType);;;public static ReferenceType construct(Class<?> cls, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType refType)
    {
        return new ReferenceType(cls, bindings, superClass, superInts,
                refType, null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;construct(Class<?>,JavaType);;;@Deprecated // since 2.7
    public static ReferenceType construct(Class<?> cls, JavaType refType) {
        return new ReferenceType(cls, TypeBindings.emptyBindings(),
                // !!! TODO: missing supertypes
                null, null, refType, null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        if (_referencedType == contentType) {
            return this;
        }
        return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,
                contentType, _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return new ReferenceType(rawType, _bindings,
                superClass, superInterfaces, _referencedType,
                _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;_narrow(Class<?>);;;    @Deprecated // since 2.7
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ReferenceType;getContentType();;;@Override
    public JavaType getContentType() {
        return _referencedType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeParser;parse(String);public JavaType parse(String canonical)
        throws IllegalArgumentException;;public JavaType parse(String canonical) throws IllegalArgumentException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeParser;parseType(MyTokenizer);;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;ClassStack(Class<?>);;;public ClassStack(Class<?> rootType) {
        this(null, rootType);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;ClassStack(ClassStack,Class<?>);;;private ClassStack(ClassStack parent, Class<?> curr) {
        _parent = parent;
        _current = curr;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;child(Class<?>);;;public ClassStack child(Class<?> cls) {
        return new ClassStack(this, cls);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;addSelfReference(ResolvedRecursiveType);;;public void addSelfReference(ResolvedRecursiveType ref)
    {
        if (_selfRefs == null) {
            _selfRefs = new ArrayList<ResolvedRecursiveType>();
        }
        _selfRefs.add(ref);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;resolveSelfReferences(JavaType);;;public void resolveSelfReferences(JavaType resolved)
    {
        if (_selfRefs != null) {
            for (ResolvedRecursiveType ref : _selfRefs) {
                ref.setReference(resolved);
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;find(Class<?>);;;public ClassStack find(Class<?> cls)
    {
        if (_current == cls) return this;
        for (ClassStack curr = _parent; curr != null; curr = curr._parent) {
            if (curr._current == cls) {
                return curr;
            }
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/ClassStack;toString();;;@Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[ClassStack (self-refs: ")
            .append((_selfRefs == null) ? "0" : String.valueOf(_selfRefs.size()))
            .append(')')
                    ;
        for (ClassStack curr = this; curr != null; curr = curr._parent) {
            sb.append(' ').append(curr._current.getName());
        }
        sb.append(']');
        return sb.toString();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapType;MapType(Class<?>,TypeBindings,JavaType,JavaType[],JavaType,JavaType,Object,Object,boolean);;;private MapType(Class<?> mapType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT,
            Object valueHandler, Object typeHandler, boolean asStatic) {
        super(mapType, bindings, superClass, superInts,
                keyT, valueT, valueHandler, typeHandler, asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapType;MapType(TypeBase,JavaType,JavaType);;;protected MapType(TypeBase base, JavaType keyT, JavaType valueT) {
        super(base, keyT, valueT);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapType;construct(Class<?>,TypeBindings,JavaType,JavaType[],JavaType,JavaType);;;public static MapType construct(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts,
            JavaType keyT, JavaType valueT) {
        return new MapType(rawType, bindings, superClass, superInts, keyT, valueT, null, null, false);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        if (_valueType == contentType) {
            return this;
        }
        return new MapType(_class, _bindings, _superClass, _superInterfaces,
                _keyType, contentType, _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapType;withKeyType(JavaType);;;@Override
    public MapType withKeyType(JavaType keyType) {
        if (keyType == _keyType) {
            return this;
        }
        return new MapType(_class, _bindings, _superClass, _superInterfaces,
                keyType, _valueType, _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return new MapType(rawType, bindings,
                superClass, superInterfaces, _keyType, _valueType,
                _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;MapLikeType(Class<?>,TypeBindings,JavaType,JavaType[],JavaType,JavaType,Object,Object,boolean);;;protected MapLikeType(Class<?> mapType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInts, JavaType keyT,
            JavaType valueT, Object valueHandler, Object typeHandler,
            boolean asStatic) {
        super(mapType, bindings, superClass, superInts, keyT.hashCode()
                ^ valueT.hashCode(), valueHandler, typeHandler, asStatic);
        _keyType = keyT;
        _valueType = valueT;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;MapLikeType(TypeBase,JavaType,JavaType);;;protected MapLikeType(TypeBase base, JavaType keyT, JavaType valueT) {
        super(base);
        _keyType = keyT;
        _valueType = valueT;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;upgradeFrom(JavaType,JavaType,JavaType);;;public static MapLikeType upgradeFrom(JavaType baseType, JavaType keyT,
            JavaType valueT) {
        // 19-Oct-2015, tatu: Not sure if and how other types could be used as
        // base;
        // will cross that bridge if and when need be
        if (baseType instanceof TypeBase) {
            return new MapLikeType((TypeBase) baseType, keyT, valueT);
        }
        throw new IllegalArgumentException(
                "Can not upgrade from an instance of " + baseType.getClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;withKeyType(JavaType);;;public MapLikeType withKeyType(JavaType keyType) {
        if (keyType == _keyType) {
            return this;
        }
        return new MapLikeType(_class, _bindings, _superClass,
                _superInterfaces, keyType, _valueType, _valueHandler,
                _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;withContentType(JavaType);;;@Override
    public JavaType withContentType(JavaType contentType) {
        if (_valueType == contentType) {
            return this;
        }
        return new MapLikeType(_class, _bindings, _superClass,
                _superInterfaces, _keyType, contentType, _valueHandler,
                _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;refine(Class<?>,TypeBindings,JavaType,JavaType[]);;;@Override
    public JavaType refine(Class<?> rawType, TypeBindings bindings,
            JavaType superClass, JavaType[] superInterfaces) {
        return new MapLikeType(rawType, bindings, superClass, superInterfaces,
                _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;isContainerType();    public boolean isContainerType() { return true; };;    public boolean isContainerType() {
        return true;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;isMapLikeType();    public boolean isMapLikeType() { return true; };;    public boolean isMapLikeType() {
        return true;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;getKeyType();    public JavaType getKeyType() { return _keyType; };;    public JavaType getKeyType() {
        return _keyType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;getContentType();    public JavaType getContentType() { return _valueType; };;    public JavaType getContentType() {
        return _valueType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;getContentValueHandler();;;@Override
    public Object getContentValueHandler() {
        return _valueType.getValueHandler();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;getContentTypeHandler();;;@Override
    public Object getContentTypeHandler() {
        return _valueType.getTypeHandler();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;getGenericSignature(StringBuilder);    public StringBuilder getGenericSignature(StringBuilder sb)
    {;;    public StringBuilder getGenericSignature(StringBuilder sb) {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;toString();    public String toString()
    {
        return "[map-like type; class "+_class.getName()+", "+_keyType+" -> "+_valueType+"]";;;    public String toString() {
        return "[map-like type; class " + _class.getName() + ", " + _keyType
                + " -> " + _valueType + "]";
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;equals(Object);    public boolean equals(Object o)
    {
        if (o == this) return true;
        if (o == null) return false;
        if (o.getClass() != getClass()) return false;;;    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (o == null)
            return false;
        if (o.getClass() != getClass())
            return false;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/MapLikeType;equals(Object);        return (_class == other._class)
            && _keyType.equals(other._keyType)
            && _valueType.equals(other._valueType);;;        return (_class == other._class) && _keyType.equals(other._keyType)
                && _valueType.equals(other._valueType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;TypeBase(Class<?>,TypeBindings,JavaType,JavaType[],int,Object,Object,boolean);;;protected TypeBase(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInts,
            int hash,
            Object valueHandler, Object typeHandler, boolean asStatic)
    {
        super(raw, hash, valueHandler, typeHandler, asStatic);
        _bindings = (bindings == null) ? NO_BINDINGS : bindings;
        _superClass = superClass;
        _superInterfaces = superInts;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;TypeBase(TypeBase);;;protected TypeBase(TypeBase base) {
        super(base);
        _superClass = base._superClass;
        _superInterfaces = base._superInterfaces;
        _bindings = base._bindings;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;getBindings();;;@Override
    public TypeBindings getBindings() {
        return _bindings;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;containedTypeCount();;;@Override
    public int containedTypeCount() {
        return _bindings.size();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;containedType(int);;;@Override
    public JavaType containedType(int index) {
        return _bindings.getBoundType(index);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;containedTypeName(int);;;@Override
    @Deprecated
    public String containedTypeName(int index) {
        return _bindings.getBoundName(index);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;getSuperClass();;;@Override
    public JavaType getSuperClass() {
        return _superClass;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;getInterfaces();;;@Override
    public List<JavaType> getInterfaces() {
        if (_superInterfaces == null) {
            return Collections.emptyList();
        }
        switch (_superInterfaces.length) {
        case 0:
            return Collections.emptyList();
        case 1:
            return Collections.singletonList(_superInterfaces[0]);
        }
        return Arrays.asList(_superInterfaces);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;findSuperType(Class<?>);;;@Override
    public final JavaType findSuperType(Class<?> rawTarget)
    {
        if (rawTarget == _class) {
            return this;
        }
        // Check super interfaces first:
        if (rawTarget.isInterface() && (_superInterfaces != null)) {
            for (int i = 0, count = _superInterfaces.length; i < count; ++i) {
                JavaType type = _superInterfaces[i].findSuperType(rawTarget);
                if (type != null) {
                    return type;
                }
            }
        }
        // and if not found, super class and its supertypes
        if (_superClass != null) {
            JavaType type = _superClass.findSuperType(rawTarget);
            if (type != null) {
                return type;
            }
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;findTypeParameters(Class<?>);;;@Override
    public JavaType[] findTypeParameters(Class<?> expType)
    {
        JavaType match = findSuperType(expType);
        if (match == null) {
            return NO_TYPES;
        }
        return match.getBindings().typeParameterArray();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/type/TypeBase;_bogusSuperClass(Class<?>);;;protected static JavaType _bogusSuperClass(Class<?> cls) {
        Class<?> parent = cls.getSuperclass();
        if (parent == null) {
            return null;
        }
        return TypeFactory.unknownType();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/module/SimpleDeserializers;findReferenceDeserializer(ReferenceType,DeserializationConfig,BeanDescription,TypeDeserializer,JsonDeserializer<?>);;;@Override
    public JsonDeserializer<?> findReferenceDeserializer(ReferenceType refType,
            DeserializationConfig config, BeanDescription beanDesc,
            TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer)
        throws JsonMappingException {
        // 21-Oct-2015, tatu: Unlikely this will really get used (reference types need more
        //    work, simple registration probably not sufficient). But whatever.
        return (_classMappings == null) ? null : _classMappings.get(new ClassKey(refType.getRawClass()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/node/ArrayNode;ArrayNode(JsonNodeFactory,List<JsonNode>);;;public ArrayNode(JsonNodeFactory nf, List<JsonNode> children) {
        super(nf);
        _children = children;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod;AnnotatedMethod(TypeResolutionContext,Method,AnnotationMap,AnnotationMap[]);;;public AnnotatedMethod(TypeResolutionContext ctxt, Method method,
            AnnotationMap classAnn, AnnotationMap[] paramAnnotations)
    {
        super(ctxt, classAnn, paramAnnotations);
        if (method == null) {
            throw new IllegalArgumentException("Can not construct AnnotatedMethod with null Method");
        }
        _method = method;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod;getType();;;@Override
    public JavaType getType() {
        return _typeContext.resolveType(_method.getGenericReturnType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod;getParameterType(int);;;@Override
    public JavaType getParameterType(int index) {
        Type[] types = _method.getGenericParameterTypes();
        if (index >= types.length) {
            return null;
        }
        return _typeContext.resolveType(types[index]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/TypeResolutionContext;resolveType(Type);;;public JavaType resolveType(Type t);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/TypeResolutionContext;Basic(TypeFactory,TypeBindings);;;public Basic(TypeFactory tf, TypeBindings b) {
            _typeFactory = tf;
            _bindings = b;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/TypeResolutionContext;resolveType(Type);;;@Override
        public JavaType resolveType(Type type) {
            return _typeFactory.constructType(type, _bindings);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/BasicClassIntrospector;_findStdJdkCollectionDesc(MapperConfig<?>,JavaType);;;protected BasicBeanDescription _findStdJdkCollectionDesc(MapperConfig<?> cfg, JavaType type)
    {
        if (_isStdJDKCollection(type)) {
            AnnotatedClass ac = AnnotatedClass.construct(type, cfg);
            return BasicBeanDescription.forOtherUse(cfg, type, ac);
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap;AnnotationMap(HashMap<Class<?>,Annotation>);;;private AnnotationMap(HashMap<Class<?>,Annotation> a) {
        _annotations = a;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap;has(Class<?>);;;public boolean has(Class<?> cls)
    {
        if (_annotations == null) {
            return false;
        }
        return _annotations.containsKey(cls);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationMap;hasOneOf(Class<?extendsAnnotation>[]);;;public boolean hasOneOf(Class<? extends Annotation>[] annoClasses) {
        if (_annotations != null) {
            for (int i = 0, end = annoClasses.length; i < end; ++i) {
                if (_annotations.containsKey(annoClasses[i])) {
                    return true;
                }
            }
        }
        return false;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;POJOPropertyBuilder(MapperConfig<?>,AnnotationIntrospector,boolean,PropertyName);;;public POJOPropertyBuilder(MapperConfig<?> config, AnnotationIntrospector ai,
            boolean forSerialization, PropertyName internalName) {
        this(config, ai, forSerialization, internalName, internalName);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;POJOPropertyBuilder(MapperConfig<?>,AnnotationIntrospector,boolean,PropertyName,PropertyName);;;protected POJOPropertyBuilder(MapperConfig<?> config, AnnotationIntrospector ai,
            boolean forSerialization, PropertyName internalName, PropertyName name)
    {
        _config = config;
        _annotationIntrospector = ai;
        _internalName = internalName;
        _name = name;
        _forSerialization = forSerialization;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;POJOPropertyBuilder(POJOPropertyBuilder,PropertyName);;;        _config = src._config;
        _annotationIntrospector = src._annotationIntrospector;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;getSetter();;;            AnnotatedMethod nextM = next.value;
            AnnotatedMethod currM = curr.value;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;getSetter();;;            // 11-Dec-2015, tatu: As per [databind#1033] allow pluggable conflict resolution
            if (_annotationIntrospector != null) {
                AnnotatedMethod pref = _annotationIntrospector.resolveSetterConflict(_config,
                        currM, nextM);
                
                // note: should be one of nextM/currM; but no need to check
                if (pref == currM) {
                    continue;
                }
                if (pref == nextM) {
                    curr = next;
                    continue;
                }
            }
            
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder;_mergeAnnotations(int,Linked<?extendsAnnotatedMember>);private AnnotationMap _mergeAnnotations(int index, Linked<? extends AnnotatedMember>... nodes);;private AnnotationMap _mergeAnnotations(int index,
            Linked<? extends AnnotatedMember>... nodes)
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription;instantiateBean(boolean);    public Object instantiateBean(boolean fixAccess)
    {;;    public Object instantiateBean(boolean fixAccess) {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription;findPropertyInclusion(JsonInclude.Value);;;@Override
    public JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue) {
        if (_annotationIntrospector != null) {
            JsonInclude.Value incl = _annotationIntrospector.findPropertyInclusion(_classInfo);
            if (incl != null) {
                return defValue.withOverrides(incl);
            }
        }
        return defValue;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription;findClassDescription();;;@Override
    public String findClassDescription() {
        return (_annotationIntrospector == null) ?
                null : _annotationIntrospector.findClassDescription(_classInfo);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findClassDescription(AnnotatedClass);;;@Override
    public String findClassDescription(AnnotatedClass ac) {
        String str = _primary.findClassDescription(ac);
        if ((str == null) || str.isEmpty()) {
            str = _secondary.findClassDescription(ac);
        }
        return str;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findPropertyInclusion(Annotated);    public JsonInclude.Value findPropertyInclusion(Annotated a) {;;    public JsonInclude.Value findPropertyInclusion(Annotated a)
    {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;resolveSetterConflict(MapperConfig<?>,AnnotatedMethod,AnnotatedMethod);;;@Override // since 2.7
    public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config,
            AnnotatedMethod setter1, AnnotatedMethod setter2)
    {
        AnnotatedMethod res = _primary.resolveSetterConflict(config, setter1, setter2);
        if (res == null) {
            res = _secondary.resolveSetterConflict(config, setter1, setter2);
        }
        return res;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;refineSerializationType(MapperConfig<?>,Annotated,JavaType);;;@Override // since 2.7
    public JavaType refineSerializationType(MapperConfig<?> config,
            Annotated a, JavaType baseType) throws JsonMappingException
    {
        JavaType t = _secondary.refineSerializationType(config, a, baseType);
        return _primary.refineSerializationType(config, a, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findSerializationType(Annotated);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findSerializationKeyType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findSerializationContentType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findEnumValues(Class<?>,Enum<?>[],String[]);;;@Override
    public  String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {
        // reverse order to give _primary higher precedence
        names = _secondary.findEnumValues(enumType, enumValues, names);
        names = _primary.findEnumValues(enumType, enumValues, names);
        return names;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;refineDeserializationType(MapperConfig<?>,Annotated,JavaType);;;@Override
    public JavaType refineDeserializationType(MapperConfig<?> config,
            Annotated a, JavaType baseType) throws JsonMappingException
    {
        JavaType t = _secondary.refineDeserializationType(config, a, baseType);
        return _primary.refineDeserializationType(config, a, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findDeserializationType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findDeserializationKeyType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotationIntrospectorPair;findDeserializationContentType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember;VirtualAnnotatedMember(TypeResolutionContext,Class<?>,String,Class<?>);;;public VirtualAnnotatedMember(TypeResolutionContext typeContext, Class<?> declaringClass,
            String name, Class<?> rawType)
    {
        super(typeContext, /* AnnotationMap*/ null);
        _declaringClass = declaringClass;
        _rawType = rawType;
        _name = name;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/VirtualAnnotatedMember;getType();;;@Override
    public JavaType getType() {
        return _typeContext.resolveType(_rawType);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember;AnnotatedMember(TypeResolutionContext,AnnotationMap);;;protected AnnotatedMember(TypeResolutionContext ctxt, AnnotationMap annotations) {
        super();
        _typeContext = ctxt;
        _annotations = annotations;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember;getTypeContext();;;public TypeResolutionContext getTypeContext() {
        return _typeContext;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember;getAnnotation(Class<A>);;;@Override
    public final <A extends Annotation> A getAnnotation(Class<A> acls) {
        if (_annotations == null) {
            return null;
        }
        return _annotations.get(acls);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember;hasAnnotation(Class<?>);;;@Override
    public final boolean hasAnnotation(Class<?> acls) {
        if (_annotations == null) {
            return false;
        }
        return _annotations.has(acls);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember;hasOneOf(Class<?extendsAnnotation>[]);;;@Override
    public boolean hasOneOf(Class<? extends Annotation>[] annoClasses) {
        if (_annotations == null) {
            return false;
        }
        return _annotations.hasOneOf(annoClasses);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMember;fixAccess(boolean);;;public final void fixAccess(boolean force) {
        ClassUtil.checkAndFixAccess(getMember(), force);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;ConcreteBeanPropertyBase(PropertyMetadata);;;protected ConcreteBeanPropertyBase(PropertyMetadata md) {
        _metadata = (md == null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL : md;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;ConcreteBeanPropertyBase(ConcreteBeanPropertyBase);;;protected ConcreteBeanPropertyBase(ConcreteBeanPropertyBase src) {
        _metadata = src._metadata;
        _format = src._format;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;isRequired();;;@Override
    public boolean isRequired() { return _metadata.isRequired(); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;getMetadata();;;@Override
    public PropertyMetadata getMetadata() { return _metadata; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;isVirtual();;;@Override
    public boolean isVirtual() { return false; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;findFormatOverrides(AnnotationIntrospector);;;@Override
    @Deprecated
    public final JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) {
        JsonFormat.Value f = _format;
        if (f == null) { // not yet looked up, do that
            if (intr != null) {
                AnnotatedMember member = getMember();
                if (member != null) {
                    f = intr.findFormat(member);
                }
            }
            if (f == null) {
                f = EMPTY_FORMAT;
            }
        }
        return f;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;findPropertyFormat(MapperConfig<?>,Class<?>);;;@Override
    public JsonFormat.Value findPropertyFormat(MapperConfig<?> config, Class<?> baseType)
    {
        // 08-Oct-2015, tatu: Unlike with Format, let's not cache locally here, for now?
        JsonFormat.Value v0 = config.getDefaultPropertyFormat(baseType);
        AnnotationIntrospector intr = config.getAnnotationIntrospector();
        AnnotatedMember member = getMember();
        if ((intr == null) || (member == null)) {
            return v0;
        }
        JsonFormat.Value v = intr.findFormat(member);
        if (v == null) {
            return v0;
        }
        return v0.withOverrides(v);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase;findPropertyInclusion(MapperConfig<?>,Class<?>);;;@Override
    public JsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Class<?> baseType)
    {
        JsonInclude.Value v0 = config.getDefaultPropertyInclusion(baseType);
        AnnotationIntrospector intr = config.getAnnotationIntrospector();
        AnnotatedMember member = getMember();
        if ((intr == null) || (member == null)) {
            return v0;
        }
        JsonInclude.Value v = intr.findPropertyInclusion(member);
        if (v == null) {
            return v0;
        }
        return v0.withOverrides(v);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;readResolve();;;protected Object readResolve() {
        if (_annotationsInside == null) {
            _annotationsInside = new LRUMap<Class<?>,Boolean>(48, 48);
        }
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findEnumValues(Class<?>,Enum<?>[],String[]);;;@Override // since 2.7
    public String[] findEnumValues(Class<?> enumType, Enum<?>[] enumValues, String[] names) {
        HashMap<String,String> expl = null;
        for (Field f : ClassUtil.getDeclaredFields(enumType)) {
            if (!f.isEnumConstant()) {
                continue;
            }
            JsonProperty prop = f.getAnnotation(JsonProperty.class);
            if (prop == null) {
                continue;
            }
            String n = prop.value();
            if (n.isEmpty()) {
                continue;
            }
            if (expl == null) {
                expl = new HashMap<String,String>();
            }
            expl.put(f.getName(), n);
        }
        // and then stitch them together if and as necessary
        if (expl != null) {
            for (int i = 0, end = enumValues.length; i < end; ++i) {
                String defName = enumValues[i].name();
                names[i] = expl.get(defName);
            }
        }
        return names;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findClassDescription(AnnotatedClass);;;@Override
    public String findClassDescription(AnnotatedClass ac) {
        JsonClassDescription ann = _findAnnotation(ac, JsonClassDescription.class);
        return (ann == null) ? null : ann.value();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;resolveSetterConflict(MapperConfig<?>,AnnotatedMethod,AnnotatedMethod);;;@Override // since 2.7
    public AnnotatedMethod resolveSetterConflict(MapperConfig<?> config,
            AnnotatedMethod setter1, AnnotatedMethod setter2)
    {
        Class<?> cls1 = setter1.getRawParameterType(0);
        Class<?> cls2 = setter2.getRawParameterType(0);
        
        // First: prefer primitives over non-primitives
        // 11-Dec-2015, tatu: TODO, perhaps consider wrappers for primitives too?
        if (cls1.isPrimitive()) {
            if (!cls2.isPrimitive()) {
                return setter1;
            }
        } else if (cls2.isPrimitive()) {
            return setter2;
        }
        
        if (cls1 == String.class) {
            if (cls2 != String.class) {
                return setter1;
            }
        } else if (cls2 == String.class) {
            return setter2;
        }

        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findSerializationInclusionForContent(Annotated,JsonInclude.Include);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findSerializationType(Annotated);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findSerializationKeyType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findSerializationContentType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findDeserializationContentType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findDeserializationKeyType(Annotated,JavaType);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;_findConstructorName(Annotated);;;protected PropertyName _findConstructorName(Annotated a)
    {
        if (a instanceof AnnotatedParameter) {
            AnnotatedParameter p = (AnnotatedParameter) a;
            AnnotatedWithParams ctor = p.getOwner();

            if (ctor != null) {
                if (_jdk7Helper != null) {
                    PropertyName name = _jdk7Helper.findConstructorName(p);
                    if (name != null) {
                        return name;
                    }
                }
            }
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;Java7Support();;;@SuppressWarnings("unused") // compiler warns; called via Reflection
        public Java7Support() {
            // Trigger loading of annotations that only JDK 7 has...
            Class<?> cls = Transient.class;
            cls = ConstructorProperties.class;
            _bogus = cls;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findTransient(Annotated);;;public Boolean findTransient(Annotated a) {
            Transient t = a.getAnnotation(Transient.class);
            if (t != null) {
                return t.value();
            }
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;hasCreatorAnnotation(Annotated);;;public Boolean hasCreatorAnnotation(Annotated a) {
            ConstructorProperties props = a.getAnnotation(ConstructorProperties.class);
            // 08-Nov-2015, tatu: One possible check would be to ensure there is at least
            //    one name iff constructor has arguments. But seems unnecessary for now.
            if (props != null) {
                return Boolean.TRUE;
            }
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector;findConstructorName(AnnotatedParameter);;;public PropertyName findConstructorName(AnnotatedParameter p)
        {
            AnnotatedWithParams ctor = p.getOwner();
            if (ctor != null) {
                ConstructorProperties props = ctor.getAnnotation(ConstructorProperties.class);
                if (props != null) {
                    String[] names = props.value();
                    int ix = p.getIndex();
                    if (ix < names.length) {
                        return PropertyName.construct(names[ix]);
                    }
                }
            }
            return null;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField;AnnotatedField(TypeResolutionContext,Field,AnnotationMap);;;public AnnotatedField(TypeResolutionContext contextClass, Field field, AnnotationMap annMap)
    {
        super(contextClass, annMap);
        _field = field;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField;getType();;;@Override
    public JavaType getType() {
        return _typeContext.resolveType(_field.getGenericType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor;AnnotatedConstructor(TypeResolutionContext,Constructor<?>,AnnotationMap,AnnotationMap[]);;;public AnnotatedConstructor(TypeResolutionContext ctxt, Constructor<?> constructor,
            AnnotationMap classAnn, AnnotationMap[] paramAnn)
    {
        super(ctxt, classAnn, paramAnn);
        if (constructor == null) {
            throw new IllegalArgumentException("Null constructor not allowed");
        }
        _constructor = constructor;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor;getType();;;@Override
    public JavaType getType() {
        return _typeContext.resolveType(getRawType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor;getParameterType(int);;;@Override
    public JavaType getParameterType(int index) {
        Type[] types = _constructor.getGenericParameterTypes();
        if (index >= types.length) {
            return null;
        }
        return _typeContext.resolveType(types[index]);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams;AnnotatedWithParams(TypeResolutionContext,AnnotationMap,AnnotationMap[]);;;protected AnnotatedWithParams(TypeResolutionContext ctxt, AnnotationMap annotations, AnnotationMap[] paramAnnotations)
    {
        super(ctxt, annotations);
        _paramAnnotations = paramAnnotations;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedWithParams;getParameterType(int);;;public abstract JavaType getParameterType(int index);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter;AnnotatedParameter(AnnotatedWithParams,JavaType,AnnotationMap,int);;;public AnnotatedParameter(AnnotatedWithParams owner, JavaType type,  AnnotationMap annotations,
            int index)
    {
        super((owner == null) ? null : owner.getTypeContext(), annotations);
        _owner = owner;
        _type = type;
        _index = index;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedParameter;getType();;;@Override
    public JavaType getType() {
        return _typeContext.resolveType(_type);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;AnnotatedClass(JavaType,Class<?>,TypeBindings,List<JavaType>,AnnotationIntrospector,MixInResolver,TypeFactory,AnnotationMap);;;private AnnotatedClass(JavaType type, Class<?> rawType, TypeBindings bindings,
            List<JavaType> superTypes,
            AnnotationIntrospector aintr, MixInResolver mir, TypeFactory tf,
            AnnotationMap classAnnotations)
    {
        _type = type;
        _class = rawType;
        _bindings = bindings;
        _superTypes = superTypes;
        _annotationIntrospector = aintr;
        _typeFactory = tf;
        _mixInResolver = mir;
        _primaryMixIn = (_mixInResolver == null) ? null
            : _mixInResolver.findMixInClassFor(_class);
        _classAnnotations = classAnnotations;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;construct(JavaType,MapperConfig<?>);;;public static AnnotatedClass construct(JavaType type, MapperConfig<?> config) {
        AnnotationIntrospector intr = config.isAnnotationProcessingEnabled()
                ? config.getAnnotationIntrospector() : null;
        Class<?> raw = type.getRawClass();
        return new AnnotatedClass(type, raw, type.getBindings(),
                ClassUtil.findSuperTypes(type, null, false), intr,
                (MixInResolver) config, config.getTypeFactory(), null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;construct(JavaType,MapperConfig<?>,MixInResolver);;;public static AnnotatedClass construct(JavaType type, MapperConfig<?> config,
            MixInResolver mir)
    {
        AnnotationIntrospector intr = config.isAnnotationProcessingEnabled()
                ? config.getAnnotationIntrospector() : null;
        Class<?> raw = type.getRawClass();
        return new AnnotatedClass(type, raw, type.getBindings(),
                ClassUtil.findSuperTypes(type, null, false),
                intr, mir, config.getTypeFactory(), null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;constructWithoutSuperTypes(Class<?>,MapperConfig<?>);;;public static AnnotatedClass constructWithoutSuperTypes(Class<?> cls, MapperConfig<?> config)
    {
        if (config == null) {
            return new AnnotatedClass(null, cls, TypeBindings.emptyBindings(),
                    Collections.<JavaType>emptyList(), null, null, null, null);
        }
        AnnotationIntrospector intr = config.isAnnotationProcessingEnabled()
                ? config.getAnnotationIntrospector() : null;
        return new AnnotatedClass(null, cls, TypeBindings.emptyBindings(),
                Collections.<JavaType>emptyList(), intr, (MixInResolver) config, config.getTypeFactory(), null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;constructWithoutSuperTypes(Class<?>,MapperConfig<?>,MixInResolver);;;public static AnnotatedClass constructWithoutSuperTypes(Class<?> cls, MapperConfig<?> config,
            MixInResolver mir)
    {
        if (config == null) {
            return new AnnotatedClass(null, cls, TypeBindings.emptyBindings(),
                    Collections.<JavaType>emptyList(), null, null, null, null);
        }
        AnnotationIntrospector intr = config.isAnnotationProcessingEnabled()
                ? config.getAnnotationIntrospector() : null;
        return new AnnotatedClass(null, cls, TypeBindings.emptyBindings(),
                Collections.<JavaType>emptyList(), intr, mir, config.getTypeFactory(), null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;resolveType(Type);;;@Override
    public JavaType resolveType(Type type) {
        return _typeFactory.constructType(type, _bindings);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;hasAnnotation(Class<?>);;;@Override
    public boolean hasAnnotation(Class<?> acls) {
        return _classAnnotations().has(acls);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;hasOneOf(Class<?extendsAnnotation>[]);;;@Override
    public boolean hasOneOf(Class<? extends Annotation>[] annoClasses) {
        return _classAnnotations().hasOneOf(annoClasses);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;getType();;;@Override
    public JavaType getType() {
        return _type;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_classAnnotations();;;private AnnotationMap _classAnnotations() {
        AnnotationMap anns = _classAnnotations;
        if (anns == null) {
            // 06-Dec-2015, tatu: yes, double-locking, typically not a good choice.
            //  But for typical usage pattern here (and with JVM 7 and above) is
            //  a reasonable choice to avoid non-common but existing race condition
            //  from root name lookup style usage
            // Also note that race condition stems from caching only used for loading
            // where just class annotations are needed
            synchronized (this) {
                anns = _classAnnotations;
                if (anns == null) {
                    anns = _resolveClassAnnotations();
                    _classAnnotations = anns;
                }
            }
        }
        return anns;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_resolveClassAnnotations();;;private AnnotationMap _resolveClassAnnotations()
    {
        AnnotationMap ca = new AnnotationMap();
        // Should skip processing if annotation processing disabled
        if (_annotationIntrospector != null) {
            // add mix-in annotations first (overrides)
            if (_primaryMixIn != null) {
                _addClassMixIns(ca, _class, _primaryMixIn);
            }
            // first, annotations from the class itself:
            _addAnnotationsIfNotPresent(ca,
                    ClassUtil.findClassAnnotations(_class));
    
            // and then from super types
            for (JavaType type : _superTypes) {
                // and mix mix-in annotations in-between
                _addClassMixIns(ca, type);
                _addAnnotationsIfNotPresent(ca,
                        ClassUtil.findClassAnnotations(type.getRawClass()));
            }
            /* and finally... any annotations there might be for plain
             * old Object.class: separate because for all other purposes
             * it is just ignored (not included in super types)
             */
            /* 12-Jul-2009, tatu: Should this be done for interfaces too?
             *   For now, yes, seems useful for some cases, and not harmful for any?
             */
            _addClassMixIns(ca, Object.class);
        }
        return ca;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_addClassMixIns(AnnotationMap,JavaType);;;protected void _addClassMixIns(AnnotationMap annotations, JavaType target)
    {
        if (_mixInResolver != null) {
            final Class<?> toMask = target.getRawClass();
            _addClassMixIns(annotations, toMask, _mixInResolver.findMixInClassFor(toMask));
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_addClassMixIns(AnnotationMap,Class<?>,Class<?>);                                   Class<?> mixin);;            Class<?> mixin)
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_addMemberMethods(Class<?>,TypeResolutionContext,AnnotatedMethodMap,Class<?>,AnnotatedMethodMap);;;protected void _addMemberMethods(Class<?> cls, TypeResolutionContext typeContext,
            AnnotatedMethodMap methods,
            Class<?> mixInCls, AnnotatedMethodMap mixIns)
    {
        // first, mixIns, since they have higher priority then class methods
        if (mixInCls != null) {
            _addMethodMixIns(cls, methods, mixInCls, mixIns);
        }
        if (cls == null) { // just so caller need not check when passing super-class
            return;
        }
        // then methods from the class itself
        for (Method m : _findClassMethods(cls)) {
            if (!_isIncludableMemberMethod(m)) {
                continue;
            }
            AnnotatedMethod old = methods.find(m);
            if (old == null) {
                AnnotatedMethod newM = _constructMethod(m, typeContext);
                methods.add(newM);
                // Ok, but is there a mix-in to connect now?
                old = mixIns.remove(m);
                if (old != null) {
                    _addMixOvers(old.getAnnotated(), newM, false);
                }
            } else {
                /* If sub-class already has the method, we only want to augment
                 * annotations with entries that are not masked by sub-class.
                 */
                _addMixUnders(m, old);

                /* 06-Jan-2010, tatu: [JACKSON-450] Except that if method we saw first is
                 *   from an interface, and we now find a non-interface definition, we should
                 *   use this method, but with combination of annotations.
                 *   This helps (or rather, is essential) with JAXB annotations and
                 *   may also result in faster method calls (interface calls are slightly
                 *   costlier than regular method calls)
                 */
                if (old.getDeclaringClass().isInterface() && !m.getDeclaringClass().isInterface()) {
                    methods.add(old.withMethod(m));
                }
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_findFields(JavaType,TypeResolutionContext,Map<String,AnnotatedField>);;;protected Map<String,AnnotatedField> _findFields(JavaType type,
            TypeResolutionContext typeContext, Map<String,AnnotatedField> fields)
    {
        /* First, a quick test: we only care for regular classes (not
         * interfaces, primitive types etc), except for Object.class.
         * A simple check to rule out other cases is to see if there
         * is a super class or not.
         */
        JavaType parent = type.getSuperClass();
        if (parent != null) {
            final Class<?> cls = type.getRawClass();
            // Let's add super-class' fields first, then ours.
            /* 21-Feb-2010, tatu: Need to handle masking: as per [JACKSON-226]
             *    we otherwise get into trouble...
             */
            fields = _findFields(parent,
                    new TypeResolutionContext.Basic(_typeFactory, parent.getBindings()),
                    fields);
            for (Field f : ClassUtil.getDeclaredFields(cls)) {
                // static fields not included (transients are at this point, filtered out later)
                if (!_isIncludableField(f)) {
                    continue;
                }
                /* Ok now: we can (and need) not filter out ignorable fields
                 * at this point; partly because mix-ins haven't been
                 * added, and partly because logic can be done when
                 * determining get/settability of the field.
                 */
                if (fields == null) {
                    fields = new LinkedHashMap<String,AnnotatedField>();
                }
                fields.put(f.getName(), _constructField(f, typeContext));
            }
            // And then... any mix-in overrides?
            if (_mixInResolver != null) {
                Class<?> mixin = _mixInResolver.findMixInClassFor(cls);
                if (mixin != null) {
                    _addFieldMixIns(mixin, cls, fields);
                }
            }
        }
        return fields;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_constructMethod(Method,TypeResolutionContext);;;protected AnnotatedMethod _constructMethod(Method m, TypeResolutionContext typeContext)
    {
        /* note: parameter annotations not used for regular (getter, setter)
         * methods; only for creator methods (static factory methods)
         * -- at least not yet!
         */
        if (_annotationIntrospector == null) { // when annotation processing is disabled
            return new AnnotatedMethod(typeContext, m, _emptyAnnotationMap(), null);
        }
        return new AnnotatedMethod(typeContext, m, _collectRelevantAnnotations(m.getDeclaredAnnotations()), null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_constructDefaultConstructor(ClassUtil.Ctor,TypeResolutionContext);;;protected AnnotatedConstructor _constructDefaultConstructor(ClassUtil.Ctor ctor,
            TypeResolutionContext typeContext)
    {
        if (_annotationIntrospector == null) { // when annotation processing is disabled
            return new AnnotatedConstructor(typeContext, ctor.getConstructor(), _emptyAnnotationMap(), NO_ANNOTATION_MAPS);
        }
        return new AnnotatedConstructor(typeContext, ctor.getConstructor(),
                _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), NO_ANNOTATION_MAPS);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_constructNonDefaultConstructor(ClassUtil.Ctor,TypeResolutionContext);;;protected AnnotatedConstructor _constructNonDefaultConstructor(ClassUtil.Ctor ctor,
            TypeResolutionContext typeContext)
    {
        final int paramCount = ctor.getParamCount();
        if (_annotationIntrospector == null) { // when annotation processing is disabled
            return new AnnotatedConstructor(typeContext, ctor.getConstructor(),
                    _emptyAnnotationMap(), _emptyAnnotationMaps(paramCount));
        }

        /* [JACKSON-701]: Looks like JDK has discrepancy, whereas annotations for implicit 'this'
         * (for non-static inner classes) are NOT included, but type is? Strange, sounds like
         * a bug. Alas, we can't really fix that...
         */
        if (paramCount == 0) { // no-arg default constructors, can simplify slightly
            return new AnnotatedConstructor(typeContext, ctor.getConstructor(),
                    _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), NO_ANNOTATION_MAPS);
        }
        // Also: [JACKSON-757] (enum value constructors)
        AnnotationMap[] resolvedAnnotations;
        Annotation[][] paramAnns = ctor.getParameterAnnotations();
        if (paramCount != paramAnns.length) {
            // Limits of the work-around (to avoid hiding real errors):
            // first, only applicable for member classes and then either:

            resolvedAnnotations = null;
            Class<?> dc = ctor.getDeclaringClass();
            // (a) is enum, which have two extra hidden params (name, index)
            if (dc.isEnum() && (paramCount == paramAnns.length + 2)) {
                Annotation[][] old = paramAnns;
                paramAnns = new Annotation[old.length+2][];
                System.arraycopy(old, 0, paramAnns, 2, old.length);
                resolvedAnnotations = _collectRelevantAnnotations(paramAnns);
            } else if (dc.isMemberClass()) {
                // (b) non-static inner classes, get implicit 'this' for parameter, not  annotation
                if (paramCount == (paramAnns.length + 1)) {
                    // hack attack: prepend a null entry to make things match
                    Annotation[][] old = paramAnns;
                    paramAnns = new Annotation[old.length+1][];
                    System.arraycopy(old, 0, paramAnns, 1, old.length);
                    resolvedAnnotations = _collectRelevantAnnotations(paramAnns);
                }
            }
            if (resolvedAnnotations == null) {
                throw new IllegalStateException("Internal error: constructor for "+ctor.getDeclaringClass().getName()
                        +" has mismatch: "+paramCount+" parameters; "+paramAnns.length+" sets of annotations");
            }
        } else {
            resolvedAnnotations = _collectRelevantAnnotations(paramAnns);
        }
        return new AnnotatedConstructor(typeContext, ctor.getConstructor(),
                _collectRelevantAnnotations(ctor.getDeclaredAnnotations()), resolvedAnnotations);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_constructCreatorMethod(Method,TypeResolutionContext);;;protected AnnotatedMethod _constructCreatorMethod(Method m, TypeResolutionContext typeContext)
    {
        final int paramCount = m.getParameterTypes().length;
        if (_annotationIntrospector == null) { // when annotation processing is disabled
            return new AnnotatedMethod(typeContext, m, _emptyAnnotationMap(), _emptyAnnotationMaps(paramCount));
        }
        if (paramCount == 0) { // common enough we can slightly optimize
            return new AnnotatedMethod(typeContext, m, _collectRelevantAnnotations(m.getDeclaredAnnotations()),
                    NO_ANNOTATION_MAPS);
        }
        return new AnnotatedMethod(typeContext, m, _collectRelevantAnnotations(m.getDeclaredAnnotations()),
                                   _collectRelevantAnnotations(m.getParameterAnnotations()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_constructField(Field,TypeResolutionContext);;;protected AnnotatedField _constructField(Field f, TypeResolutionContext typeContext)
    {
        if (_annotationIntrospector == null) { // when annotation processing is disabled
            return new AnnotatedField(typeContext, f, _emptyAnnotationMap());
        }
        return new AnnotatedField(typeContext, f, _collectRelevantAnnotations(f.getDeclaredAnnotations()));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_findClassMethods(Class<?>);            if(loader == null){;;            if (loader == null){
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated;hasAnnotation(Class<?>);;;public abstract boolean hasAnnotation(Class<?> acls);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated;hasOneOf(Class<?extendsAnnotation>[]);;;public abstract boolean hasOneOf(Class<? extends Annotation>[] annoClasses);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/introspect/Annotated;getType();;;public abstract JavaType getType();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;StdDateFormat(TimeZone,Locale,Boolean);;;protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient) {
        _timezone = tz;
        _locale = loc;
        _lenient = lenient;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;setLenient(boolean);;;@Override // since 2.7
    public void setLenient(boolean enabled) {
        Boolean newValue = enabled;
        if (_lenient != newValue) {
            _lenient = newValue;
            // and since leniency settings may have been used:
            _clearFormats();
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;isLenient();;;@Override // since 2.7
    public boolean isLenient() {
        if (_lenient == null) {
            // default is, I believe, true
            return true;
        }
        return _lenient.booleanValue();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;parseAsISO8601(String,ParsePosition,boolean);;;protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors)
            throws ParseException
    {
        /* 21-May-2009, tatu: DateFormat has very strict handling of
         * timezone  modifiers for ISO-8601. So we need to do some scrubbing.
         */

        /* First: do we have "zulu" format ('Z' == "UTC")? If yes, that's
         * quite simple because we already set date format timezone to be
         * UTC, and hence can just strip out 'Z' altogether
         */
        int len = dateStr.length();
        char c = dateStr.charAt(len-1);
        DateFormat df;
        String formatStr;

        // Need to support "plain" date...
        if (len <= 10 && Character.isDigit(c)) {
            df = _formatPlain;
            formatStr = DATE_FORMAT_STR_PLAIN;
            if (df == null) {
                df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr,
                        _timezone, _locale, _lenient);
            }
        } else if (c == 'Z') {
            df = _formatISO8601_z;
            formatStr = DATE_FORMAT_STR_ISO8601_Z;
            if (df == null) {
                df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,
                        _timezone, _locale, _lenient);
            }
            // may be missing milliseconds... if so, add
            if (dateStr.charAt(len-4) == ':') {
                StringBuilder sb = new StringBuilder(dateStr);
                sb.insert(len-1, ".000");
                dateStr = sb.toString();
            }
        } else {
            // Let's see if we have timezone indicator or not...
            if (hasTimeZone(dateStr)) {
                c = dateStr.charAt(len-3);
                if (c == ':') { // remove optional colon
                    // remove colon
                    StringBuilder sb = new StringBuilder(dateStr);
                    sb.delete(len-3, len-2);
                    dateStr = sb.toString();
                } else if (c == '+' || c == '-') { // missing minutes
                    // let's just append '00'
                    dateStr += "00";
                }
                // Milliseconds partial or missing; and even seconds are optional
                len = dateStr.length();
                // remove 'T', '+'/'-' and 4-digit timezone-offset
                int timeLen = len - dateStr.lastIndexOf('T') - 6;
                if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss
                    int offset = len - 5; // insertion offset, before tz-offset
                    StringBuilder sb = new StringBuilder(dateStr);
                    switch (timeLen) {
                    case 11:
                        sb.insert(offset, '0'); break;
                    case 10:
                        sb.insert(offset, "00"); break;
                    case 9: // is this legal? (just second fraction marker)
                        sb.insert(offset, "000"); break;
                    case 8:
                        sb.insert(offset, ".000"); break;
                    case 7: // not legal to have single-digit second
                        break;
                    case 6: // probably not legal, but let's allow
                        sb.insert(offset, "00.000");
                    case 5: // is legal to omit seconds
                        sb.insert(offset, ":00.000");
                    }
                    dateStr = sb.toString();
                }
                df = _formatISO8601;
                formatStr = DATE_FORMAT_STR_ISO8601;
                if (_formatISO8601 == null) {
                    df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr,
                            _timezone, _locale, _lenient);
                }
            } else {
                // If not, plain date. Easiest to just patch 'Z' in the end?
                StringBuilder sb = new StringBuilder(dateStr);
                // And possible also millisecond part if missing
                int timeLen = len - dateStr.lastIndexOf('T') - 1;
                if (timeLen < 12) { // missing, or partial
                    switch (timeLen) {
                    case 11: sb.append('0');
                    case 10: sb.append('0');
                    case 9: sb.append('0');
                        break;
                    default:
                        sb.append(".000");
                    }
                }
                sb.append('Z');
                dateStr = sb.toString();
                df = _formatISO8601_z;
                formatStr = DATE_FORMAT_STR_ISO8601_Z;
                if (df == null) {
                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,
                            _timezone, _locale, _lenient);
                }
            }
        }
        Date dt = df.parse(dateStr, pos);
        // 22-Dec-2015, tatu: With non-lenient, may get null
        if (dt == null) {
            throw new ParseException
            (String.format("Can not parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)",
                           dateStr, formatStr, _lenient),
               pos.getErrorIndex());
        }
        return dt;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;_cloneFormat(DateFormat,String,TimeZone,Locale,Boolean);;;private final static DateFormat _cloneFormat(DateFormat df, String format,
            TimeZone tz, Locale loc, Boolean lenient)
    {
        if (!loc.equals(DEFAULT_LOCALE)) {
            df = new SimpleDateFormat(format, loc);
            df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz);
        } else {
            df = (DateFormat) df.clone();
            if (tz != null) {
                df.setTimeZone(tz);
            }
        }
        if (lenient != null) {
            df.setLenient(lenient.booleanValue());
        }
        return df;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat;_clearFormats();;;protected void _clearFormats() {
        _formatRFC1123 = null;
        _formatISO8601 = null;
        _formatISO8601_z = null;
        _formatPlain = null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/StdConverter;_findConverterType(TypeFactory);;;protected JavaType _findConverterType(TypeFactory tf) {
        JavaType thisType = tf.constructType(getClass());
        JavaType convType = thisType.findSuperType(Converter.class);
        if (convType == null || convType.containedTypeCount() < 2) {
            throw new IllegalStateException("Can not find OUT type parameter for Converter of type "+getClass().getName());
        }
        return convType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer;setFeatureMask(int);;;    @Deprecated
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/TokenBuffer;overrideStdFeatures(int,int);;;@Override
    public JsonGenerator overrideStdFeatures(int values, int mask) {
        int oldState = getFeatureMask();
        _generatorFeatures = (oldState & ~mask) | (values & mask);
        return this;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition;SimpleBeanPropertyDefinition(AnnotatedMember,PropertyName,AnnotationIntrospector,PropertyMetadata,JsonInclude.Value);;;protected SimpleBeanPropertyDefinition(AnnotatedMember member, PropertyName fullName,
            AnnotationIntrospector intr, PropertyMetadata metadata,
            JsonInclude.Value inclusion)
    {
        _introspector = intr;
        _member = member;
        _fullName = fullName;
        _name = fullName.getSimpleName();
        _metadata = (metadata == null) ? PropertyMetadata.STD_OPTIONAL: metadata;
        _inclusion = inclusion;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition;construct(MapperConfig<?>,AnnotatedMember,PropertyName,PropertyMetadata,JsonInclude.Value);;;public static SimpleBeanPropertyDefinition construct(MapperConfig<?> config,
            AnnotatedMember member, PropertyName name, PropertyMetadata metadata,
            JsonInclude.Value inclusion) {
          return new SimpleBeanPropertyDefinition(member, name,
                  (config == null) ? null : config.getAnnotationIntrospector(),
                          metadata, inclusion);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/SimpleBeanPropertyDefinition;withInclusion(JsonInclude.Value);;;public BeanPropertyDefinition withInclusion(JsonInclude.Value inclusion) {
        if (_inclusion == inclusion) {
            return this;
        }
        return new SimpleBeanPropertyDefinition(_member, _fullName,
                _introspector, _metadata, inclusion);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils;parse(String,ParsePosition);;;                        if (seconds > 59 && seconds < 63) seconds = 59; // truncate up to 3 leap seconds
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils;parse(String,ParsePosition);;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils;indexOfNonDigit(String,int);;;private static int indexOfNonDigit(String string, int offset) {
        for (int i = offset; i < string.length(); i++) {
            char c = string.charAt(i);
            if (c < '0' || c > '9') return i;
        }
        return string.length();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils;main(String[]);;;public static void main(String[] args)
    {
        final int REPS = 250000;
        while (true) {
            long start = System.currentTimeMillis();
            int resp = test1(REPS, 3);
            long msecs = System.currentTimeMillis() - start;
            System.out.println("Pow ("+resp+") -> "+msecs+" ms");

            start = System.currentTimeMillis();
            resp = test2(REPS, 3);
            msecs = System.currentTimeMillis() - start;
            System.out.println("Iter ("+resp+") -> "+msecs+" ms");
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils;test1(int,int);;;static int test1(int reps, int pow)
    {
        int resp = 3;
        while (--reps >= 0) {
            resp = (int) Math.pow(10, pow);
        }
        return resp;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ISO8601Utils;test2(int,int);;;static int test2(int reps, int pow)
    {
        int resp = 3;
        while (--reps >= 0) {
            resp = 10;
            int p = pow;

            while (--p > 0) {
                resp *= 10;
            }
        }
        return resp;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;emptyIterator();;;public static <T> Iterator<T> emptyIterator() {
        return Collections.emptyIterator();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;findSuperTypes(JavaType,Class<?>,boolean);;;public static List<JavaType> findSuperTypes(JavaType type, Class<?> endBefore,
            boolean addClassItself) {
        if ((type == null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) {
            return Collections.emptyList();
        }
        List<JavaType> result = new ArrayList<JavaType>(8);
        _addSuperTypes(type, endBefore, result, addClassItself);
        return result;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;findRawSuperTypes(Class<?>,Class<?>,boolean);;;public static List<Class<?>> findRawSuperTypes(Class<?> cls, Class<?> endBefore, boolean addClassItself) {
        if ((cls == null) || (cls == endBefore) || (cls == Object.class)) {
            return Collections.emptyList();
        }
        List<Class<?>> result = new ArrayList<Class<?>>(8);
        _addRawSuperTypes(cls, endBefore, result, addClassItself);
        return result;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;findSuperClasses(Class<?>,Class<?>,boolean);;;public static List<Class<?>> findSuperClasses(Class<?> cls, Class<?> endBefore,
            boolean addClassItself) {
        List<Class<?>> result = new LinkedList<Class<?>>();
        if ((cls != null) && (cls != endBefore))  {
            if (addClassItself) {
                result.add(cls);
            }
            while ((cls = cls.getSuperclass()) != null) {
                if (cls == endBefore) {
                    break;
                }
                result.add(cls);
            }
        }
        return result;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;_addSuperTypes(JavaType,Class<?>,Collection<JavaType>,boolean);;;private static void _addSuperTypes(JavaType type, Class<?> endBefore, Collection<JavaType> result,
            boolean addClassItself)
    {
        if (type == null) {
            return;
        }
        final Class<?> cls = type.getRawClass();
        if (cls == endBefore || cls == Object.class) { return; }
        if (addClassItself) {
            if (result.contains(type)) { // already added, no need to check supers
                return;
            }
            result.add(type);
        }
        for (JavaType intCls : type.getInterfaces()) {
            _addSuperTypes(intCls, endBefore, result, true);
        }
        _addSuperTypes(type.getSuperClass(), endBefore, result, true);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;_addRawSuperTypes(Class<?>,Class<?>,Collection<Class<?>>,boolean);;;private static void _addRawSuperTypes(Class<?> cls, Class<?> endBefore, Collection<Class<?>> result, boolean addClassItself) {
        if (cls == endBefore || cls == null || cls == Object.class) { return; }
        if (addClassItself) {
            if (result.contains(cls)) { // already added, no need to check supers
                return;
            }
            result.add(cls);
        }
        for (Class<?> intCls : _interfaces(cls)) {
            _addRawSuperTypes(intCls, endBefore, result, true);
        }
        _addRawSuperTypes(cls.getSuperclass(), endBefore, result, true);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getPackageName(Class<?>);;;public static String getPackageName(Class<?> cls) {
        return _getMetadata(cls).getPackageName();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;hasEnclosingMethod(Class<?>);;;public static boolean hasEnclosingMethod(Class<?> cls) {
        return _getMetadata(cls).hasEnclosingMethod();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaredFields(Class<?>);;;public static Field[] getDeclaredFields(Class<?> cls) {
        return _getMetadata(cls).getDeclaredFields();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaredMethods(Class<?>);;;public static Method[] getDeclaredMethods(Class<?> cls) {
        return _getMetadata(cls).getDeclaredMethods();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;findClassAnnotations(Class<?>);;;public static Annotation[] findClassAnnotations(Class<?> cls) {
        return _getMetadata(cls).getDeclaredAnnotations();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getConstructors(Class<?>);;;public static Ctor[] getConstructors(Class<?> cls) {
        return _getMetadata(cls).getConstructors();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaringClass(Class<?>);;;public static Class<?> getDeclaringClass(Class<?> cls) {
        // Caching does not seem worthwhile, as per profiling
        return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getGenericSuperclass(Class<?>);;;public static Type getGenericSuperclass(Class<?> cls) {
        return cls.getGenericSuperclass();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getGenericInterfaces(Class<?>);;;public static Type[] getGenericInterfaces(Class<?> cls) {
        return _getMetadata(cls).getGenericInterfaces();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getEnclosingClass(Class<?>);;;public static Class<?> getEnclosingClass(Class<?> cls) {
        // Caching does not seem worthwhile, as per profiling
        return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;_interfaces(Class<?>);;;private static Class<?>[] _interfaces(Class<?> cls) {
        return _getMetadata(cls).getInterfaces();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;_getMetadata(Class<?>);;;private static ClassMetadata _getMetadata(Class<?> cls)
    {
        ClassMetadata md = sCached.get(cls);
        if (md == null) {
            md = new ClassMetadata(cls);
            // tiny optimization, but in case someone concurrently constructed it,
            // let's use that instance, to reduce extra concurrent work.
            ClassMetadata old = sCached.putIfAbsent(cls, md);
            if (old != null) {
                md = old;
            }
        }
        return md;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;primitiveType(Class<?>);;;public static Class<?> primitiveType(Class<?> type)
    {
        if (type.isPrimitive()) {
            return type;
        }
        
        if (type == Integer.class) {
            return Integer.TYPE;
        }
        if (type == Long.class) {
            return Long.TYPE;
        }
        if (type == Boolean.class) {
            return Boolean.TYPE;
        }
        if (type == Double.class) {
            return Double.TYPE;
        }
        if (type == Float.class) {
            return Float.TYPE;
        }
        if (type == Byte.class) {
            return Byte.TYPE;
        }
        if (type == Short.class) {
            return Short.TYPE;
        }
        if (type == Character.class) {
            return Character.TYPE;
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;checkAndFixAccess(Member,boolean);;;public static void checkAndFixAccess(Member member, boolean force)
    {
        // We know all members are also accessible objects...
        AccessibleObject ao = (AccessibleObject) member;

        /* 14-Jan-2009, tatu: It seems safe and potentially beneficial to
         *   always to make it accessible (latter because it will force
         *   skipping checks we have no use for...), so let's always call it.
         */
        //if (!ao.isAccessible()) {
        try {
            if (force || 
                    (!Modifier.isPublic(member.getModifiers())
                            || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) {
                ao.setAccessible(true);
            }
        } catch (SecurityException se) {
            /* 17-Apr-2009, tatu: Related to [JACKSON-101]: this can fail on
             *    platforms like EJB and Google App Engine); so let's
             *    only fail if we really needed it...
             */
            if (!ao.isAccessible()) {
                Class<?> declClass = member.getDeclaringClass();
                throw new IllegalArgumentException("Can not access "+member+" (from class "+declClass.getName()+"; failed to set access: "+se.getMessage());
            }
        }
        //}
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;findEnumType(Enum<?>);	public static Class<? extends Enum<?>> findEnumType(Enum<?> en);;    public static Class<? extends Enum<?>> findEnumType(Enum<?> en)
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;isObjectOrPrimitive(Class<?>);;;public static boolean isObjectOrPrimitive(Class<?> cls) {
        return (cls == CLS_OBJECT) || cls.isPrimitive();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;ClassMetadata(Class<?>);;;public ClassMetadata(Class<?> forClass) {
            _forClass = forClass;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getPackageName();;;public String getPackageName() {
            String name = _packageName;
            if (name == null) {
                Package pkg = _forClass.getPackage();
                name = (pkg == null) ? null : pkg.getName();
                if (name == null) {
                    name = "";
                }
                _packageName = name;
            }
            return (name == "") ? null : name;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getInterfaces();;;public Class<?>[] getInterfaces() {
            Class<?>[] result = _interfaces;
            if (result == null) {
                result = _forClass.getInterfaces();
                _interfaces = result;
            }
            return result;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getGenericInterfaces();;;public Type[] getGenericInterfaces() {
            Type[] result = _genericInterfaces;
            if (result == null) {
                result = _forClass.getGenericInterfaces();
                _genericInterfaces = result;
            }
            return result;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaredAnnotations();;;public Annotation[] getDeclaredAnnotations() {
            Annotation[] result = _annotations;
            if (result == null) {
                result = isObjectOrPrimitive() ? NO_ANNOTATIONS : _forClass.getDeclaredAnnotations();
                _annotations = result;
            }
            return result;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getConstructors();;;public Ctor[] getConstructors() {
            Ctor[] result = _constructors;
            if (result == null) {
                // Note: can NOT skip abstract classes as they may be used with mix-ins
                // and for regular use shouldn't really matter.
                if (_forClass.isInterface() || isObjectOrPrimitive()) {
                    result = NO_CTORS;
                } else {
                    Constructor<?>[] rawCtors = _forClass.getDeclaredConstructors();
                    final int len = rawCtors.length;
                    result = new Ctor[len];
                    for (int i = 0; i < len; ++i) {
                        result[i] = new Ctor(rawCtors[i]);
                    }
                }
                _constructors = result;
            }
            return result;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaredFields();;;public Field[] getDeclaredFields() {
            Field[] fields = _fields;
            if (fields == null) {
                fields = _forClass.getDeclaredFields();
                _fields = fields;
            }
            return fields;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaredMethods();;;public Method[] getDeclaredMethods() {
            Method[] methods = _methods;
            if (methods == null) {
                methods = _forClass.getDeclaredMethods();
                _methods = methods;
            }
            return methods;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;hasEnclosingMethod();;;public boolean hasEnclosingMethod() {
            Boolean b = _hasEnclosingMethod;
            if (b == null) {
                b = isObjectOrPrimitive() ? Boolean.FALSE : Boolean.valueOf(_forClass.getEnclosingMethod() != null);
                _hasEnclosingMethod = b;
            }
            return b.booleanValue();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;isObjectOrPrimitive();;;private boolean isObjectOrPrimitive() {
            return (_forClass == CLS_OBJECT) || _forClass.isPrimitive();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;Ctor(Constructor<?>);;;public Ctor(Constructor<?> ctor) {
            _ctor = ctor;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getConstructor();;;public Constructor<?> getConstructor() {
            return _ctor;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getParamCount();;;public int getParamCount() {
            int c = _paramCount;
            if (c < 0) {
                c = _ctor.getParameterTypes().length;
                _paramCount = c;
            }
            return c;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaringClass();;;public Class<?> getDeclaringClass() {
            return _ctor.getDeclaringClass();
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getDeclaredAnnotations();;;public Annotation[] getDeclaredAnnotations() {
            Annotation[] result = _annotations;
            if (result == null) {
                result = _ctor.getDeclaredAnnotations();
                _annotations = result;
            }
            return result;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/ClassUtil;getParameterAnnotations();;;public  Annotation[][] getParameterAnnotations() {
            Annotation[][] result = _paramAnnotations;
            if (result == null) {
                result = _ctor.getParameterAnnotations();
                _paramAnnotations = result;
            }
            return result;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/util/EnumResolver;constructFor(Class<Enum<?>>,AnnotationIntrospector);;;        String[] names = ai.findEnumValues(enumCls, enumValues, new String[enumValues.length]);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference;UnresolvedForwardReference(JsonParser,String,JsonLocation,ReadableObjectId);;;public UnresolvedForwardReference(JsonParser p, String msg, JsonLocation loc, ReadableObjectId roid) {
        super(p, msg, loc);
        _roid = roid;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference;UnresolvedForwardReference(JsonParser,String);;;public UnresolvedForwardReference(JsonParser p, String msg) {
        super(p, msg);
        _unresolvedIds = new ArrayList<UnresolvedId>();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;SettableBeanProperty(PropertyName,JavaType,PropertyName,TypeDeserializer,Annotations,PropertyMetadata);;;        super(metadata);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;SettableBeanProperty(PropertyName,JavaType,PropertyMetadata,JsonDeserializer<Object>);;;        super(metadata);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;SettableBeanProperty(SettableBeanProperty);;;        super(src);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;SettableBeanProperty(SettableBeanProperty,JsonDeserializer<?>);;;        super(src);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;SettableBeanProperty(SettableBeanProperty,PropertyName);;;        super(src);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
            SerializerProvider provider)
        throws JsonMappingException
    {
        if (isRequired()) {
            objectVisitor.property(this); 
        } else {
            objectVisitor.optionalProperty(this);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;_throwAsIOE(JsonParser,Exception,Object);;;protected void _throwAsIOE(JsonParser p, Exception e, Object value) throws IOException
    {
        if (e instanceof IllegalArgumentException) {
            String actType = (value == null) ? "[NULL]" : value.getClass().getName();
            StringBuilder msg = new StringBuilder("Problem deserializing property '").append(getName());
            msg.append("' (expected type: ").append(getType());
            msg.append("; actual type: ").append(actType).append(")");
            String origMsg = e.getMessage();
            if (origMsg != null) {
                msg.append(", problem: ").append(origMsg);
            } else {
                msg.append(" (no error message provided)");
            }
            throw JsonMappingException.from(p, msg.toString(), e);
        }
        _throwAsIOE(p, e);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty;_throwAsIOE(JsonParser,Exception);;;protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException
    {
        if (e instanceof IOException) {
            throw (IOException) e;
        }
        if (e instanceof RuntimeException) {
            throw (RuntimeException) e;
        }
        // let's wrap the innermost problem
        Throwable th = e;
        while (th.getCause() != null) {
            th = th.getCause();
        }
        throw JsonMappingException.from(p, th.getMessage(), th);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory;addInjectables(DeserializationContext,BeanDescription,BeanDeserializerBuilder);;;            boolean forceAccess = fixAccess && ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory;constructSettableProperty(DeserializationContext,BeanDescription,BeanPropertyDefinition,JavaType);;;protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,
            BeanDescription beanDesc, BeanPropertyDefinition propDef,
            JavaType propType0)
        throws JsonMappingException
    {
        // need to ensure method is callable (for non-public)
        AnnotatedMember mutator = propDef.getNonConstructorMutator();
        if (ctxt.canOverrideAccessModifiers()) {
            mutator.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
        }
        // note: this works since we know there's exactly one argument for methods
        BeanProperty.Std property = new BeanProperty.Std(propDef.getFullName(),
                propType0, propDef.getWrapperName(),
                beanDesc.getClassAnnotations(), mutator, propDef.getMetadata());
        JavaType type = resolveType(ctxt, beanDesc, propType0, mutator);
        // did type change?
        if (type != propType0) {
            property = property.withType(type);
        }

        /* First: does the Method specify the deserializer to use?
         * If so, let's use it.
         */
        JsonDeserializer<Object> propDeser = findDeserializerFromAnnotation(ctxt, mutator);
        type = modifyTypeByAnnotation(ctxt, mutator, type);
        TypeDeserializer typeDeser = type.getTypeHandler();
        SettableBeanProperty prop;
        if (mutator instanceof AnnotatedMethod) {
            prop = new MethodProperty(propDef, type, typeDeser,
                beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);
        } else {
            prop = new FieldProperty(propDef, type, typeDeser,
                    beanDesc.getClassAnnotations(), (AnnotatedField) mutator);
        }
        if (propDeser != null) {
            prop = prop.withValueDeserializer(propDeser);
        }
        // [JACKSON-235]: need to retain name of managed forward references:
        AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType();
        if (ref != null && ref.isManagedReference()) {
            prop.setManagedReferenceName(ref.getName());
        }
        ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo();
        if(objectIdInfo != null){
            prop.setObjectIdInfo(objectIdInfo);
        }
        return prop;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers;findReferenceDeserializer(ReferenceType,DeserializationConfig,BeanDescription,TypeDeserializer,JsonDeserializer<?>);;;public JsonDeserializer<?> findReferenceDeserializer(ReferenceType refType,
            DeserializationConfig config, BeanDescription beanDesc,
            TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer)
        throws JsonMappingException;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/Deserializers;findReferenceDeserializer(ReferenceType,DeserializationConfig,BeanDescription,TypeDeserializer,JsonDeserializer<?>);;;@Override // since 2.7
        public JsonDeserializer<?> findReferenceDeserializer(ReferenceType refType,
                DeserializationConfig config, BeanDescription beanDesc,
                TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer)
            throws JsonMappingException {
            // 21-Oct-2015, tatu: For backwards compatibility, let's delegate to "bean" variant,
            //    for 2.7 -- remove work-around from 2.8 or later
            return findBeanDeserializer(refType, config, beanDesc);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase;_findDelegateDeserializer(DeserializationContext,JavaType,AnnotatedWithParams);;;private JsonDeserializer<Object> _findDelegateDeserializer(DeserializationContext ctxt, JavaType delegateType,
            AnnotatedWithParams delegateCreator) throws JsonMappingException {
        // Need to create a temporary property to allow contextual deserializers:
        BeanProperty.Std property = new BeanProperty.Std(TEMP_PROPERTY_NAME,
                delegateType, null, _classAnnotations, delegateCreator,
                PropertyMetadata.STD_OPTIONAL);

        TypeDeserializer td = delegateType.getTypeHandler();
        if (td == null) {
            td = ctxt.getConfig().findTypeDeserializer(delegateType);
        }
        JsonDeserializer<Object> dd = findDeserializer(ctxt, delegateType, property);
        if (td != null) {
            td = td.forProperty(property);
            return new TypeWrappedDeserializer(td, dd);
        }
        return dd;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase;deserializeFromArray(JsonParser,DeserializationContext);;;        if (_arrayDelegateDeserializer != null) {
            try {
                Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt));
                if (_injectables != null) {
                    injectValues(ctxt, bean);
                }
                return bean;
            } catch (Exception e) {
                wrapInstantiationProblem(e, ctxt);
            }
        }
        // fallback to non-array delegate
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase;handleUnknownProperties(DeserializationContext,Object,TokenBuffer);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator;canCreateUsingArrayDelegate();;;public boolean canCreateUsingArrayDelegate() { return false; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator;getArrayDelegateType(DeserializationConfig);;;public JavaType getArrayDelegateType(DeserializationConfig config) { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator;createUsingArrayDelegate(DeserializationContext,Object);;;public Object createUsingArrayDelegate(DeserializationContext ctxt, Object delegate) throws IOException {
        throw ctxt.mappingException("Can not instantiate value of type %s using delegate",
                getValueTypeDesc());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/ValueInstantiator;getArrayDelegateCreator();;;public AnnotatedWithParams getArrayDelegateCreator() { return null; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;_deserializeOther(JsonParser,DeserializationContext,JsonToken);;;
        case VALUE_NULL:
            return deserializeFromNull(p, ctxt);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;_deserializeOther(JsonParser,DeserializationContext,JsonToken);;;        throw ctxt.mappingException(handledType());
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer;deserializeFromNull(JsonParser,DeserializationContext);;;protected Object deserializeFromNull(JsonParser p, DeserializationContext ctxt)
        throws IOException
    {
        // 17-Dec-2015, tatu: Highly specialized case, mainly to support polymorphic
        //   "empty" POJOs deserialized from XML, where empty XML tag synthesizes a
        //   `VALUE_NULL` token.
        if (p.requiresCustomCodec()) { // not only XML module, but mostly it...
            @SuppressWarnings("resource")
            TokenBuffer tb = new TokenBuffer(p, ctxt);
            tb.writeEndObject();
            JsonParser p2 = tb.asParser(p);
            p2.nextToken(); // to point to END_OBJECT
            // note: don't have ObjectId to consider at this point, so:
            Object ob = _vanillaProcessing ? vanillaDeserialize(p2, ctxt, JsonToken.END_OBJECT)
                    : deserializeFromObject(p2, ctxt);
            p2.close();
            return ob;
        }
        throw ctxt.mappingException(handledType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache;_createDeserializer2(DeserializationContext,DeserializerFactory,JavaType,BeanDescription);;;        if (type.isReferenceType()) {
            return factory.createReferenceDeserializer(ctxt, (ReferenceType) type, beanDesc);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache;modifyTypeByAnnotation(DeserializationContext,Annotated,JavaType);;;
        // And after handlers, possible type refinements
        // (note: could possibly avoid this if explicit deserializer was invoked?)
        type = intr.refineDeserializationType(ctxt.getConfig(), a, type);
        
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache;_handleUnknownValueDeserializer(DeserializationContext,JavaType);;;protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type)
            throws JsonMappingException
    {
        /* Let's try to figure out the reason, to give better error
         * messages
         */
        Class<?> rawClass = type.getRawClass();
        if (!ClassUtil.isConcrete(rawClass)) {
            throw JsonMappingException.from(ctxt, "Can not find a Value deserializer for abstract type "+type);
        }
        throw JsonMappingException.from(ctxt, "Can not find a Value deserializer for type "+type);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache;_handleUnknownKeyDeserializer(DeserializationContext,JavaType);;;protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type)
        throws JsonMappingException
    {
        throw JsonMappingException.from(ctxt, "Can not find a (Map) Key deserializer for type "+type);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;createCollectionDeserializer(DeserializationContext,CollectionType,BeanDescription);;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;createCollectionDeserializer(DeserializationContext,CollectionType,BeanDescription);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;createReferenceDeserializer(DeserializationContext,ReferenceType,BeanDescription);;;@Override
    public JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ctxt,
            ReferenceType type, BeanDescription beanDesc)
        throws JsonMappingException
    {
        JavaType contentType = type.getContentType();
        // Very first thing: is deserializer hard-coded for elements?
        JsonDeserializer<Object> contentDeser = contentType.getValueHandler();
        final DeserializationConfig config = ctxt.getConfig();

        // Then optional type info: if type has been resolved, we may already know type deserializer:
        TypeDeserializer contentTypeDeser = contentType.getTypeHandler();
        if (contentTypeDeser == null) { // or if not, may be able to find:
            contentTypeDeser = findTypeDeserializer(config, contentType);
        }
        JsonDeserializer<?> deser = _findCustomReferenceDeserializer(type, config, beanDesc,
                contentTypeDeser, contentDeser);
        if (deser == null) {
            // Just one referential type as of JDK 1.7 / Java 7: AtomicReference (Java 8 adds Optional)
            if (AtomicReference.class.isAssignableFrom(type.getRawClass())) {
                JavaType referencedType = type.getReferencedType();
                /*
                TypeDeserializer vts = findTypeDeserializer(ctxt.getConfig(), referencedType);
                BeanDescription refdDesc = ctxt.getConfig().introspectClassAnnotations(referencedType);
                JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo());
                */
                return new AtomicReferenceDeserializer(referencedType, contentTypeDeser, deser);
            }
        }
        if (deser != null) {
            // and then post-process
            if (_factoryConfig.hasDeserializerModifiers()) {
                for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {
                    deser = mod.modifyReferenceDeserializer(config, type, beanDesc, deser);
                }
            }
        }
        return deser;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;_findCustomReferenceDeserializer(ReferenceType,DeserializationConfig,BeanDescription,TypeDeserializer,JsonDeserializer<?>);;;protected JsonDeserializer<?> _findCustomReferenceDeserializer(ReferenceType type,
            DeserializationConfig config, BeanDescription beanDesc,
            TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer)
        throws JsonMappingException
    {
        for (Deserializers d  : _factoryConfig.deserializers()) {
            JsonDeserializer<?> deser = d.findReferenceDeserializer(type, config, beanDesc,
                    contentTypeDeserializer, contentDeserializer);
            if (deser != null) {
                return deser;
            }
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory;modifyTypeByAnnotation(DeserializationContext,Annotated,T);;;        // then: type refinement(s)?
        type = (T) intr.refineDeserializationType(ctxt.getConfig(), a, type);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerModifier;modifyReferenceDeserializer(DeserializationConfig,ReferenceType,BeanDescription,JsonDeserializer<?>);;;public JsonDeserializer<?> modifyReferenceDeserializer(DeserializationConfig config,
            ReferenceType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {
        return deserializer;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext;createReadableObjectId(IdKey);;;protected ReadableObjectId createReadableObjectId(IdKey key) {
        return new ReadableObjectId(key);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/DeserializerFactory;createReferenceDeserializer(DeserializationContext,ReferenceType,BeanDescription);;;public abstract JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ctxt,
            ReferenceType type, BeanDescription beanDesc)
        throws JsonMappingException;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/ReadableObjectId;getResolver();;;public ObjectIdResolver getResolver() {
        return _resolver;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector;CreatorCollector(BeanDescription,MapperConfig<?>);;;public CreatorCollector(BeanDescription beanDesc, MapperConfig<?> config)
    {
        _beanDesc = beanDesc;
        _canFixAccess = config.canOverrideAccessModifiers();
        _forceAccess = config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector;constructValueInstantiator(DeserializationConfig);;;        inst.configureFromArraySettings(_creators[C_ARRAY_DELEGATE], arrayDelegateType, _arrayDelegateArgs);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector;_computeDelegateType(AnnotatedWithParams,SettableBeanProperty[]);;;private JavaType _computeDelegateType(AnnotatedWithParams creator, SettableBeanProperty[] delegateArgs)
    {
        if (!_hasNonDefaultCreator || (creator == null)) {
            return null;
        } else {
            // need to find type...
            int ix = 0;
            if (delegateArgs != null) {
                for (int i = 0, len = delegateArgs.length; i < len; ++i) {
                    if (delegateArgs[i] == null) { // marker for delegate itself
                        ix = i;
                        break;
                    }
                }
            }
            return creator.getParameterType(ix);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty;set(Object,Object);;;            // 15-Sep-2015, tatu: How coud we get a ref to JsonParser?
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty;setAndReturn(Object,Object);;;            // 15-Sep-2015, tatu: How coud we get a ref to JsonParser?
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty;set(Object,Object);;;            // 15-Sep-2015, tatu: How coud we get a ref to JsonParser?
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty;setAndReturn(Object,Object);;;            // 15-Sep-2015, tatu: How coud we get a ref to JsonParser?
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer;CollectionDeserializer(JavaType,JsonDeserializer<Object>,TypeDeserializer,ValueInstantiator,JsonDeserializer<Object>,Boolean);;;protected CollectionDeserializer(JavaType collectionType,
            JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser,
            ValueInstantiator valueInstantiator,
            JsonDeserializer<Object> delegateDeser,
            Boolean unwrapSingle)
    {
        super(collectionType);
        _collectionType = collectionType;
        _valueDeserializer = valueDeser;
        _valueTypeDeserializer = valueTypeDeser;
        _valueInstantiator = valueInstantiator;
        _delegateDeserializer = delegateDeser;
        _unwrapSingle = unwrapSingle;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer;CollectionDeserializer(CollectionDeserializer);;;        _unwrapSingle = src._unwrapSingle;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer;withResolved(JsonDeserializer<?>,JsonDeserializer<?>,TypeDeserializer,Boolean);;;@SuppressWarnings("unchecked")
    protected CollectionDeserializer withResolved(JsonDeserializer<?> dd,
            JsonDeserializer<?> vd, TypeDeserializer vtd,
            Boolean unwrapSingle)
    {
        if ((dd == _delegateDeserializer) && (vd == _valueDeserializer) && (vtd == _valueTypeDeserializer)
                && (_unwrapSingle == unwrapSingle)) {
            return this;
        }
        return new CollectionDeserializer(_collectionType,
                (JsonDeserializer<Object>) vd, vtd,
                _valueInstantiator, (JsonDeserializer<Object>) dd, unwrapSingle);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer;createContextual(DeserializationContext,BeanProperty);;;        // [databind#1043]: allow per-property allow-wrapping of single overrides:
        // 11-Dec-2015, tatu: Should we pass basic `Collection.class`, or more refined? Mostly
        //   comes down to "List vs Collection" I suppose... for now, pass Collection
        Boolean unwrapSingle = findFormatFeature(ctxt, property, Collection.class,
                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer;deserializeArray(JsonParser,DeserializationContext,JsonNodeFactory);		break;;;                break;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/JsonNodeDeserializer;deserializeAny(JsonParser,DeserializationContext,JsonNodeFactory);;;        case JsonTokenId.ID_FIELD_NAME:
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;StdValueInstantiator(StdValueInstantiator);;;
        _arrayDelegateType = src._arrayDelegateType;
        _arrayDelegateCreator = src._arrayDelegateCreator;
        _arrayDelegateArguments = src._arrayDelegateArguments;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;configureFromArraySettings(AnnotatedWithParams,JavaType,SettableBeanProperty[]);;;public void configureFromArraySettings(
            AnnotatedWithParams arrayDelegateCreator,
            JavaType arrayDelegateType,
            SettableBeanProperty[] arrayDelegateArgs)
    {
        _arrayDelegateCreator = arrayDelegateCreator;
        _arrayDelegateType = arrayDelegateType;
        _arrayDelegateArguments = arrayDelegateArgs;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;canCreateUsingArrayDelegate();;;@Override
    public boolean canCreateUsingArrayDelegate() {
        return _arrayDelegateType != null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;getArrayDelegateType(DeserializationConfig);;;@Override
    public JavaType getArrayDelegateType(DeserializationConfig config) {
        return _arrayDelegateType;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;createUsingArrayDelegate(DeserializationContext,Object);;;@Override
    public Object createUsingArrayDelegate(DeserializationContext ctxt, Object delegate) throws IOException
    {
        if (_arrayDelegateCreator == null) { // sanity-check; caller should check
            // fallback to the classic delegate creator
            return createUsingDelegate(ctxt, delegate);
        }
        return _createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, ctxt, delegate);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;createFromLong(DeserializationContext,long);;;        if (_fromLongCreator == null) {
            throw ctxt.mappingException("Can not instantiate value of type %s"
                    +" from Long integral number (%s); no single-long-arg constructor/factory method",
                    getValueTypeDesc(), value);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;createFromDouble(DeserializationContext,double);;;        if (_fromDoubleCreator == null) {
            throw ctxt.mappingException("Can not instantiate value of type %s"
                    +" from Floating-point number (%s); no one-double/Double-arg constructor/factory method",
                    getValueTypeDesc(), value);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;createFromBoolean(DeserializationContext,boolean);;;        if (_fromBooleanCreator == null) {
            throw ctxt.mappingException("Can not instantiate value of type %s"
                    +" from Boolean value (%s); no single-boolean/Boolean-arg constructor/factory method",
                    getValueTypeDesc(), value);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;getArrayDelegateCreator();;;@Override
    public AnnotatedWithParams getArrayDelegateCreator() {
        return _arrayDelegateCreator;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;unwrapAndWrapException(DeserializationContext,Throwable);;;protected JsonMappingException unwrapAndWrapException(DeserializationContext ctxt, Throwable t)
    {
        // 05-Nov-2015, tatu: This used to always unwrap the whole exception, but now only
        //   does so if and until `JsonMappingException` is found.
        for (Throwable curr = t; curr != null; curr = curr.getCause()) {
            if (curr instanceof JsonMappingException) {
                return (JsonMappingException) curr;
            }
        }
        String msg = String.format("Instantiation of %s value failed (%s): %s",
                getValueTypeDesc(), t.getClass().getName(), t.getMessage());
        return JsonMappingException.from(ctxt.getParser(), msg, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;wrapAsJsonMappingException(DeserializationContext,Throwable);;;protected JsonMappingException wrapAsJsonMappingException(DeserializationContext ctxt,
            Throwable t)
    {
        // 05-Nov-2015, tatu: Only avoid wrapping if already a JsonMappingException
        if (t instanceof JsonMappingException) {
            return (JsonMappingException) t;
        }
        String msg = String.format("Instantiation of %s value failed (%s): %s",
                getValueTypeDesc(), t.getClass().getName(), t.getMessage());
        return JsonMappingException.from(ctxt.getParser(), msg, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;rewrapCtorProblem(DeserializationContext,Throwable);;;protected JsonMappingException rewrapCtorProblem(DeserializationContext ctxt,
            Throwable t)
    {
        // 05-Nov-2015, tatu: Seems like there are really only 2 useless wrapper errors/exceptions,
        //    so just peel those, and nothing else
        if ((t instanceof ExceptionInInitializerError) // from static initialization block
                || (t instanceof InvocationTargetException) // from constructor/method
                ) {
            Throwable cause = t.getCause();
            if (cause != null) {
                t = cause;
            }
        }
        return wrapAsJsonMappingException(ctxt, t);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator;_createUsingDelegate(AnnotatedWithParams,SettableBeanProperty[],DeserializationContext,Object);;;private Object _createUsingDelegate(
            AnnotatedWithParams delegateCreator,
            SettableBeanProperty[] delegateArguments,
            DeserializationContext ctxt,
            Object delegate)
            throws IOException
    {
        if (delegateCreator == null) { // sanity-check; caller should check
            throw new IllegalStateException("No delegate constructor for "+getValueTypeDesc());
        }
        try {
            // First simple case: just delegate, no injectables
            if (delegateArguments == null) {
                return delegateCreator.call1(delegate);
            }
            // And then the case with at least one injectable...
            final int len = delegateArguments.length;
            Object[] args = new Object[len];
            for (int i = 0; i < len; ++i) {
                SettableBeanProperty prop = delegateArguments[i];
                if (prop == null) { // delegate
                    args[i] = delegate;
                } else { // nope, injectable:
                    args[i] = ctxt.findInjectableValue(prop.getInjectableValueId(), prop, null);
                }
            }
            // and then try calling with full set of arguments
            return delegateCreator.call(args);
        } catch (Throwable t) {
            throw rewrapCtorProblem(ctxt, t);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer;StringArrayDeserializer(JsonDeserializer<?>,Boolean);;;@SuppressWarnings("unchecked")
    protected StringArrayDeserializer(JsonDeserializer<?> deser, Boolean unwrapSingle) {
        super(String[].class);
        _elementDeserializer = (JsonDeserializer<String>) deser;
        _unwrapSingle = unwrapSingle;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StringArrayDeserializer;createContextual(DeserializationContext,BeanProperty);;;        // One more thing: allow unwrapping?
        Boolean unwrapSingle = findFormatFeature(ctxt, property, String[].class,
                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer;ObjectArrayDeserializer(ArrayType,JsonDeserializer<Object>,TypeDeserializer);;;        _unwrapSingle = null;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer;ObjectArrayDeserializer(ObjectArrayDeserializer,JsonDeserializer<Object>,TypeDeserializer,Boolean);;;protected ObjectArrayDeserializer(ObjectArrayDeserializer base,
            JsonDeserializer<Object> elemDeser, TypeDeserializer elemTypeDeser,
            Boolean unwrapSingle)
    {
        super(base._arrayType);
        _arrayType = base._arrayType;
        _elementClass = base._elementClass;
        _untyped = base._untyped;

        _elementDeserializer = elemDeser;
        _elementTypeDeserializer = elemTypeDeser;
        _unwrapSingle = unwrapSingle;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/ObjectArrayDeserializer;withResolved(TypeDeserializer,JsonDeserializer<?>,Boolean);;;@SuppressWarnings("unchecked")
    public ObjectArrayDeserializer withResolved(TypeDeserializer elemTypeDeser,
            JsonDeserializer<?> elemDeser, Boolean unwrapSingle)
    {
        if ((unwrapSingle == _unwrapSingle)
                && (elemDeser == _elementDeserializer)
                && (elemTypeDeser == _elementTypeDeserializer)) {
            return this;
        }
        return new ObjectArrayDeserializer(this,
                (JsonDeserializer<Object>) elemDeser, elemTypeDeser, unwrapSingle);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/NumberDeserializers;getEmptyValue(DeserializationContext);;;@Override
        public T getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {
            // [databind#1095]: Should not allow coercion from into null from Empty String
            // either, if `null` not allowed
            if (_primitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {
                throw ctxt.mappingException(
                        "Can not map Empty String as null into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to 'false' to allow)",
                        handledType().toString());
            }
            return _nullValue;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer;withResolved(TypeDeserializer,JsonDeserializer<?>);;;        if ((valueDeser == _valueDeserializer) && (typeDeser == _valueTypeDeserializer)) {
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer;createContextual(DeserializationContext,BeanProperty);;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer;createContextual(DeserializationContext,BeanProperty);;;        } else { // otherwise directly assigned, probably not contextual yet:
            deser = ctxt.handleSecondaryContextualization(deser, property, _referencedType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer;StringCollectionDeserializer(JavaType,ValueInstantiator,JsonDeserializer<?>,JsonDeserializer<?>,Boolean);;;@SuppressWarnings("unchecked")
    protected StringCollectionDeserializer(JavaType collectionType,
            ValueInstantiator valueInstantiator, JsonDeserializer<?> delegateDeser,
            JsonDeserializer<?> valueDeser, Boolean unwrapSingle)
    {
        super(collectionType);
        _collectionType = collectionType;
        _valueDeserializer = (JsonDeserializer<String>) valueDeser;
        _valueInstantiator = valueInstantiator;
        _delegateDeserializer = (JsonDeserializer<Object>) delegateDeser;
        _unwrapSingle = unwrapSingle;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer;withResolved(JsonDeserializer<?>,JsonDeserializer<?>,Boolean);;;protected StringCollectionDeserializer withResolved(JsonDeserializer<?> delegateDeser,
            JsonDeserializer<?> valueDeser, Boolean unwrapSingle)
    {
        if ((_unwrapSingle == unwrapSingle)
                && (_valueDeserializer == valueDeser) && (_delegateDeserializer == delegateDeser)) {
            return this;
        }
        return new StringCollectionDeserializer(_collectionType,
                _valueInstantiator, delegateDeser, valueDeser, unwrapSingle);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer;_badFormat(String,DeserializationContext);;;private void _badFormat(String uuidStr, DeserializationContext ctxt)
        throws JsonMappingException
    {
        throw InvalidFormatException.from(ctxt.getParser(),
                String.format("UUID has to be represented by standard 36-char representation: input String '%s'",
                        uuidStr),
                uuidStr, handledType());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer;intFromChars(String,int,DeserializationContext);;;static int intFromChars(String str, int index, DeserializationContext ctxt) throws JsonMappingException {
        return (byteFromChars(str, index, ctxt) << 24)
                + (byteFromChars(str, index+2, ctxt) << 16)
                + (byteFromChars(str, index+4, ctxt) << 8)
                + byteFromChars(str, index+6, ctxt);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer;shortFromChars(String,int,DeserializationContext);;;static int shortFromChars(String str, int index, DeserializationContext ctxt) throws JsonMappingException {
        return (byteFromChars(str, index, ctxt) << 8) + byteFromChars(str, index+2, ctxt);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer;byteFromChars(String,int,DeserializationContext);;;static int byteFromChars(String str, int index, DeserializationContext ctxt) throws JsonMappingException
    {
        final char c1 = str.charAt(index);
        final char c2 = str.charAt(index+1);

        if (c1 <= 127 && c2 <= 127) {
            int hex = (HEX_DIGITS[c1] << 4) | HEX_DIGITS[c2];
            if (hex >= 0) {
                return hex;
            }
        }
        if (c1 > 127 || HEX_DIGITS[c1] < 0) {
            return _badChar(str, index, ctxt, c1);
        }
        return _badChar(str, index+1, ctxt, c2);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/UUIDDeserializer;_badChar(String,int,DeserializationContext,char);;;static int _badChar(String uuidStr, int index, DeserializationContext ctxt, char c) throws JsonMappingException {
        String msg = String.format(
"Non-hex character '%c' (value 0x%s), not valid for UUID String: input String '%s'",
        c, Integer.toHexString(c), uuidStr);
        throw InvalidFormatException.from(ctxt.getParser(), msg, uuidStr, UUID.class);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer;_parseBooleanFromOther(JsonParser,DeserializationContext);;;protected final boolean _parseBooleanFromOther(JsonParser p, DeserializationContext ctxt)
            throws IOException
    {
        if (p.getNumberType() == NumberType.LONG) {
            return (p.getLongValue() == 0L) ? Boolean.FALSE : Boolean.TRUE;
        }
        // no really good logic; let's actually resort to textual comparison
        String str = p.getText();
        if ("0.0".equals(str) || "0".equals(str)) {
            return Boolean.FALSE;
        }
        return Boolean.TRUE;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer;findFormatOverrides(DeserializationContext,BeanProperty,Class<?>);;;protected JsonFormat.Value findFormatOverrides(DeserializationContext ctxt,
            BeanProperty prop, Class<?> typeForDefaults)
    {
        if (prop != null) {
            return prop.findPropertyFormat(ctxt.getConfig(), typeForDefaults);
        }
        // even without property or AnnotationIntrospector, may have type-specific defaults
        return ctxt.getDefaultPropertyFormat(typeForDefaults);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer;findFormatFeature(DeserializationContext,BeanProperty,Class<?>,JsonFormat.Feature);;;protected Boolean findFormatFeature(DeserializationContext ctxt,
            BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)
    {
        JsonFormat.Value format = findFormatOverrides(ctxt, prop, typeForDefaults);
        if (format != null) {
            return format.getFeature(feat);
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer;EnumSetDeserializer(JavaType,JsonDeserializer<?>);;;        _unwrapSingle = null;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer;EnumSetDeserializer(EnumSetDeserializer,JsonDeserializer<?>,Boolean);;;@SuppressWarnings("unchecked" )
    protected EnumSetDeserializer(EnumSetDeserializer base,
            JsonDeserializer<?> deser, Boolean unwrapSingle) {
        super(EnumSet.class);
        _enumType = base._enumType;
        _enumClass = base._enumClass;
        _enumDeserializer = (JsonDeserializer<Enum<?>>) deser;
        _unwrapSingle = unwrapSingle;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer;withResolved(JsonDeserializer<?>,Boolean);;;public EnumSetDeserializer withResolved(JsonDeserializer<?> deser, Boolean unwrapSingle) {
        if ((_unwrapSingle == unwrapSingle) && (_enumDeserializer == deser)) {
            return this;
        }
        return new EnumSetDeserializer(this, deser, unwrapSingle);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer;createContextual(DeserializationContext,BeanProperty);;;        Boolean unwrapSingle = findFormatFeature(ctxt, property, EnumSet.class,
                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumSetDeserializer;handleNonArray(JsonParser,DeserializationContext);;;@SuppressWarnings("unchecked") 
    protected EnumSet<?> handleNonArray(JsonParser p, DeserializationContext ctxt)
        throws IOException
    {
        boolean canWrap = (_unwrapSingle == Boolean.TRUE) ||
                ((_unwrapSingle == null) &&
                        ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));

        if (!canWrap) {
            throw ctxt.mappingException(EnumSet.class);
        }

        EnumSet result = constructSet();
        // First: since `null`s not allowed, slightly simpler...
        if (p.hasToken(JsonToken.VALUE_NULL)) {
            throw ctxt.mappingException(_enumClass);
        }
        try {
            Enum<?> value = _enumDeserializer.deserialize(p, ctxt);
            if (value != null) { 
                result.add(value);
            }
        } catch (Exception e) {
            throw JsonMappingException.wrapWithPath(e, result, result.size());
        }
        return result;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer;deserialize(JsonParser,DeserializationContext);;;            if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {
                _failOnNumber(ctxt, p, index);
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer;_failOnNumber(DeserializationContext,JsonParser,int);;;protected void _failOnNumber(DeserializationContext ctxt, JsonParser p, int index)
        throws IOException
    {
        throw InvalidFormatException.from(p,
                String.format("Not allowed to deserialize Enum value out of JSON number (%d): disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow",
                        index),
                        index, _enumClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer;ArrayBlockingQueueDeserializer(JavaType,JsonDeserializer<Object>,TypeDeserializer,ValueInstantiator);;;public ArrayBlockingQueueDeserializer(JavaType collectionType,
            JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser,
            ValueInstantiator valueInstantiator)
    {
        super(collectionType, valueDeser, valueTypeDeser, valueInstantiator);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer;ArrayBlockingQueueDeserializer(JavaType,JsonDeserializer<Object>,TypeDeserializer,ValueInstantiator,JsonDeserializer<Object>,Boolean);;;protected ArrayBlockingQueueDeserializer(JavaType collectionType,
            JsonDeserializer<Object> valueDeser, TypeDeserializer valueTypeDeser,
            ValueInstantiator valueInstantiator,
            JsonDeserializer<Object> delegateDeser, Boolean unwrapSingle)
    {
        super(collectionType, valueDeser, valueTypeDeser, valueInstantiator,
                delegateDeser, unwrapSingle);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/ArrayBlockingQueueDeserializer;withResolved(JsonDeserializer<?>,JsonDeserializer<?>,TypeDeserializer,Boolean);;;@Override
    @SuppressWarnings("unchecked")
    protected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd,
            JsonDeserializer<?> vd, TypeDeserializer vtd, Boolean unwrapSingle)
    {
        if ((dd == _delegateDeserializer) && (vd == _valueDeserializer) && (vtd == _valueTypeDeserializer)
                && (_unwrapSingle == unwrapSingle)) {
            return this;
        }
        return new ArrayBlockingQueueDeserializer(_collectionType,
                (JsonDeserializer<Object>) vd, vtd,
                _valueInstantiator, (JsonDeserializer<Object>) dd, unwrapSingle);
                
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;PrimitiveArrayDeserializers(Class<T>);;;        _unwrapSingle = null;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;PrimitiveArrayDeserializers(PrimitiveArrayDeserializers<?>,Boolean);;;protected PrimitiveArrayDeserializers(PrimitiveArrayDeserializers<?> base,
            Boolean unwrapSingle) {
        super(base._valueClass);
        _unwrapSingle = unwrapSingle;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;protected abstract PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;createContextual(DeserializationContext,BeanProperty);;;@Override
    public JsonDeserializer<?> createContextual(DeserializationContext ctxt,
            BeanProperty property) throws JsonMappingException
    {
        Boolean unwrapSingle = findFormatFeature(ctxt, property, _valueClass,
                JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        if (unwrapSingle == _unwrapSingle) {
            return this;
        }
        return withResolved(unwrapSingle);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleNonArray(JsonParser,DeserializationContext);;;protected T handleNonArray(JsonParser p, DeserializationContext ctxt) throws IOException
    {
        // [JACKSON-620] Empty String can become null...
        if (p.hasToken(JsonToken.VALUE_STRING)
                && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
            if (p.getText().length() == 0) {
                return null;
            }
        }
        boolean canWrap = (_unwrapSingle == Boolean.TRUE) ||
                ((_unwrapSingle == null) &&
                        ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));
        if (canWrap) {
            return handleSingleElementUnwrapped(p, ctxt);
        }
        throw ctxt.mappingException(_valueClass);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;protected abstract T handleSingleElementUnwrapped(JsonParser p,
            DeserializationContext ctxt) throws IOException;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;CharDeser(CharDeser,Boolean);;;protected CharDeser(CharDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            // 11-Dec-2015, tatu: Not sure how re-wrapping would work; omit
            return this;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected char[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            // not sure how this should work so just return `null` so:
            throw ctxt.mappingException(_valueClass);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;BooleanDeser(BooleanDeser,Boolean);;;protected BooleanDeser(BooleanDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new BooleanDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected boolean[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            return new boolean[] { _parseBooleanPrimitive(p, ctxt) };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;ByteDeser(ByteDeser,Boolean);;;protected ByteDeser(ByteDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new ByteDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected byte[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException
        {
            byte value;
            JsonToken t = p.getCurrentToken();
            if (t == JsonToken.VALUE_NUMBER_INT || t == JsonToken.VALUE_NUMBER_FLOAT) {
                // should we catch overflow exceptions?
                value = p.getByteValue();
            } else {
                // should probably accept nulls as 'false'
                if (t != JsonToken.VALUE_NULL) {
                    throw ctxt.mappingException(_valueClass.getComponentType());
                }
                value = (byte) 0;
            }
            return new byte[] { value };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;ShortDeser(ShortDeser,Boolean);;;protected ShortDeser(ShortDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new ShortDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected short[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            return new short[] { _parseShortPrimitive(p, ctxt) };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;IntDeser(IntDeser,Boolean);;;protected IntDeser(IntDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new IntDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected int[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            return new int[] { _parseIntPrimitive(p, ctxt) };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;LongDeser(LongDeser,Boolean);;;protected LongDeser(LongDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new LongDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected long[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            return new long[] { _parseLongPrimitive(p, ctxt) };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;FloatDeser(FloatDeser,Boolean);;;protected FloatDeser(FloatDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new FloatDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected float[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            return new float[] { _parseFloatPrimitive(p, ctxt) };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;DoubleDeser(DoubleDeser,Boolean);;;protected DoubleDeser(DoubleDeser base, Boolean unwrapSingle) {
            super(base, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;withResolved(Boolean);;;@Override
        protected PrimitiveArrayDeserializers<?> withResolved(Boolean unwrapSingle) {
            return new DoubleDeser(this, unwrapSingle);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/deser/std/PrimitiveArrayDeserializers;handleSingleElementUnwrapped(JsonParser,DeserializationContext);;;@Override
        protected double[] handleSingleElementUnwrapped(JsonParser p,
                DeserializationContext ctxt) throws IOException {
            return new double[] { _parseDoublePrimitive(p, ctxt) };
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/jsontype/TypeIdResolver;getDescForKnownTypeIds();;;public String getDescForKnownTypeIds();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase;TypeDeserializerBase(JavaType,TypeIdResolver,String,boolean,Class<?>);;;            // 01-Nov-2015, tatu: Actually this is still exactly wrong. Should fix.
            // 15-Jan-2016, tatu: ... as witnessed by [databind#1083], patched, but
            //     fundamentally this call can't be made to work for all cases
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/jsonFormatVisitors/JsonValueFormat;toString();;;     @JsonValue // since 2.7
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter;BeanPropertyWriter(BeanPropertyDefinition,AnnotatedMember,Annotations,JavaType,JsonSerializer<?>,TypeSerializer,JavaType,boolean,Object);;;        super(propDef);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter;BeanPropertyWriter();;;        super(PropertyMetadata.STD_REQUIRED_OR_OPTIONAL);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter;BeanPropertyWriter(BeanPropertyWriter,PropertyName);;;        super(base);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter;BeanPropertyWriter(BeanPropertyWriter,SerializedString);;;        super(base);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
    public void depositSchemaProperty(JsonObjectFormatVisitor v,
            SerializerProvider provider)
        throws JsonMappingException
    {
        if (v != null) {
            if (isRequired()) {
                v.property(this); 
            } else {
                v.optionalProperty(this);
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter;PropertyWriter(PropertyMetadata);;;protected PropertyWriter(PropertyMetadata md) {
        super(md);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter;PropertyWriter(BeanPropertyDefinition);;;protected PropertyWriter(BeanPropertyDefinition propDef) {
        super(propDef.getMetadata());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter;PropertyWriter(PropertyWriter);;;protected PropertyWriter(PropertyWriter base) {
        super(base);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyWriter;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
    public abstract void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
            SerializerProvider provider)
        throws JsonMappingException;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;buildWriter(SerializerProvider,BeanPropertyDefinition,JavaType,JsonSerializer<?>,TypeSerializer,TypeSerializer,AnnotatedMember,boolean);;;        */
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;buildWriter(SerializerProvider,BeanPropertyDefinition,JavaType,JsonSerializer<?>,TypeSerializer,TypeSerializer,AnnotatedMember,boolean);;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;findSerializationType(Annotated,boolean,JavaType);;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;getDefaultBean();;;                 */

                // And use a marker
                def = NO_DEFAULT_MARKER;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;getDefaultBean();;;            _defaultBean = def;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;getPropertyDefaultValue(String,AnnotatedMember,JavaType);;;protected Object getPropertyDefaultValue(String name, AnnotatedMember member,
            JavaType type)
    {
        Object defaultBean = getDefaultBean();
        if (defaultBean == null) {
            return getDefaultValue(type);
        }
        try {
            return member.getValue(defaultBean);
        } catch (Exception e) {
            return _throwWrapped(e, name, defaultBean);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder;getDefaultValue(JavaType);;;protected Object getDefaultValue(JavaType type)
    {
        // 06-Nov-2015, tatu: Returning null is fine for Object types; but need special
        //   handling for primitives since they are never passed as nulls.
        Class<?> cls = type.getRawClass();

        Class<?> prim = ClassUtil.primitiveType(cls);
        if (prim != null) {
            return ClassUtil.defaultValue(prim);
        }
        if (type.isContainerType() || type.isReferenceType()) {
            return JsonInclude.Include.NON_EMPTY;
        }
        if (cls == String.class) {
            return "";
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory;findBeanSerializer(SerializerProvider,JavaType,BeanDescription);public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc);;public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type,
            BeanDescription beanDesc)
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory;findReferenceSerializer(SerializerProvider,ReferenceType,BeanDescription,boolean);;;public JsonSerializer<?> findReferenceSerializer(SerializerProvider prov, ReferenceType refType,
            BeanDescription beanDesc, boolean staticTyping)
        throws JsonMappingException
    {
        JavaType contentType = refType.getContentType(); 
        TypeSerializer contentTypeSerializer = contentType.getTypeHandler();
        final SerializationConfig config = prov.getConfig();
        if (contentTypeSerializer == null) {
            contentTypeSerializer = createTypeSerializer(config, contentType);
        }
        JsonSerializer<Object> contentSerializer = contentType.getValueHandler();
        for (Serializers serializers : customSerializers()) {
            JsonSerializer<?> ser = serializers.findReferenceSerializer(config, refType, beanDesc,
                    contentTypeSerializer, contentSerializer);
            if (ser != null) {
                return ser;
            }
        }
        if (refType.isTypeOrSubTypeOf(AtomicReference.class)) {
            return new AtomicReferenceSerializer(refType, staticTyping,
                    contentTypeSerializer, contentSerializer);
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory;constructBeanSerializer(SerializerProvider,BeanDescription);        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory;_constructWriter(SerializerProvider,BeanPropertyDefinition,PropertyBuilder,boolean,AnnotatedMember);;;protected BeanPropertyWriter _constructWriter(SerializerProvider prov,
            BeanPropertyDefinition propDef,
            PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor)
        throws JsonMappingException
    {
        final PropertyName name = propDef.getFullName();
        if (prov.canOverrideAccessModifiers()) {
            accessor.fixAccess(prov.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));
        }
        JavaType type = accessor.getType();
        BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(),
                pb.getClassAnnotations(), accessor, propDef.getMetadata());

        // Does member specify a serializer? If so, let's use it.
        JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov,
                accessor);
        /* 02-Feb-2012, tatu: Unlike most other code paths, serializer produced
         *  here will NOT be resolved or contextualized, unless done here, so:
         */
        if (annotatedSerializer instanceof ResolvableSerializer) {
            ((ResolvableSerializer) annotatedSerializer).resolve(prov);
        }
        // 05-Sep-2013, tatu: should be primary property serializer so:
        annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property);
        // And how about polymorphic typing? First special to cover JAXB per-field settings:
        TypeSerializer contentTypeSer = null;
        // 16-Feb-2014, cgc: contentType serializers for collection-like and map-like types
        if (ClassUtil.isCollectionMapOrArray(type.getRawClass())
                || type.isCollectionLikeType() || type.isMapLikeType()) {
            contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor);
        }
        // and if not JAXB collection/array with annotations, maybe regular type info?
        TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor);
        BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer,
                        typeSer, contentTypeSer, accessor, staticTyping);
        return pbw;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer;hasContentTypeAnnotation(SerializerProvider,BeanProperty);;;        /*
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/ContainerSerializer;hasContentTypeAnnotation(SerializerProvider,BeanProperty);;;        */
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/Serializers;findReferenceSerializer(SerializationConfig,ReferenceType,BeanDescription,TypeSerializer,JsonSerializer<Object>);;;public JsonSerializer<?> findReferenceSerializer(SerializationConfig config,
            ReferenceType type, BeanDescription beanDesc,
            TypeSerializer contentTypeSerializer, JsonSerializer<Object> contentValueSerializer);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/Serializers;findReferenceSerializer(SerializationConfig,ReferenceType,BeanDescription,TypeSerializer,JsonSerializer<Object>);;;@Override
        public JsonSerializer<?> findReferenceSerializer(SerializationConfig config,
                ReferenceType type, BeanDescription beanDesc,
                TypeSerializer contentTypeSerializer, JsonSerializer<Object> contentValueSerializer) {
            // 21-Oct-2015, tatu: For backwards compatibility, let's delegate to "bean" variant,
            //    for 2.7 -- remove work-around from 2.8 or later
            return findSerializer(config, type, beanDesc);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/SerializerCache;addAndResolveNonTypedSerializer(Class<?>,JavaType,JsonSerializer<Object>,SerializerProvider);;;public void addAndResolveNonTypedSerializer(Class<?> rawType, JavaType fullType,
            JsonSerializer<Object> ser,
            SerializerProvider provider)
        throws JsonMappingException
    {
        synchronized (this) {
            Object ob1 = _sharedMap.put(new TypeKey(rawType, false), ser);
            Object ob2 = _sharedMap.put(new TypeKey(fullType, false), ser);
            if ((ob1 == null) || (ob2 == null)) {
                _readOnlyMap.set(null);
            }
            if (ser instanceof ResolvableSerializer) {
                ((ResolvableSerializer) ser).resolve(provider);
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory;findSerializerByPrimaryType(SerializerProvider,JavaType,BeanDescription,boolean);;;            // 18-Oct-2015, tatu: With 2.7, need to dig type info:
            JavaType mapEntryType = type.findSuperType(Map.Entry.class);
            
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider;hasSerializerFor(Class<?>,AtomicReference<Throwable>);;;        // 07-Nov-2015, tatu: One special case, Object.class; will work only if
        //   empty beans are allowed or custom serializer registered. Easiest to
        //   check here.
        if (cls == Object.class) {
            if (!_config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {
                return true;
            }
        }
        
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter;VirtualBeanPropertyWriter(BeanPropertyDefinition,Annotations,JavaType,JsonSerializer<?>,TypeSerializer,JavaType,JsonInclude.Value);;;protected VirtualBeanPropertyWriter(BeanPropertyDefinition propDef,
            Annotations contextAnnotations, JavaType declaredType,
            JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType,
            JsonInclude.Value inclusion)
    {
        super(propDef, propDef.getPrimaryMember(), contextAnnotations, declaredType,
                ser, typeSer, serType,
                _suppressNulls(inclusion), _suppressableValue(inclusion));
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter;_suppressNulls(JsonInclude.Value);;;protected static boolean _suppressNulls(JsonInclude.Value inclusion) {
        if (inclusion == null) {
            return false;
        }
        JsonInclude.Include incl = inclusion.getValueInclusion();
        return (incl != JsonInclude.Include.ALWAYS) && (incl != JsonInclude.Include.USE_DEFAULTS);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/VirtualBeanPropertyWriter;_suppressableValue(JsonInclude.Value);;;protected static Object _suppressableValue(JsonInclude.Value inclusion) {
        if (inclusion == null) {
            return false;
        }
        JsonInclude.Include incl = inclusion.getValueInclusion();
        if ((incl == JsonInclude.Include.ALWAYS)
                || (incl == JsonInclude.Include.NON_NULL)
                || (incl == JsonInclude.Include.USE_DEFAULTS)) {
            return null;
        }
        return MARKER_FOR_EMPTY;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/ClassSerializer;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);            throws JsonMappingException;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);                throws JsonMappingException;;            throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);                throws JsonMappingException;;            throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);                throws JsonMappingException;;            throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdArraySerializers;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);                throws JsonMappingException;;            throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/FileSerializer;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);            throws JsonMappingException;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers;all();        ;;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdJdkSerializers;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);                throws JsonMappingException;;            throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);;;        final SerializerProvider provider = visitor.getProvider();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;AtomicReferenceSerializer(ReferenceType,boolean,TypeSerializer,JsonSerializer<Object>);;;public AtomicReferenceSerializer(ReferenceType fullType, boolean staticTyping, TypeSerializer vts,
            JsonSerializer<Object> ser)
    {
        super(fullType);
        _referredType = fullType.getReferencedType();
        _property = null;
        _valueTypeSerializer = vts;
        _valueSerializer = ser;
        _unwrapper = null;
        _contentInclusion = null;
        _dynamicSerializers = PropertySerializerMap.emptyForProperties();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;AtomicReferenceSerializer(AtomicReferenceSerializer,BeanProperty,TypeSerializer,JsonSerializer<?>,NameTransformer,JsonInclude.Include);;;@SuppressWarnings("unchecked")
    protected AtomicReferenceSerializer(AtomicReferenceSerializer base, BeanProperty property,
            TypeSerializer vts, JsonSerializer<?> valueSer,
            NameTransformer unwrapper,
            JsonInclude.Include contentIncl)
    {
        super(base);
        _referredType = base._referredType;
        _dynamicSerializers = base._dynamicSerializers;
        _property = property;
        _valueTypeSerializer = vts;
        _valueSerializer = (JsonSerializer<Object>) valueSer;
        _unwrapper = unwrapper;
        if ((contentIncl == JsonInclude.Include.USE_DEFAULTS)
                || (contentIncl == JsonInclude.Include.ALWAYS)) {
            _contentInclusion = null;
        } else {
            _contentInclusion = contentIncl;
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;unwrappingSerializer(NameTransformer);;;@Override
    public JsonSerializer<AtomicReference<?>> unwrappingSerializer(NameTransformer transformer) {
        JsonSerializer<Object> ser = _valueSerializer;
        if (ser != null) {
            ser = ser.unwrappingSerializer(transformer);
        }
        NameTransformer unwrapper = (_unwrapper == null) ? transformer
                : NameTransformer.chainedTransformer(transformer, _unwrapper);
        return withResolved(_property, _valueTypeSerializer, ser, unwrapper, _contentInclusion);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;withResolved(BeanProperty,TypeSerializer,JsonSerializer<?>,NameTransformer,JsonInclude.Include);;;protected AtomicReferenceSerializer withResolved(BeanProperty prop,
            TypeSerializer vts, JsonSerializer<?> valueSer,
            NameTransformer unwrapper,
            JsonInclude.Include contentIncl)
    {
        if ((_property == prop) && (contentIncl == _contentInclusion)
                && (_valueTypeSerializer == vts) && (_valueSerializer == valueSer)
                && (_unwrapper == unwrapper)) {
            return this;
        }
        return new AtomicReferenceSerializer(this, prop, vts, valueSer, unwrapper, contentIncl);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;createContextual(SerializerProvider,BeanProperty);;;@Override
    public JsonSerializer<?> createContextual(SerializerProvider provider,
            BeanProperty property) throws JsonMappingException
    {
        TypeSerializer typeSer = _valueTypeSerializer;
        if (typeSer != null) {
            typeSer = typeSer.forProperty(property);
        }
        JsonSerializer<?> ser = _valueSerializer;
        if (ser == null) {
            // A few conditions needed to be able to fetch serializer here:
            if (_useStatic(provider, property, _referredType)) {
                ser = _findSerializer(provider, _referredType, property);
            }
        } else {
            ser = provider.handlePrimaryContextualization(ser, property);
        }
        // Also: may want to have more refined exclusion based on referenced value
        JsonInclude.Include contentIncl = _contentInclusion;
        if (property != null) {

            JsonInclude.Value incl = property.findPropertyInclusion(provider.getConfig(),
                    AtomicReference.class);
            JsonInclude.Include newIncl = incl.getContentInclusion();
            if ((newIncl != contentIncl) && (newIncl != JsonInclude.Include.USE_DEFAULTS)) {
                contentIncl = newIncl;
            }
        }
        return withResolved(property, typeSer, ser, _unwrapper, contentIncl);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;_useStatic(SerializerProvider,BeanProperty,JavaType);;;protected boolean _useStatic(SerializerProvider provider, BeanProperty property,
            JavaType referredType)
    {
        // First: no serializer for `Object.class`, must be dynamic
        if (referredType.isJavaLangObject()) {
            return false;
        }
        // but if type is final, might as well fetch
        if (referredType.isFinal()) { // or should we allow annotation override? (only if requested...)
            return true;
        }
        // also: if indicated by typing, should be considered static
        if (referredType.useStaticType()) {
            return true;
        }
        // if neither, maybe explicit annotation?
        AnnotationIntrospector intr = provider.getAnnotationIntrospector();
        if ((intr != null) && (property != null)) {
            Annotated ann = property.getMember();
            if (ann != null) {
                JsonSerialize.Typing t = intr.findSerializationTyping(property.getMember());
                if (t == JsonSerialize.Typing.STATIC) {
                    return true;
                }
                if (t == JsonSerialize.Typing.DYNAMIC) {
                    return false;
                }
            }
        }
        // and finally, may be forced by global static typing (unlikely...)
        return provider.isEnabled(MapperFeature.USE_STATIC_TYPING);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;isUnwrappingSerializer();;;@Override
    public boolean isUnwrappingSerializer() {
        return (_unwrapper != null);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;serializeWithType(AtomicReference<?>,JsonGenerator,SerializerProvider,TypeSerializer);;;@Override
    public void serializeWithType(AtomicReference<?> ref,
            JsonGenerator g, SerializerProvider provider,
            TypeSerializer typeSer) throws IOException
    {
        Object value = ref.get();
        if (value == null) {
            if (_unwrapper == null) {
                provider.defaultSerializeNull(g);
            }
            return;
        }

        // Otherwise apply type-prefix/suffix, then std serialize:
        typeSer.writeTypePrefixForScalar(ref, g);
        serialize(ref, g, provider);
        typeSer.writeTypeSuffixForScalar(ref, g);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);            throws JsonMappingException;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;_findCachedSerializer(SerializerProvider,Class<?>);;;private final JsonSerializer<Object> _findCachedSerializer(SerializerProvider provider,
            Class<?> type) throws JsonMappingException
    {
        JsonSerializer<Object> ser = _dynamicSerializers.serializerFor(type);
        if (ser == null) {
            ser = _findSerializer(provider, type, _property);
            if (_unwrapper != null) {
                ser = ser.unwrappingSerializer(_unwrapper);
            }
            _dynamicSerializers = _dynamicSerializers.newWith(type, ser);
        }
        return ser;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;_findSerializer(SerializerProvider,Class<?>,BeanProperty);;;private final JsonSerializer<Object> _findSerializer(SerializerProvider provider,
            Class<?> type, BeanProperty prop) throws JsonMappingException
    {
        return provider.findTypedValueSerializer(type, true, prop);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AtomicReferenceSerializer;_findSerializer(SerializerProvider,JavaType,BeanProperty);;;private final JsonSerializer<Object> _findSerializer(SerializerProvider provider,
        JavaType type, BeanProperty prop) throws JsonMappingException
    {
        return provider.findTypedValueSerializer(type, true, prop);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty;MapProperty(TypeSerializer,BeanProperty);;;        super((prop == null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL : prop.getMetadata());
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
    public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,
            SerializerProvider provider)
        throws JsonMappingException
    {
        if (_property != null) {
            _property.depositSchemaProperty(objectVisitor, provider);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty;getType();;;@Override
    public JavaType getType() {
        return (_property == null) ? TypeFactory.unknownType() : _property.getType();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty;getWrapperName();;;@Override
    public PropertyName getWrapperName() {
        return (_property == null) ? null : _property.getWrapperName();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/MapProperty;getMember();;;@Override
    public AnnotatedMember getMember() {
        return (_property == null) ? null : _property.getMember();
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/SqlTimeSerializer;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);            throws JsonMappingException;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/ByteArraySerializer;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);            throws JsonMappingException;;        throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;getSchema(SerializerProvider,Type);    public JsonNode getSchema(SerializerProvider provider, Type typeHint)
        throws JsonMappingException;;    public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;getSchema(SerializerProvider,Type,boolean);    	ObjectNode schema = (ObjectNode) getSchema(provider, typeHint);
    	if (!isOptional) {
    		schema.put("required", !isOptional);
    	};;        ObjectNode schema = (ObjectNode) getSchema(provider, typeHint);
        if (!isOptional) {
    		    schema.put("required", !isOptional);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitStringFormat(JsonFormatVisitorWrapper,JavaType);;;protected void visitStringFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint)
            throws JsonMappingException {
        if (visitor != null) {
            /*JsonStringFormatVisitor v2 =*/ visitor.expectStringFormat(typeHint);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitStringFormat(JsonFormatVisitorWrapper,JavaType,JsonValueFormat);;;protected void visitStringFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,
            JsonValueFormat format)
        throws JsonMappingException
    {
        if (visitor != null) {
            JsonStringFormatVisitor v2 = visitor.expectStringFormat(typeHint);
            if (v2 != null) {
                v2.format(format);
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitIntFormat(JsonFormatVisitorWrapper,JavaType,NumberType);;;protected void visitIntFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,
            NumberType numberType)
        throws JsonMappingException
    {
        if (visitor != null) {
            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
            if (v2 != null) {
                if (numberType != null) {
                    v2.numberType(numberType);
                }
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitIntFormat(JsonFormatVisitorWrapper,JavaType,NumberType,JsonValueFormat);;;protected void visitIntFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,
            NumberType numberType, JsonValueFormat format)
        throws JsonMappingException
    {
        if (visitor != null) {
            JsonIntegerFormatVisitor v2 = visitor.expectIntegerFormat(typeHint);
            if (v2 != null) {
                if (numberType != null) {
                    v2.numberType(numberType);
                }
                if (format != null) {
                    v2.format(format);
                }
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitFloatFormat(JsonFormatVisitorWrapper,JavaType,NumberType);;;protected void visitFloatFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,
            NumberType numberType)
        throws JsonMappingException
    {
        if (visitor != null) {
            JsonNumberFormatVisitor v2 = visitor.expectNumberFormat(typeHint);
            if (v2 != null) {
                v2.numberType(numberType);
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitArrayFormat(JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType);;;protected void visitArrayFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,
            JsonSerializer<?> itemSerializer, JavaType itemType)
        throws JsonMappingException
    {
        if (visitor != null) {
            JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);
            if (v2 != null) {
                if (itemSerializer != null) {
                    v2.itemsFormat(itemSerializer, itemType);
                }
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;visitArrayFormat(JsonFormatVisitorWrapper,JavaType,JsonFormatTypes);;;protected void visitArrayFormat(JsonFormatVisitorWrapper visitor, JavaType typeHint,
            JsonFormatTypes itemType)
        throws JsonMappingException
    {
        if (visitor != null) {
            JsonArrayFormatVisitor v2 = visitor.expectArrayFormat(typeHint);
            if (v2 != null) {
                v2.itemsFormat(itemType);
            }
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>);;;        Object ob = provider.getAttribute(CONVERTING_CONTENT_CONVERTER_LOCK);
        if (ob != null) {
            return existingSerializer;
        }
        
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;findFormatOverrides(SerializerProvider,BeanProperty,Class<?>);;;protected JsonFormat.Value findFormatOverrides(SerializerProvider provider,
            BeanProperty prop, Class<?> typeForDefaults)
    {
        if (prop != null) {
            return prop.findPropertyFormat(provider.getConfig(), typeForDefaults);
        }
        // even without property or AnnotationIntrospector, may have type-specific defaults
        return provider.getDefaultPropertyFormat(typeForDefaults);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer;findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature);;;protected Boolean findFormatFeature(SerializerProvider provider,
            BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)
    {
        JsonFormat.Value format = findFormatOverrides(provider, prop, typeForDefaults);
        if (format != null) {
            return format.getFeature(feat);
        }
        return null;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;NumberSerializers();protected NumberSerializers() { };;protected NumberSerializers() {
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;addAll(Map<String,JsonSerializer<?>>);public static void addAll(Map<String, JsonSerializer<?>> allDeserializers)
    {;;public static void addAll(Map<String, JsonSerializer<?>> allDeserializers) {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;Base(Class<?>,JsonParser.NumberType,String);protected Base(Class<?> cls, JsonParser.NumberType numberType, String schemaType) {;;protected Base(Class<?> cls, JsonParser.NumberType numberType,
                String schemaType) {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;Base(Class<?>,JsonParser.NumberType,String);                    || (numberType == JsonParser.NumberType.BIG_INTEGER)
                    ;;;                    || (numberType == JsonParser.NumberType.BIG_INTEGER);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException;;        public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,
                JavaType typeHint) throws JsonMappingException
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;createContextual(SerializerProvider,BeanProperty);                BeanProperty property) throws JsonMappingException
        {;;                BeanProperty property) throws JsonMappingException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;createContextual(SerializerProvider,BeanProperty);                    JsonFormat.Value format = prov.getAnnotationIntrospector().findFormat(m);;;                    JsonFormat.Value format = prov.getAnnotationIntrospector()
                            .findFormat(m);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;ShortSerializer();public ShortSerializer() { super(Short.class, JsonParser.NumberType.INT, "number"); };;public ShortSerializer() {
            super(Short.class, JsonParser.NumberType.INT, "number");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serialize(Object,JsonGenerator,SerializerProvider);;;@Override
        public void serialize(Object value, JsonGenerator gen,
                SerializerProvider provider) throws IOException {
            gen.writeNumber(((Short) value).shortValue());
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;IntegerSerializer();public IntegerSerializer() { super(Integer.class, JsonParser.NumberType.INT ,"integer"); };;public IntegerSerializer() {
            super(Integer.class, JsonParser.NumberType.INT, "integer");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serialize(Object,JsonGenerator,SerializerProvider);        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {;;        public void serialize(Object value, JsonGenerator gen,
                SerializerProvider provider) throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer);                SerializerProvider provider, TypeSerializer typeSer) throws IOException {;;                SerializerProvider provider, TypeSerializer typeSer)
                throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer);            serialize(value, gen, provider);            ;;            serialize(value, gen, provider);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serialize(Object,JsonGenerator,SerializerProvider);;;@Override
        public void serialize(Object value, JsonGenerator gen,
                SerializerProvider provider) throws IOException {
            gen.writeNumber(((Number) value).intValue());
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;LongSerializer();public LongSerializer() { super(Long.class, JsonParser.NumberType.LONG, "number"); };;public LongSerializer() {
            super(Long.class, JsonParser.NumberType.LONG, "number");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serialize(Object,JsonGenerator,SerializerProvider);        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {;;        public void serialize(Object value, JsonGenerator gen,
                SerializerProvider provider) throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;FloatSerializer();public FloatSerializer() { super(Float.class, JsonParser.NumberType.FLOAT, "number"); };;public FloatSerializer() {
            super(Float.class, JsonParser.NumberType.FLOAT, "number");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serialize(Object,JsonGenerator,SerializerProvider);        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {;;        public void serialize(Object value, JsonGenerator gen,
                SerializerProvider provider) throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;DoubleSerializer();public DoubleSerializer() { super(Double.class, JsonParser.NumberType.DOUBLE, "number"); };;public DoubleSerializer() {
            super(Double.class, JsonParser.NumberType.DOUBLE, "number");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serialize(Object,JsonGenerator,SerializerProvider);        public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException {;;        public void serialize(Object value, JsonGenerator gen,
                SerializerProvider provider) throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer);                SerializerProvider provider, TypeSerializer typeSer) throws IOException {;;                SerializerProvider provider, TypeSerializer typeSer)
                throws IOException {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializers;serializeWithType(Object,JsonGenerator,SerializerProvider,TypeSerializer);            serialize(value, gen, provider);            ;;            serialize(value, gen, provider);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/std/AsArraySerializerBase;acceptJsonFormatVisitor(JsonFormatVisitorWrapper,JavaType);;;        visitArrayFormat(visitor, typeHint, valueSer, _elementType);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanPropertyWriter;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
    public void depositSchemaProperty(final JsonObjectFormatVisitor visitor,
            SerializerProvider provider) throws JsonMappingException
    {
        JsonSerializer<Object> ser = provider
                .findValueSerializer(this.getType(), this)
                .unwrappingSerializer(_nameTransformer);

        if (ser.isUnwrappingSerializer()) {
            ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base(provider) {
                // an unwrapping serializer will always expect ObjectFormat,
                // hence, the other cases do not have to be implemented
                @Override
                public JsonObjectFormatVisitor expectObjectFormat(JavaType type)
                        throws JsonMappingException {
                    return visitor;
                }
            }, this.getType());
        } else {
            super.depositSchemaProperty(visitor, provider);
        }
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/impl/StringArraySerializer;createContextual(SerializerProvider,BeanProperty);;;        // but since formats have both property overrides and global per-type defaults,
        // need to do that separately
        Boolean unwrapSingle = findFormatFeature(provider, property, String[].class,
                JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/impl/UnknownSerializer;failForEmpty(JsonGenerator,Object);;;protected void failForEmpty(JsonGenerator gen, Object value) throws JsonMappingException {
        throw JsonMappingException.from(gen,
                "No serializer found for class "+value.getClass().getName()+" and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )");
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/impl/AttributePropertyWriter;AttributePropertyWriter(String,BeanPropertyDefinition,Annotations,JavaType,JsonInclude.Value);;;protected AttributePropertyWriter(String attrName, BeanPropertyDefinition propDef,
            Annotations contextAnnotations, JavaType declaredType,
            JsonInclude.Value inclusion)
    {
        super(propDef, contextAnnotations, declaredType,
                /* value serializer */ null, /* type serializer */ null, /* ser type */ null,
                inclusion);
        _attrName = attrName;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
        public void depositSchemaProperty(JsonObjectFormatVisitor v,
                SerializerProvider provider) throws JsonMappingException
        {
            Class<?> activeView = provider.getActiveView();
            if (activeView == null || _view.isAssignableFrom(activeView)) {
                super.depositSchemaProperty(v, provider);
            }
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b8e2580_1317d3e/rev_b8e2580-1317d3e;/src/main/java/com/fasterxml/jackson/databind/ser/impl/FilteredBeanPropertyWriter;depositSchemaProperty(JsonObjectFormatVisitor,SerializerProvider);;;@Override
        public void depositSchemaProperty(JsonObjectFormatVisitor v,
                SerializerProvider provider) throws JsonMappingException
        {
            Class<?> activeView = provider.getActiveView();
            if (activeView != null) {
                int i = 0, len = _views.length;
                for (; i < len; ++i) {
                    if (_views[i].isAssignableFrom(activeView)) break;
                }
                if (i == len) { // not match? Just don't deposit
                    return;
                }
            }
            super.depositSchemaProperty(v, provider);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;DateAsDefaultBean(long);;;public DateAsDefaultBean(long l) { date = new java.util.Date(l); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;DateAsDefaultBeanWithEmptyJsonFormat(long);;;public DateAsDefaultBeanWithEmptyJsonFormat(long l) { date = new java.util.Date(l); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;DateAsDefaultBeanWithPattern(long);;;public DateAsDefaultBeanWithPattern(long l) { date = new java.util.Date(l); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;DateAsDefaultBeanWithLocale(long);;;public DateAsDefaultBeanWithLocale(long l) { date = new java.util.Date(l); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;DateAsDefaultBeanWithTimezone(long);;;public DateAsDefaultBeanWithTimezone(long l) { date = new java.util.Date(l); }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest;testDateDefaultShape();;;public void testDateDefaultShape() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        // No @JsonFormat => default to user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        String json = mapper.writeValueAsString(new DateAsDefaultBean(0L));
        assertEquals(aposToQuotes("{'date':0}"), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBean(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01T00:00:00.000+0000'}"), json);

        // Empty @JsonFormat => default to user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));
        assertEquals(aposToQuotes("{'date':0}"), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01T00:00:00.000+0000'}"), json);

        // @JsonFormat with Shape.ANY and pattern => STRING shape, regardless of user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01'}"), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01'}"), json);

        // @JsonFormat with Shape.ANY and locale => STRING shape, regardless of user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01T00:00:00.000+0000'}"), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01T00:00:00.000+0000'}"), json);

        // @JsonFormat with Shape.ANY and timezone => STRING shape, regardless of user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01T01:00:00.000+0100'}"), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));
        assertEquals(aposToQuotes("{'date':'1970-01-01T01:00:00.000+0100'}"), json);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase;createContextual(SerializerProvider,BeanProperty);                                           ? format.getPattern()
                                           : StdDateFormat.DATE_FORMAT_STR_ISO8601;;;                                    ? format.getPattern()
                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_37034fc_bacb37f/rev_37034fc-bacb37f;/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase;createContextual(SerializerProvider,BeanProperty);                                       ? format.getLocale()
                                       : serializers.getLocale();;;                                    ? format.getLocale()
                                    : serializers.getLocale();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer;deserializeWithExternalTypeId(JsonParser,DeserializationContext,Object);;;                // [JACKSON-831]: may have property AND be used as external type id:
                if (t.isScalarValue()) {
                    ext.handleTypePropertyValue(p, ctxt, propName, bean);
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setCardHolderFirstName(String);;;public void setCardHolderFirstName (String cardHolderFirstName) {
                this.cardHolderFirstName = cardHolderFirstName;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setCardHolderLastName(String);;;public void setCardHolderLastName (String cardHolderLastName) {
                this.cardHolderLastName = cardHolderLastName;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setNumber(String);;;public void setNumber (String number) {
                this.number = number;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setExpiryDate(String);;;public void setExpiryDate (String expiryDate) {
                this.expiryDate = expiryDate;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setCsc(int);;;public void setCsc (int csc) {
                this.csc = csc;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setAddress(String);;;public void setAddress (String address) {
                this.address = address;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setZipCode(String);;;public void setZipCode (String zipCode) {
                this.zipCode = zipCode;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setCity(String);;;public void setCity (String city) {
                this.city = city;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setProvince(String);;;public void setProvince (String province) {
                this.province = province;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setCountryCode(String);;;public void setCountryCode (String countryCode) {
                this.countryCode = countryCode;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setDescription(String);;;public void setDescription (String description) {
                this.description = description;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setPaymentInstrumentID(UUID);;;public void setPaymentInstrumentID (UUID paymentInstrumentID) {
                this.paymentInstrumentID = paymentInstrumentID;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setName(String);;;public void setName (String name) {
                this.name = name;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;FormOfPayment(Class<?extendsPaymentDetails>);;;FormOfPayment (final Class<? extends PaymentDetails> clazz) {
                this.clazz = clazz;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;getDetailsClass();;;@SuppressWarnings ("unchecked")
            public <T extends PaymentDetails> Class<T> getDetailsClass () {
                return (Class<T>) this.clazz;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;fromDetailsClass(Class<PaymentDetails>);;;public static FormOfPayment fromDetailsClass (Class<PaymentDetails> detailsClass) {
                for (FormOfPayment fop : FormOfPayment.values ()) {
                    if (fop.clazz == detailsClass) {
                        return fop;
                    }
                }
                throw new IllegalArgumentException ("not found");
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;build();;;PaymentDetails build ();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setFormOfPayment(FormOfPayment);;;public void setFormOfPayment (FormOfPayment formOfPayment) {
                this.formOfPayment = formOfPayment;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;setPaymentDetails(PaymentDetails);;;@JsonTypeInfo (use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "form_of_payment", visible = true)
            @JsonTypeIdResolver (PaymentDetailsTypeIdResolver.class)
            public void setPaymentDetails (PaymentDetails paymentDetails) {
                this.paymentDetails = paymentDetails;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;idFromValue(Object);;;@SuppressWarnings ("unchecked")
            @Override
            public String idFromValue (Object value) {
                if (! (value instanceof PaymentDetails)) {
                    return null;
                }
                return FormOfPayment.fromDetailsClass ((Class<PaymentDetails>) value.getClass ()).name ();
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;idFromValueAndType(Object,Class<?>);;;@Override
            public String idFromValueAndType (Object value, Class<?> suggestedType) {
                return this.idFromValue (value);
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;getDescForKnownTypeIds();;;@Override
            public String getDescForKnownTypeIds () {
                return "PaymentDetails";
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;getMechanism();;;@Override
            public Id getMechanism () {
                return JsonTypeInfo.Id.CUSTOM;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;build();@Override
                public CreditCardDetails build () {
                    return new CreditCardDetails (this.cardHolderFirstName, this.cardHolderLastName, this.number, this.expiryDate, this.csc, this.address, this.zipCode, this.city,
                            this.province, this.countryCode, "COMPANY CREDIT CARD");
                };;@Override
                public CreditCardDetails build() {
                    return new CreditCardDetails (this.cardHolderFirstName, this.cardHolderLastName, this.number, this.expiryDate, this.csc, this.address, this.zipCode, this.city,
                            this.province, this.countryCode, "COMPANY CREDIT CARD");
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;cardHolderFirstName(String);public CompanyCreditCardDetailsBuilder cardHolderFirstName (final String cardHolderFirstName) {
                    this.cardHolderFirstName = cardHolderFirstName;
                    return this;
                };;public CompanyCreditCardDetailsBuilder cardHolderFirstName(final String cardHolderFirstName) {
                    this.cardHolderFirstName = cardHolderFirstName;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;cardHolderLastName(String);;;public CompanyCreditCardDetailsBuilder cardHolderLastName (final String cardHolderLastName) {
                    this.cardHolderLastName = cardHolderLastName;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;city(String);;;public CompanyCreditCardDetailsBuilder city (final String city) {
                    this.city = city;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;countryCode(String);;;public CompanyCreditCardDetailsBuilder countryCode (final String countryCode) {
                    this.countryCode = countryCode;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;csc(int);;;public CompanyCreditCardDetailsBuilder csc (final int csc) {
                    this.csc = csc;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;expiryDate(String);;;public CompanyCreditCardDetailsBuilder expiryDate (final String expiryDate) {
                    this.expiryDate = expiryDate;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;number(String);;;public CompanyCreditCardDetailsBuilder number (final String number) {
                    this.number = number;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;province(String);;;public CompanyCreditCardDetailsBuilder province (final String province) {
                    this.province = province;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;zipCode(String);;;public CompanyCreditCardDetailsBuilder zipCode (final String zipCode) {
                    this.zipCode = zipCode;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;address(String);;;public IndividualCreditCardDetailsBuilder address (final String address) {
                    this.address = address;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;build();;;@Override
                public CreditCardDetails build () {
                    return new CreditCardDetails (this.cardHolderFirstName, this.cardHolderLastName, this.number, this.expiryDate, this.csc, this.address, this.zipCode, this.city,
                            this.province, this.countryCode, this.description);
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;cardHolderFirstName(String);;;public IndividualCreditCardDetailsBuilder cardHolderFirstName (final String cardHolderFirstName) {
                    this.cardHolderFirstName = cardHolderFirstName;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;cardHolderLastName(String);;;public IndividualCreditCardDetailsBuilder cardHolderLastName (final String cardHolderLastName) {
                    this.cardHolderLastName = cardHolderLastName;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;city(String);;;public IndividualCreditCardDetailsBuilder city (final String city) {
                    this.city = city;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;countryCode(String);;;public IndividualCreditCardDetailsBuilder countryCode (final String countryCode) {
                    this.countryCode = countryCode;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;csc(int);;;public IndividualCreditCardDetailsBuilder csc (final int csc) {
                    this.csc = csc;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;description(String);;;public IndividualCreditCardDetailsBuilder description (final String description) {
                    this.description = description;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;expiryDate(String);;;public IndividualCreditCardDetailsBuilder expiryDate (final String expiryDate) {
                    this.expiryDate = expiryDate;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;number(String);;;public IndividualCreditCardDetailsBuilder number (final String number) {
                    this.number = number;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;CreditCardDetails(String,String,String,String,int,String,String,String,String,String,String);;;public CreditCardDetails (final String cardHolderFirstName, final String cardHolderLastName, final String number, final String expiryDate, final int csc,
                    final String address, final String zipCode, final String city, final String province, final String countryCode, final String description) {
                super ();
                this.cardHolderFirstName = cardHolderFirstName;
                this.cardHolderLastName = cardHolderLastName;
                this.number = number;
                this.expiryDate = expiryDate;
                this.csc = csc;
                this.address = address;
                this.zipCode = zipCode;
                this.city = city;
                this.province = province;
                this.countryCode = countryCode;
                this.description = description;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;build();;;@Override
                public EncryptedCreditCardDetails build () {
                    return new EncryptedCreditCardDetails (this.paymentInstrumentID, this.name);
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;name(String);;;public InstrumentedCreditCardBuilder name (final String name) {
                    this.name = name;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;paymentInstrumentID(UUID);;;public InstrumentedCreditCardBuilder paymentInstrumentID (final UUID paymentInstrumentID) {
                    this.paymentInstrumentID = paymentInstrumentID;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;EncryptedCreditCardDetails(UUID,String);;;private EncryptedCreditCardDetails (final UUID paymentInstrumentID, final String name) {
                super ();
                this.paymentInstrumentID = paymentInstrumentID;
                this.name = name;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;FormOfPayment(Class<?extendsPaymentDetails.Builder>);;;FormOfPayment (final Class<? extends PaymentDetails.Builder> builderClass) {
                this.builderClass = builderClass;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;getDetailsClass();;;@SuppressWarnings ("unchecked")
            public <T extends PaymentDetails> Class<T> getDetailsClass () {
                return (Class<T>) this.builderClass.getEnclosingClass ();
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;fromDetailsClass(Class<PaymentDetails>);;;public static FormOfPayment fromDetailsClass (Class<PaymentDetails> detailsClass) {
                for (FormOfPayment fop : FormOfPayment.values ()) {
                    if (fop.builderClass.getEnclosingClass () == detailsClass) {
                        return fop;
                    }
                }
                throw new IllegalArgumentException ("not found");
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;build();;;PaymentDetails build ();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;build();;;public PaymentMean build () {
                    return new PaymentMean (this.formOfPayment, this.paymentDetails);
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;formOfPayment(FormOfPayment);;;public Builder formOfPayment (final FormOfPayment val) {
                    this.formOfPayment = val;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;paymentDetails(PaymentDetails);;;@JsonTypeInfo (use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "form_of_payment", visible = true)
                @JsonTypeIdResolver (PaymentDetailsTypeIdResolver.class)
                public Builder paymentDetails (final PaymentDetails val) {
                    this.paymentDetails = val;
                    return this;
                }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;create();public static Builder create () {
                return new Builder ();
            };;public static Builder create() {
                return new Builder();
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;PaymentMean(FormOfPayment,PaymentDetails);;;private PaymentMean (final FormOfPayment formOfPayment, final PaymentDetails paymentDetails) {
                super ();
                this.formOfPayment = formOfPayment;
                this.paymentDetails = paymentDetails;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;idFromValue(Object);;;@SuppressWarnings ("unchecked")
            @Override
            public String idFromValue (Object value) {
                if (! (value instanceof PaymentDetails)) {
                    return null;
                }
                return FormOfPayment.fromDetailsClass ((Class<PaymentDetails>) value.getClass ()).name ();
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;idFromValueAndType(Object,Class<?>);;;@Override
            public String idFromValueAndType (Object value, Class<?> suggestedType) {
                return this.idFromValue (value);
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;getDescForKnownTypeIds();;;@Override
            public String getDescForKnownTypeIds () {
                return "PaymentDetails";
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_c4ecc55_f6fbed5/rev_c4ecc55-f6fbed5;/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdTest1288;getMechanism();;;@Override
            public Id getMechanism () {
                return JsonTypeInfo.Id.CUSTOM;
            }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;A();;;public A() { }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;A(String,String);;;@ConstructorProperties({"id", "name"})
        public A(String id, String name) {
            this.id = id;
            this.name = name;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;getId();;;public String getId() {
            return id;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;setId(String);;;public void setId(String id) {
            this.id = id;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;getName();;;public String getName() {
            return name;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;setName(String);;;public void setName(String name) {
            this.name = name;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_9c39fc2_ceddd2c/rev_9c39fc2-ceddd2c;/src/test/java/com/fasterxml/jackson/failing/ObjectIdWithCreator1367Test;testObjectIdWithCreator1367();;;public void testObjectIdWithCreator1367() throws Exception
    {
        A a = new A("123", "A");

        ObjectMapper om = new ObjectMapper();
        String json = om.writeValueAsString(a);
        A deser = om.readValue(json, A.class);
        assertEquals(a.name, deser.name);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_847fd82_ea30c7b/rev_847fd82-ea30c7b;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;getStr();;;public String getStr() {
            return str;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_847fd82_ea30c7b/rev_847fd82-ea30c7b;/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest;setStr(String);;;public void setStr(String str) {
            this.str = str;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c3cad3_4499bb6/rev_2c3cad3-4499bb6;/src/test/java/com/fasterxml/jackson/failing/GenericParameterTypeFactory1456Test;process(Entity);;;public void process(Entity entity) {}
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c3cad3_4499bb6/rev_2c3cad3-4499bb6;/src/test/java/com/fasterxml/jackson/failing/GenericParameterTypeFactory1456Test;testGenericParameterDirect();;;public void testGenericParameterDirect() throws Exception
    {
        Method proceed = BaseController.class.getMethod("process", BaseEntity.class);
        Type entityType = proceed.getGenericParameterTypes()[0];

        JavaType resolvedType = MAPPER.getTypeFactory().constructType(entityType, ImplController.class);
        assertEquals(ImplEntity.class, resolvedType.getRawClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_2c3cad3_4499bb6/rev_2c3cad3-4499bb6;/src/test/java/com/fasterxml/jackson/failing/GenericParameterTypeFactory1456Test;testGenericParameterViaClass();;;public void testGenericParameterViaClass() throws Exception
    {
        BeanDescription desc = MAPPER.getDeserializationConfig().introspect(
                MAPPER.constructType(ImplController.class));
        AnnotatedClass ac = desc.getClassInfo();
        AnnotatedMethod m = ac.findMethod("process", new Class<?>[] { BaseEntity.class });
        assertNotNull(m);
        assertEquals(1, m.getParameterCount());
        AnnotatedParameter param = m.getParameter(0);
        assertEquals(ImplEntity.class, param.getType().getRawClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_75b7049_d44600d/rev_75b7049-d44600d;/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector;verifyNonDup(AnnotatedWithParams,int,boolean);protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex,
            boolean explicit) {;protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
    {;protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)
    {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_75b7049_d44600d/rev_75b7049-d44600d;/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector;verifyNonDup(AnnotatedWithParams,int,boolean);
            if ((_explicitCreators & mask) != 0) { // already had explicitly
                                                   // annotated, leave as-is;
            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is;            if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_fc74771_8de9cef/rev_fc74771-8de9cef;/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase;BeanDeserializerBase(BeanDeserializerBase,Set<String>);;        
        _classAnnotations = src._classAnnotations;;        _classAnnotations = src._classAnnotations;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_fea0d29_9919f9d/rev_fea0d29-9919f9d;/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer;deserialize(JsonParser,DeserializationContext);;        JsonToken t = p.getCurrentToken();
        ;        JsonToken t = p.getCurrentToken();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_fea0d29_9919f9d/rev_fea0d29-9919f9d;/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer;_deserialize(JsonParser,DeserializationContext,Object);            DeserializationContext ctxt, Object builder) throws IOException
    {        ;            DeserializationContext ctxt, Object builder)
        throws IOException, JsonProcessingException
    {        ;            DeserializationContext ctxt, Object builder)
        throws IOException, JsonProcessingException
    {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_fea0d29_9919f9d/rev_fea0d29-9919f9d;/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer;_deserializeUsingPropertyBased(JsonParser,DeserializationContext);        throws IOException
    { ;        throws IOException, JsonProcessingException
    { ;        throws IOException, JsonProcessingException
    {
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_93a0b9b_32001a6/rev_93a0b9b-32001a6;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;_resolveMemberMethods();;;private AnnotatedMethodMap _resolveMemberMethods()
    {
        AnnotatedMethodMap memberMethods = new AnnotatedMethodMap();
        AnnotatedMethodMap mixins = new AnnotatedMethodMap();
        // first: methods from the class itself
        _addMemberMethods(_class, this, memberMethods, _primaryMixIn, mixins);

        // and then augment these with annotations from super-types:
        for (JavaType type : _superTypes) {
            Class<?> mixin = (_mixInResolver == null) ? null : _mixInResolver.findMixInClassFor(type.getRawClass());
            _addMemberMethods(type.getRawClass(),
                    new TypeResolutionContext.Basic(_typeFactory, type.getBindings()),
                    memberMethods, mixin, mixins);
        }
        // Special case: mix-ins for Object.class? (to apply to ALL classes)
        if (_mixInResolver != null) {
            Class<?> mixin = _mixInResolver.findMixInClassFor(Object.class);
            if (mixin != null) {
                _addMethodMixIns(_class, memberMethods, mixin, mixins);
            }
        }

        /* Any unmatched mix-ins? Most likely error cases (not matching
         * any method); but there is one possible real use case:
         * exposing Object#hashCode (alas, Object#getClass can NOT be
         * exposed)
         */
        // 14-Feb-2011, tatu: AnnotationIntrospector is null if annotations not enabled; if so, can skip:
        if (_annotationIntrospector != null) {
            if (!mixins.isEmpty()) {
                Iterator<AnnotatedMethod> it = mixins.iterator();
                while (it.hasNext()) {
                    AnnotatedMethod mixIn = it.next();
                    try {
                        Method m = Object.class.getDeclaredMethod(mixIn.getName(), mixIn.getRawParameterTypes());
                        if (m != null) {
                            // Since it's from java.lang.Object, no generics, no need for real type context:
                            AnnotatedMethod am = _constructMethod(m, this);
                            _addMixOvers(mixIn.getAnnotated(), am, false);
                            memberMethods.add(am);
                        }
                    } catch (Exception e) { }
                }
            }
        }
        return memberMethods;
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_93a0b9b_32001a6/rev_93a0b9b-32001a6;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;resolveFields();;;        List<AnnotatedField> f;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_93a0b9b_32001a6/rev_93a0b9b-32001a6;/src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedClass;resolveFields();;;        _fields = f;
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_6b9782b_96eb83b/rev_6b9782b-96eb83b;/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest;SingleArgWithImplicit();;;private SingleArgWithImplicit() {
            throw new Error("Should not get called");
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_6b9782b_96eb83b/rev_6b9782b-96eb83b;/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest;SingleArgWithImplicit(XY,boolean);;;private SingleArgWithImplicit(XY v, boolean bogus) {
            _value = v;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_6b9782b_96eb83b/rev_6b9782b-96eb83b;/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest;from(XY);;;@JsonCreator
        public static SingleArgWithImplicit from(XY v) {
            return new SingleArgWithImplicit(v, true);
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_6b9782b_96eb83b/rev_6b9782b-96eb83b;/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest;getFoobar();;;public XY getFoobar() { return _value; }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_6b9782b_96eb83b/rev_6b9782b-96eb83b;/src/test/java/com/fasterxml/jackson/databind/creators/SingleArgCreatorTest;testSingleImplicitDelegating();;;public void testSingleImplicitDelegating() throws Exception
    {
        final ObjectMapper mapper = new ObjectMapper();
        mapper.setAnnotationIntrospector(new MyParamIntrospector("value"));
        SingleArgWithImplicit bean = mapper.readValue(aposToQuotes("{'x':1,'y':2}"),
                SingleArgWithImplicit.class);
        XY v = bean.getFoobar();
        assertNotNull(v);
        assertEquals(1, v.x);
        assertEquals(2, v.y);
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3c814ae_c96798c/rev_3c814ae-c96798c;/src/test/java/com/fasterxml/jackson/databind/jsontype/AbstractTypeMapping1186Test;getTs();;;@JsonProperty("ts")
        List<T> getTs();
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3c814ae_c96798c/rev_3c814ae-c96798c;/src/test/java/com/fasterxml/jackson/databind/jsontype/AbstractTypeMapping1186Test;MyContainer(List<T>);;;@JsonCreator
        public MyContainer(@JsonProperty("ts") List<T> ts) {
            this.ts = ts;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3c814ae_c96798c/rev_3c814ae-c96798c;/src/test/java/com/fasterxml/jackson/databind/jsontype/AbstractTypeMapping1186Test;getTs();;;@Override
        public List<T> getTs() {
            return ts;
        }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_3c814ae_c96798c/rev_3c814ae-c96798c;/src/test/java/com/fasterxml/jackson/databind/jsontype/AbstractTypeMapping1186Test;testDeserializeMyContainer();;;public void testDeserializeMyContainer() throws Exception {
        SimpleModule module = new SimpleModule().addAbstractTypeMapping(IContainer.class, MyContainer.class);
        final ObjectMapper mapper = new ObjectMapper().registerModule(module);
        String json = "{\"ts\": [ { \"msg\": \"hello\"} ] }";
        final Object o = mapper.readValue(json,
                mapper.getTypeFactory().constructParametricType(IContainer.class, MyObject.class));
        assertEquals(MyContainer.class, o.getClass());
        MyContainer<?> myc = (MyContainer<?>) o;
        assertEquals(1, myc.ts.size());
        Object value = myc.ts.get(0);
        assertEquals(MyObject.class, value.getClass());
    }
/home/ramdisk/experiment1/projects/jackson-databind/revisions/rev_b505162_4675896/rev_b505162-4675896;/src/main/java/com/fasterxml/jackson/databind/type/TypeFactory;constructSpecializedType(JavaType,Class<?>); 
            // If not, we'll need to do more thorough forward+backwards resolution. Sigh.;            
            // If not, we'll need to do more thorough forward+backwards resolution. Sigh.;            // (4) If all else fails, do the full traversal using placeholders
            TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);
            newType = _fromClass(null, subclass, tb);
