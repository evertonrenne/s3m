file;linedbasedConf
/experiment/projects/dropwizard-metrics/revisions/rev_84e7871_fc81e04/rev_84e7871-fc81e04/metrics-spring/src/main/java/com/yammer/metrics/spring/config/MetricsNamespaceHandler.java;<<<<<<< MINE
=======
		registerBeanDefinitionParser("jmx-reporter", new JmxReporterBeanDefinitionParser());
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_84e7871_fc81e04/rev_84e7871-fc81e04/metrics-spring/src/main/java/com/yammer/metrics/spring/config/JmxReporterBeanDefinitionParser.java;<<<<<<< MINE
=======
package com.yammer.metrics.spring.config;

import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
import org.w3c.dom.Element;

import com.yammer.metrics.spring.JmxReporterFactory;

public class JmxReporterBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {

	@Override
	protected Class<?> getBeanClass(Element element) {
		return JmxReporterFactory.class;
	}

	@Override
	protected boolean shouldGenerateIdAsFallback() {
		return true;
	}

	@Override
	protected void doParse(Element element, BeanDefinitionBuilder builder) {
		builder.setFactoryMethod("createInstance");
		builder.addConstructorArgReference(element.getAttribute("metrics-registry"));
	}

}>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_84e7871_fc81e04/rev_84e7871-fc81e04/metrics-spring/src/main/java/com/yammer/metrics/spring/config/AnnotationDrivenBeanDefinitionParser.java;<<<<<<< MINE
import com.yammer.metrics.spring.JmxReporterFactory;
=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_84e7871_fc81e04/rev_84e7871-fc81e04/metrics-spring/src/main/java/com/yammer/metrics/spring/config/AnnotationDrivenBeanDefinitionParser.java;<<<<<<< MINE
		registerJmxReporter(parserContext, source, ROLE_APPLICATION, metricsBeanName);

=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_84e7871_fc81e04/rev_84e7871-fc81e04/metrics-spring/src/main/java/com/yammer/metrics/spring/config/AnnotationDrivenBeanDefinitionParser.java;<<<<<<< MINE
	private String registerJmxReporter(ParserContext parserContext, Object source, int role, String argBeanName) {
		BeanDefinitionBuilder beanDefBuilder = BeanDefinitionBuilder.rootBeanDefinition(JmxReporterFactory.class, "createInstance");
		beanDefBuilder.setLazyInit(true);
		beanDefBuilder.setRole(role);
		beanDefBuilder.addConstructorArgReference(argBeanName);
		beanDefBuilder.getRawBeanDefinition().setSource(source);

		return registerComponent(parserContext, beanDefBuilder.getBeanDefinition());
	}

=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_b3e9cdd_73d827d/rev_b3e9cdd-73d827d/metrics-annotation/src/main/java/com/yammer/metrics/annotation/Gauge.java;<<<<<<< MINE
    /**
     * The gauge's name.
     */
=======
    String group() default "";
    String type() default "";
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
import com.yammer.metrics.Metrics;
=======
import com.yammer.metrics.core.MetricsRegistry;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
    private static final Timer GET_TIMER = Metrics.newTimer(HttpClient.class, "get-requests");
    private static final Timer POST_TIMER = Metrics.newTimer(HttpClient.class, "post-requests");
    private static final Timer HEAD_TIMER = Metrics.newTimer(HttpClient.class, "head-requests");
    private static final Timer PUT_TIMER = Metrics.newTimer(HttpClient.class, "put-requests");
    private static final Timer DELETE_TIMER = Metrics.newTimer(HttpClient.class, "delete-requests");
    private static final Timer OPTIONS_TIMER = Metrics.newTimer(HttpClient.class,
                                                                "options-requests");
    private static final Timer TRACE_TIMER = Metrics.newTimer(HttpClient.class, "trace-requests");
    private static final Timer CONNECT_TIMER = Metrics.newTimer(HttpClient.class,
                                                                "connect-requests");
    private static final Timer MOVE_TIMER = Metrics.newTimer(HttpClient.class, "move-requests");
    private static final Timer PATCH_TIMER = Metrics.newTimer(HttpClient.class, "patch-requests");
    private static final Timer OTHER_TIMER = Metrics.newTimer(HttpClient.class, "other-requests");
=======
    private final Timer getTimer;
    private final Timer postTimer;
    private final Timer headTimer;
    private final Timer putTimer;
    private final Timer deleteTimer;
    private final Timer optionsTimer;
    private final Timer traceTimer;
    private final Timer connectTimer;
    private final Timer moveTimer;
    private final Timer patchTimer;
    private final Timer otherTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
    InstrumentedRequestDirector(Log log,
=======
    InstrumentedRequestDirector(MetricsRegistry registry,
                                Log log,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
                                AuthenticationHandler targetAuthHandler,
                                AuthenticationHandler proxyAuthHandler,
=======
                                AuthenticationStrategy targetAuthStrategy,
                                AuthenticationStrategy proxyAuthStrategy,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
              targetAuthHandler,
              proxyAuthHandler,
=======
              targetAuthStrategy,
              proxyAuthStrategy,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
=======
        getTimer = registry.newTimer(HttpClient.class, "get-requests");
        postTimer = registry.newTimer(HttpClient.class, "post-requests");
        headTimer = registry.newTimer(HttpClient.class, "head-requests");
        putTimer = registry.newTimer(HttpClient.class, "put-requests");
        deleteTimer = registry.newTimer(HttpClient.class, "delete-requests");
        optionsTimer = registry.newTimer(HttpClient.class, "options-requests");
        traceTimer = registry.newTimer(HttpClient.class, "trace-requests");
        connectTimer = registry.newTimer(HttpClient.class, "connect-requests");
        moveTimer = registry.newTimer(HttpClient.class, "move-requests");
        patchTimer = registry.newTimer(HttpClient.class, "patch-requests");
        otherTimer = registry.newTimer(HttpClient.class, "other-requests");
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return GET_TIMER;
=======
            return getTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return POST_TIMER;
=======
            return postTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return PUT_TIMER;
=======
            return putTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return HEAD_TIMER;
=======
            return headTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return DELETE_TIMER;
=======
            return deleteTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return OPTIONS_TIMER;
=======
            return optionsTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return TRACE_TIMER;
=======
            return traceTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return CONNECT_TIMER;
=======
            return connectTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return PATCH_TIMER;
=======
            return patchTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
            return MOVE_TIMER;
=======
            return moveTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
        return OTHER_TIMER;
=======
        return otherTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
=======
import com.yammer.metrics.core.MetricsRegistry;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
=======
import org.apache.http.impl.conn.PoolingClientConnectionManager;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
=======
import org.apache.http.impl.conn.SystemDefaultDnsResolver;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
public class InstrumentedClientConnManager extends ThreadSafeClientConnManager {
=======
public class InstrumentedClientConnManager extends PoolingClientConnectionManager {
    public InstrumentedClientConnManager() {
        this(SchemeRegistryFactory.createDefault());
    }

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
    public InstrumentedClientConnManager() {
        this(SchemeRegistryFactory.createDefault());
=======
    public InstrumentedClientConnManager(SchemeRegistry registry,
                                         long connTTL,
                                         TimeUnit connTTLTimeUnit) {
        this(Metrics.defaultRegistry(), registry, connTTL, connTTLTimeUnit);
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
    public InstrumentedClientConnManager(SchemeRegistry registry,
=======
    public InstrumentedClientConnManager(MetricsRegistry metricsRegistry,
                                         SchemeRegistry registry,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
        super(registry, connTTL, connTTLTimeUnit);
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "available-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer getValue() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getAvailable();
                                     }
                                 });
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "leased-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer getValue() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getLeased();
                                     }
                                 });
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "max-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer getValue() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getMax();
                                     }
                                 });
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "pending-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer getValue() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getPending();
                                     }
                                 });
=======
        this(metricsRegistry, registry, connTTL, connTTLTimeUnit, new SystemDefaultDnsResolver());
    }

    public InstrumentedClientConnManager(MetricsRegistry metricsRegistry,
                                         SchemeRegistry schemeRegistry,
                                         long connTTL,
                                         TimeUnit connTTLTimeUnit,
                                         DnsResolver dnsResolver) {
        super(schemeRegistry, connTTL, connTTLTimeUnit, dnsResolver);
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "available-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer value() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getAvailable();
                                     }
                                 });
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "leased-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer value() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getLeased();
                                     }
                                 });
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "max-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer value() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getMax();
                                     }
                                 });
        metricsRegistry.newGauge(ClientConnectionManager.class,
                                 "pending-connections",
                                 new Gauge<Integer>() {
                                     @Override
                                     public Integer value() {
                                         // this acquires a lock on the connection pool; remove if contention sucks
                                         return getTotalStats().getPending();
                                     }
                                 });
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
=======
import com.yammer.metrics.Metrics;
import com.yammer.metrics.core.MetricsRegistry;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
=======
    private final MetricsRegistry registry;

    public InstrumentedHttpClient(MetricsRegistry registry,
                                  InstrumentedClientConnManager manager,
                                  HttpParams params) {
        super(manager, params);
        this.registry = registry;
    }

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
        super(manager, params);
=======
        this(Metrics.defaultRegistry(), manager, params);
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
        super(new InstrumentedClientConnManager(), params);
=======
        this(new InstrumentedClientConnManager(), params);
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
        super(new InstrumentedClientConnManager());
=======
        this(null);
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
                                                          AuthenticationHandler targetAuthHandler,
                                                          AuthenticationHandler proxyAuthHandler,
                                                          UserTokenHandler stateHandler,
=======
                                                          AuthenticationStrategy targetAuthStrategy,
                                                          AuthenticationStrategy proxyAuthStrategy,
                                                          UserTokenHandler userTokenHandler,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
=======
                registry,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
                targetAuthHandler,
                proxyAuthHandler,
                stateHandler,
=======
                targetAuthStrategy,
                proxyAuthStrategy,
                userTokenHandler,
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/reporting/JmxReporter.java;<<<<<<< MINE
=======

        if ( server.isRegistered(objectName) ){
            server.unregisterMBean(objectName);
        }
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
=======
import com.yammer.metrics.core.Clock;

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
import static java.lang.Math.*;
=======
import static java.lang.Math.exp;
import static java.lang.Math.min;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
=======
    private final Clock clock;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
=======
        this(reservoirSize, alpha, Clock.defaultClock());
    }

    /**
     * Creates a new {@link ExponentiallyDecayingSample}.
     *
     * @param reservoirSize the number of samples to keep in the sampling reservoir
     * @param alpha         the exponential decay factor; the higher this is, the more biased the
     *                      sample will be towards newer values
     */
    public ExponentiallyDecayingSample(int reservoirSize, double alpha, Clock clock) {
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
=======
        this.clock = clock;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
        update(value, tick());
=======
        update(value, currentTimeInSeconds());
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
=======

        rescaleIfNeeded();

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
            final double priority = weight(timestamp - startTime) / ThreadLocalRandom.current().nextDouble();
=======
            final double priority = weight(timestamp - startTime) / ThreadLocalRandom.current()
                                                                                     .nextDouble();
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE

    }

    private void rescaleIfNeeded() {
        final long now = clock.getTick();
=======

    }

    private void rescaleIfNeeded() {
        final long now = clock.tick();
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
    private long currentTimeInSeconds() {
        return TimeUnit.MILLISECONDS.toSeconds(clock.getTime());
=======
    private long currentTimeInSeconds() {
        return TimeUnit.MILLISECONDS.toSeconds(clock.time());
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
                this.startTime = tick();
=======
                this.startTime = currentTimeInSeconds();
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/main/java/com/yammer/metrics/stats/ExponentiallyDecayingSample.java;<<<<<<< MINE
=======

                // make sure the counter is in sync with the number of stored samples.
                count.set(values.size());
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/test/java/com/yammer/metrics/stats/tests/ExponentiallyDecayingSampleTest.java;<<<<<<< MINE
=======
import com.yammer.metrics.core.Clock;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/test/java/com/yammer/metrics/stats/tests/ExponentiallyDecayingSampleTest.java;<<<<<<< MINE
=======
import java.util.concurrent.TimeUnit;

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/test/java/com/yammer/metrics/stats/tests/ExponentiallyDecayingSampleTest.java;<<<<<<< MINE

=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/test/java/com/yammer/metrics/stats/tests/ExponentiallyDecayingSampleTest.java;<<<<<<< MINE

    @Test
    public void longPeriodsOfInactivityShouldNotCorruptSamplingState() {
        final ManualClock clock = new ManualClock();
        final ExponentiallyDecayingSample sample = new ExponentiallyDecayingSample(10,
                                                                                   0.015,
                                                                                   clock);

        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(1000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 1000, 2000);

        // wait for 15 hours and add another value.
        // this should trigger a rescale. Note that the number of samples will be reduced to 2
        // because of the very small scaling factor that will make all existing priorities equal to
        // zero after rescale.
        clock.addHours(15);
        sample.update(2000);
        assertThat("the sample has 2 elements", sample.getSnapshot().size(), is(2));
        assertAllValuesBetween(sample, 1000, 3000);


        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(3000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 3000, 4000);


    }

    @SuppressWarnings("unchecked")
    private void assertAllValuesBetween(ExponentiallyDecayingSample sample,
                                        double min, double max) {
        for (double i : sample.getSnapshot().getValues()) {
            assertThat("the sample only contains elements from the population",
                       i,
                       is(allOf(
                               lessThan(max),
                               greaterThanOrEqualTo(min)
                       )));
        }

    }

    class ManualClock extends Clock {
        long ticksInNanos = 0;

        public void addMillis(long millis) {
            ticksInNanos += TimeUnit.MILLISECONDS.toNanos(millis);
        }

        public void addHours(long hours) {
            ticksInNanos += TimeUnit.HOURS.toNanos(hours);
        }

        @Override
        public long getTick() {
            return ticksInNanos;
        }

        @Override
        public long getTime() {
            return TimeUnit.NANOSECONDS.toMillis(ticksInNanos);
        }

    }

=======

    @Test
    public void longPeriodsOfInactivityShouldNotCorruptSamplingState() {
        final ManualClock clock = new ManualClock();
        final ExponentiallyDecayingSample sample = new ExponentiallyDecayingSample(10,
                                                                                   0.015,
                                                                                   clock);

        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(1000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 1000, 2000);

        // wait for 15 hours and add another value.
        // this should trigger a rescale. Note that the number of samples will be reduced to 2
        // because of the very small scaling factor that will make all existing priorities equal to
        // zero after rescale.
        clock.addHours(15);
        sample.update(2000);
        assertThat("the sample has 2 elements", sample.getSnapshot().size(), is(2));
        assertAllValuesBetween(sample, 1000, 3000);


        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(3000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 3000, 4000);


    }

    @SuppressWarnings("unchecked")
    private void assertAllValuesBetween(ExponentiallyDecayingSample sample,
                                        double min, double max) {
        for (double i : sample.getSnapshot().getValues()) {
            assertThat("the sample only contains elements from the population",
                       i,
                       is(allOf(
                               lessThan(max),
                               greaterThanOrEqualTo(min)
                       )));
        }

    }

    class ManualClock extends Clock {
        long ticksInNanos = 0;

        public void addMillis(long millis) {
            ticksInNanos += TimeUnit.MILLISECONDS.toNanos(millis);
        }

        public void addHours(long hours) {
            ticksInNanos += TimeUnit.HOURS.toNanos(hours);
        }

        @Override
        public long tick() {
            return ticksInNanos;
        }

        @Override
        public long time() {
            return TimeUnit.NANOSECONDS.toMillis(ticksInNanos);
        }

    }

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_53d236f_194af4e/rev_53d236f-194af4e/metrics-core/src/main/java/com/yammer/metrics/core/HealthCheck.java;<<<<<<< MINE
=======
         * Returns a healthy {@link Result} with a formatted message.
         *
         * Message formatting follows the same rules as 
         * {@link String#format(String, Object...)}.
         *
         * @param message a message format
         * @param args    the arguments apply to the message format
         * @return a healthy {@link Result} with an additional message
         * @see String#format(String, Object...)
         */
        public static Result healthy(String message, Object... args) {
            return healthy(String.format(message, args));
        }

        /**
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_53d236f_194af4e/rev_53d236f-194af4e/metrics-core/src/main/java/com/yammer/metrics/core/HealthCheck.java;<<<<<<< MINE
=======
         * Returns an unhealthy {@link Result} with a formatted message.
         *
         * Message formatting follows the same rules as 
         * {@link String#format(String, Object...)}.
         *
         * @param message a message format
         * @param args    the arguments apply to the message format
         * @return an unhealthy {@link Result} with an additional message
         * @see String#format(String, Object...)
         */
        public static Result unhealthy(String message, Object... args) {
            return unhealthy(String.format(message, args));
        }

        /**
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_53d236f_194af4e/rev_53d236f-194af4e/metrics-core/src/test/java/com/yammer/metrics/core/tests/HealthCheckTest.java;<<<<<<< MINE
=======
    public void canHaveHealthyResultsWithFormattedMessages() throws Exception {
        final Result result = Result.healthy("foo %s", "bar");

        assertThat(result.isHealthy(),
                    is(true));
        
        assertThat(result.getMessage(),
                    is("foo bar"));

        assertThat(result.getError(),
                    is(nullValue()));
    }

    @Test
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_53d236f_194af4e/rev_53d236f-194af4e/metrics-core/src/test/java/com/yammer/metrics/core/tests/HealthCheckTest.java;<<<<<<< MINE
=======
    public void canHaveUnhealthyResultsWithFormattedMessages() throws Exception {
        final Result result = Result.unhealthy("foo %s %d", "bar", 123);

        assertThat(result.isHealthy(),
                    is(false));
        
        assertThat(result.getMessage(),
                    is("foo bar 123"));

        assertThat(result.getError(),
                    is(nullValue()));
    }

    @Test
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_3bb71a7_2ca845b/rev_3bb71a7-2ca845b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
package com.yammer.metrics.httpclient;

import com.yammer.metrics.MetricRegistry;
import com.yammer.metrics.Timer;
import org.apache.commons.logging.Log;
import org.apache.http.*;
import org.apache.http.client.*;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.routing.HttpRoutePlanner;
import org.apache.http.impl.client.DefaultRequestDirector;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.HttpProcessor;
import org.apache.http.protocol.HttpRequestExecutor;

import java.io.IOException;

import static com.yammer.metrics.MetricRegistry.name;

class InstrumentedRequestDirector extends DefaultRequestDirector {

    private final MetricRegistry registry;
    private final HttpClientMetricNameStrategy metricNameStrategy;
    private final String name;

    InstrumentedRequestDirector(MetricRegistry registry,
                                String name,
                                HttpClientMetricNameStrategy metricNameStrategy,
                                Log log,
                                HttpRequestExecutor requestExec,
                                ClientConnectionManager conman,
                                ConnectionReuseStrategy reustrat,
                                ConnectionKeepAliveStrategy kastrat,
                                HttpRoutePlanner rouplan,
                                HttpProcessor httpProcessor,
                                HttpRequestRetryHandler retryHandler,
                                RedirectStrategy redirectStrategy,
                                AuthenticationStrategy targetAuthStrategy,
                                AuthenticationStrategy proxyAuthStrategy,
                                UserTokenHandler userTokenHandler,
                                HttpParams params) {
        super(log,
              requestExec,
              conman,
              reustrat,
              kastrat,
              rouplan,
              httpProcessor,
              retryHandler,
              redirectStrategy,
              targetAuthStrategy,
              proxyAuthStrategy,
              userTokenHandler,
              params);
        this.registry = registry;
        this.name = name;
        this.metricNameStrategy = metricNameStrategy;
    }

    @Override
    public HttpResponse execute(HttpHost target, HttpRequest request, HttpContext context) throws HttpException, IOException {
        final Timer.Context timerContext = timer(request).time();
        try {
            return super.execute(target, request, context);
        } finally {
            timerContext.stop();
        }
    }

    private Timer timer(HttpRequest request) {
        return registry.timer(metricNameStrategy.getNameFor(name, request));
    }
}=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_3bb71a7_2ca845b/rev_3bb71a7-2ca845b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
package com.yammer.metrics.httpclient;

import com.yammer.metrics.MetricRegistry;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.ConnectionReuseStrategy;
import org.apache.http.client.*;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.routing.HttpRoutePlanner;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HttpProcessor;
import org.apache.http.protocol.HttpRequestExecutor;

import static com.yammer.metrics.httpclient.HttpClientMetricNameStrategies.METHOD_ONLY;

public class InstrumentedHttpClient extends DefaultHttpClient {
    private final Log log = LogFactory.getLog(getClass());

    private final MetricRegistry registry;
    private final String name;
    private final HttpClientMetricNameStrategy metricNameStrategy;

    public InstrumentedHttpClient(MetricRegistry registry,
                                  InstrumentedClientConnManager manager,
                                  HttpParams params,
                                  String name,
                                  HttpClientMetricNameStrategy metricNameStrategy) {
        super(manager, params);
        this.registry = registry;
        this.name = name;
        this.metricNameStrategy = metricNameStrategy;
    }

    public InstrumentedHttpClient(MetricRegistry registry,
                                  InstrumentedClientConnManager manager,
                                  HttpParams params,
                                  String name) {
        this(registry, manager, params, name, METHOD_ONLY);
    }

    public InstrumentedHttpClient(MetricRegistry registry,
                                  HttpParams params) {
        this(registry, new InstrumentedClientConnManager(registry), params, null);
    }

    public InstrumentedHttpClient(MetricRegistry registry) {
        this(registry, new InstrumentedClientConnManager(registry), null, null);
    }

    public InstrumentedHttpClient(MetricRegistry registry, HttpClientMetricNameStrategy metricNameStrategy) {
        this(registry, new InstrumentedClientConnManager(registry), null, null, metricNameStrategy);
    }

    public InstrumentedHttpClient(MetricRegistry registry, String name, HttpClientMetricNameStrategy metricNameStrategy) {
        this(registry, new InstrumentedClientConnManager(registry), null, name, metricNameStrategy);
    }

    @Override
    protected RequestDirector createClientRequestDirector(HttpRequestExecutor requestExec,
                                                          ClientConnectionManager conman,
                                                          ConnectionReuseStrategy reustrat,
                                                          ConnectionKeepAliveStrategy kastrat,
                                                          HttpRoutePlanner rouplan,
                                                          HttpProcessor httpProcessor,
                                                          HttpRequestRetryHandler retryHandler,
                                                          RedirectStrategy redirectStrategy,
                                                          AuthenticationStrategy targetAuthStrategy,
                                                          AuthenticationStrategy proxyAuthStrategy,
                                                          UserTokenHandler userTokenHandler,
                                                          HttpParams params) {
        return new InstrumentedRequestDirector(
                registry,
                name,
                metricNameStrategy,
                log,
                requestExec,
                conman,
                reustrat,
                kastrat,
                rouplan,
                httpProcessor,
                retryHandler,
                redirectStrategy,
                targetAuthStrategy,
                proxyAuthStrategy,
                userTokenHandler,
                params);
    }
}=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_3bb71a7_2ca845b/rev_3bb71a7-2ca845b/metrics-httpclient/src/test/java/com/yammer/metrics/httpclient/InstrumentedHttpClientTest.java;<<<<<<< MINE
package com.yammer.metrics.httpclient;

import com.yammer.metrics.MetricRegistry;
import com.yammer.metrics.MetricRegistryListener;
import com.yammer.metrics.Timer;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import static org.mockito.Matchers.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class InstrumentedHttpClientTest {

    @Mock
    public HttpClientMetricNameStrategy metricNameStrategy;
    @Mock
    public MetricRegistryListener registryListener;

    private MetricRegistry metricRegistry;
    private HttpClient client;

    @Before
    public void init() {
        metricRegistry = new MetricRegistry();
        metricRegistry.addListener(registryListener);
        client = new InstrumentedHttpClient(metricRegistry, metricNameStrategy);
    }

    @Test
    public void registersExpectedMetricsGivenNameStrategy() throws Exception {
        HttpGet get = new HttpGet("http://google.com?q=anything");
        String metricName = "some.made.up.metric.name";

        when(metricNameStrategy.getNameFor(anyString(), eq(get))).thenReturn(metricName);

        try {
            client.execute(get);
        } catch (Exception e) {
        }

        verify(registryListener).onTimerAdded(eq(metricName), any(Timer.class));
    }
}=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8bdd210_4ff25d5/rev_8bdd210-4ff25d5/metrics-httpclient/src/main/java/com/codahale/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
class InstrumentedRequestDirector extends DefaultRequestDirector {

    private final MetricRegistry registry;
    private final HttpClientMetricNameStrategy metricNameStrategy;
    private final String name;
=======
public class InstrumentedRequestDirector extends DefaultRequestDirector {
    private final static String GET = "GET", POST = "POST", HEAD = "HEAD", PUT = "PUT",
            OPTIONS = "OPTIONS", DELETE = "DELETE", TRACE = "TRACE",
            CONNECT = "CONNECT", MOVE = "MOVE", PATCH = "PATCH";

    private final Timer getTimer;
    private final Timer postTimer;
    private final Timer headTimer;
    private final Timer putTimer;
    private final Timer deleteTimer;
    private final Timer optionsTimer;
    private final Timer traceTimer;
    private final Timer connectTimer;
    private final Timer moveTimer;
    private final Timer patchTimer;
    private final Timer otherTimer;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8bdd210_4ff25d5/rev_8bdd210-4ff25d5/metrics-httpclient/src/main/java/com/codahale/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
    InstrumentedRequestDirector(MetricRegistry registry,
                                String name,
                                HttpClientMetricNameStrategy metricNameStrategy,
                                Log log,
                                HttpRequestExecutor requestExec,
                                ClientConnectionManager conman,
                                ConnectionReuseStrategy reustrat,
                                ConnectionKeepAliveStrategy kastrat,
                                HttpRoutePlanner rouplan,
                                HttpProcessor httpProcessor,
                                HttpRequestRetryHandler retryHandler,
                                RedirectStrategy redirectStrategy,
                                AuthenticationStrategy targetAuthStrategy,
                                AuthenticationStrategy proxyAuthStrategy,
                                UserTokenHandler userTokenHandler,
                                HttpParams params) {
=======
    public InstrumentedRequestDirector(MetricRegistry registry,
                                       String name,
                                       Log log,
                                       HttpRequestExecutor requestExec,
                                       ClientConnectionManager conman,
                                       ConnectionReuseStrategy reustrat,
                                       ConnectionKeepAliveStrategy kastrat,
                                       HttpRoutePlanner rouplan,
                                       HttpProcessor httpProcessor,
                                       HttpRequestRetryHandler retryHandler,
                                       RedirectStrategy redirectStrategy,
                                       AuthenticationStrategy targetAuthStrategy,
                                       AuthenticationStrategy proxyAuthStrategy,
                                       UserTokenHandler userTokenHandler,
                                       HttpParams params) {
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_a29c81a_c3041c6/rev_a29c81a-c3041c6/metrics-servlets/src/test/java/com/codahale/metrics/servlets/MetricsServletTest.java;<<<<<<< MINE
import com.codahale.metrics.health.HealthCheckRegistry;

import org.eclipse.jetty.testing.ServletTester;
=======
import org.eclipse.jetty.http.HttpHeader;
import org.eclipse.jetty.servlet.ServletTester;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_b7976ef_65faea8/rev_b7976ef-65faea8/metrics-core/src/main/java/com/codahale/metrics/ExponentiallyDecayingReservoir.java;<<<<<<< MINE
     * @param clock the clock used to timestamp samples and track rescaling
=======
     * @param clock the {@link Clock} to use
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_ce7cdff_48140b7/rev_ce7cdff-48140b7/metrics-core/src/main/java/com/codahale/metrics/JmxReporter.java;<<<<<<< MINE
        private final Map<ObjectName, ObjectName> registered;
=======
        private final Set<ObjectName> registered;
		private final ObjectNameFactory objectNameFactory;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_ce7cdff_48140b7/rev_ce7cdff-48140b7/metrics-core/src/main/java/com/codahale/metrics/JmxReporter.java;<<<<<<< MINE
            this.registered = new ConcurrentHashMap<ObjectName, ObjectName>();
        }

        private void registerMBean(Object mBean, ObjectName objectName) throws InstanceAlreadyExistsException, JMException {
            ObjectInstance objectInstance = mBeanServer.registerMBean(mBean, objectName);
            if (objectInstance != null) {
                // the websphere mbeanserver rewrites the objectname to include
                // cell, node & server info
                // make sure we capture the new objectName for unregistration
                registered.put(objectName, objectInstance.getObjectName());
            } else {
                registered.put(objectName, objectName);
            }
        }

        private void unregisterMBean(ObjectName originalObjectName) throws InstanceNotFoundException, MBeanRegistrationException {
            ObjectName storedObjectName = registered.remove(originalObjectName);
            if (storedObjectName != null) {
                mBeanServer.unregisterMBean(storedObjectName);
            } else {
                mBeanServer.unregisterMBean(originalObjectName);
            }
=======
            this.registered = new CopyOnWriteArraySet<ObjectName>();
            this.objectNameFactory = objectNameFactory;
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_41ba6c3_d814f12/rev_41ba6c3-d814f12/metrics-servlets/src/main/java/com/codahale/metrics/servlets/MetricsServlet.java;<<<<<<< MINE
         * @return the {@link MetricFilter} that shall be used to filter metrics, or {@link MetricFilter#ALL} if
=======
         * Returns the name of the parameter used to specify the jsonp callback, if any.
         */
        protected String getJsonpCallbackParameter() {
            return null;
        }

        /**
         * Returns the {@link MetricFilter} that shall be used to filter metrics, or {@link MetricFilter#ALL} if
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_73b2e5f_cb6980f/rev_73b2e5f-cb6980f/metrics-graphite/src/main/java/com/codahale/metrics/graphite/Graphite.java;<<<<<<< MINE
    protected Socket socket;
    protected Writer writer;
    protected int failures;
=======
    private Socket socket;
    private Writer writer;
    private int failures;
    
    /**
     * Creates a new client which connects to the given address using the default
     * {@link SocketFactory}.
     *
     * @param hostname The hostname of the Carbon server
     * @param port The port of the Carbon server
     */
    public Graphite(String hostname, int port) {
        this(new InetSocketAddress(hostname, port));
    }
    
    /**
     * Creates a new client which connects to the given address and socket factory.
     *
     * @param hostname The hostname of the Carbon server
     * @param port The port of the Carbon server
     * @param socketFactory the socket factory
     */
    public Graphite(String hostname, int port, SocketFactory socketFactory) {
        this(new InetSocketAddress(hostname, port), socketFactory);
    }
>>>>>>> YOURS
