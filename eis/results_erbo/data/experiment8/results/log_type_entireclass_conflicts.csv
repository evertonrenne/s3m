/experiment/projects/dropwizard-metrics/revisions/rev_84e7871_fc81e04/rev_84e7871-fc81e04/metrics-spring/src/main/java/com/yammer/metrics/spring/config/JmxReporterBeanDefinitionParser.java;<<<<<<< MINE
=======
package com.yammer.metrics.spring.config;

import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
import org.w3c.dom.Element;

import com.yammer.metrics.spring.JmxReporterFactory;

public class JmxReporterBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {

	@Override
	protected Class<?> getBeanClass(Element element) {
		return JmxReporterFactory.class;
	}

	@Override
	protected boolean shouldGenerateIdAsFallback() {
		return true;
	}

	@Override
	protected void doParse(Element element, BeanDefinitionBuilder builder) {
		builder.setFactoryMethod("createInstance");
		builder.addConstructorArgReference(element.getAttribute("metrics-registry"));
	}

}>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedClientConnManager.java;<<<<<<< MINE
public class InstrumentedClientConnManager extends ThreadSafeClientConnManager {
=======
public class InstrumentedClientConnManager extends PoolingClientConnectionManager {
    public InstrumentedClientConnManager() {
        this(SchemeRegistryFactory.createDefault());
    }

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8d25559_b18eb9b/rev_8d25559-b18eb9b/metrics-core/src/test/java/com/yammer/metrics/stats/tests/ExponentiallyDecayingSampleTest.java;<<<<<<< MINE

    @Test
    public void longPeriodsOfInactivityShouldNotCorruptSamplingState() {
        final ManualClock clock = new ManualClock();
        final ExponentiallyDecayingSample sample = new ExponentiallyDecayingSample(10,
                                                                                   0.015,
                                                                                   clock);

        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(1000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 1000, 2000);

        // wait for 15 hours and add another value.
        // this should trigger a rescale. Note that the number of samples will be reduced to 2
        // because of the very small scaling factor that will make all existing priorities equal to
        // zero after rescale.
        clock.addHours(15);
        sample.update(2000);
        assertThat("the sample has 2 elements", sample.getSnapshot().size(), is(2));
        assertAllValuesBetween(sample, 1000, 3000);


        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(3000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 3000, 4000);


    }

    @SuppressWarnings("unchecked")
    private void assertAllValuesBetween(ExponentiallyDecayingSample sample,
                                        double min, double max) {
        for (double i : sample.getSnapshot().getValues()) {
            assertThat("the sample only contains elements from the population",
                       i,
                       is(allOf(
                               lessThan(max),
                               greaterThanOrEqualTo(min)
                       )));
        }

    }

    class ManualClock extends Clock {
        long ticksInNanos = 0;

        public void addMillis(long millis) {
            ticksInNanos += TimeUnit.MILLISECONDS.toNanos(millis);
        }

        public void addHours(long hours) {
            ticksInNanos += TimeUnit.HOURS.toNanos(hours);
        }

        @Override
        public long getTick() {
            return ticksInNanos;
        }

        @Override
        public long getTime() {
            return TimeUnit.NANOSECONDS.toMillis(ticksInNanos);
        }

    }

=======

    @Test
    public void longPeriodsOfInactivityShouldNotCorruptSamplingState() {
        final ManualClock clock = new ManualClock();
        final ExponentiallyDecayingSample sample = new ExponentiallyDecayingSample(10,
                                                                                   0.015,
                                                                                   clock);

        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(1000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 1000, 2000);

        // wait for 15 hours and add another value.
        // this should trigger a rescale. Note that the number of samples will be reduced to 2
        // because of the very small scaling factor that will make all existing priorities equal to
        // zero after rescale.
        clock.addHours(15);
        sample.update(2000);
        assertThat("the sample has 2 elements", sample.getSnapshot().size(), is(2));
        assertAllValuesBetween(sample, 1000, 3000);


        // add 1000 values at a rate of 10 values/second
        for (int i = 0; i < 1000; i++) {
            sample.update(3000 + i);
            clock.addMillis(100);
        }
        assertThat("the sample has 10 elements", sample.getSnapshot().size(), is(10));
        assertAllValuesBetween(sample, 3000, 4000);


    }

    @SuppressWarnings("unchecked")
    private void assertAllValuesBetween(ExponentiallyDecayingSample sample,
                                        double min, double max) {
        for (double i : sample.getSnapshot().getValues()) {
            assertThat("the sample only contains elements from the population",
                       i,
                       is(allOf(
                               lessThan(max),
                               greaterThanOrEqualTo(min)
                       )));
        }

    }

    class ManualClock extends Clock {
        long ticksInNanos = 0;

        public void addMillis(long millis) {
            ticksInNanos += TimeUnit.MILLISECONDS.toNanos(millis);
        }

        public void addHours(long hours) {
            ticksInNanos += TimeUnit.HOURS.toNanos(hours);
        }

        @Override
        public long tick() {
            return ticksInNanos;
        }

        @Override
        public long time() {
            return TimeUnit.NANOSECONDS.toMillis(ticksInNanos);
        }

    }

>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_3bb71a7_2ca845b/rev_3bb71a7-2ca845b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
package com.yammer.metrics.httpclient;

import com.yammer.metrics.MetricRegistry;
import com.yammer.metrics.Timer;
import org.apache.commons.logging.Log;
import org.apache.http.*;
import org.apache.http.client.*;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.routing.HttpRoutePlanner;
import org.apache.http.impl.client.DefaultRequestDirector;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HttpContext;
import org.apache.http.protocol.HttpProcessor;
import org.apache.http.protocol.HttpRequestExecutor;

import java.io.IOException;

import static com.yammer.metrics.MetricRegistry.name;

class InstrumentedRequestDirector extends DefaultRequestDirector {

    private final MetricRegistry registry;
    private final HttpClientMetricNameStrategy metricNameStrategy;
    private final String name;

    InstrumentedRequestDirector(MetricRegistry registry,
                                String name,
                                HttpClientMetricNameStrategy metricNameStrategy,
                                Log log,
                                HttpRequestExecutor requestExec,
                                ClientConnectionManager conman,
                                ConnectionReuseStrategy reustrat,
                                ConnectionKeepAliveStrategy kastrat,
                                HttpRoutePlanner rouplan,
                                HttpProcessor httpProcessor,
                                HttpRequestRetryHandler retryHandler,
                                RedirectStrategy redirectStrategy,
                                AuthenticationStrategy targetAuthStrategy,
                                AuthenticationStrategy proxyAuthStrategy,
                                UserTokenHandler userTokenHandler,
                                HttpParams params) {
        super(log,
              requestExec,
              conman,
              reustrat,
              kastrat,
              rouplan,
              httpProcessor,
              retryHandler,
              redirectStrategy,
              targetAuthStrategy,
              proxyAuthStrategy,
              userTokenHandler,
              params);
        this.registry = registry;
        this.name = name;
        this.metricNameStrategy = metricNameStrategy;
    }

    @Override
    public HttpResponse execute(HttpHost target, HttpRequest request, HttpContext context) throws HttpException, IOException {
        final Timer.Context timerContext = timer(request).time();
        try {
            return super.execute(target, request, context);
        } finally {
            timerContext.stop();
        }
    }

    private Timer timer(HttpRequest request) {
        return registry.timer(metricNameStrategy.getNameFor(name, request));
    }
}=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_3bb71a7_2ca845b/rev_3bb71a7-2ca845b/metrics-httpclient/src/main/java/com/yammer/metrics/httpclient/InstrumentedHttpClient.java;<<<<<<< MINE
package com.yammer.metrics.httpclient;

import com.yammer.metrics.MetricRegistry;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.ConnectionReuseStrategy;
import org.apache.http.client.*;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.ConnectionKeepAliveStrategy;
import org.apache.http.conn.routing.HttpRoutePlanner;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HttpProcessor;
import org.apache.http.protocol.HttpRequestExecutor;

import static com.yammer.metrics.httpclient.HttpClientMetricNameStrategies.METHOD_ONLY;

public class InstrumentedHttpClient extends DefaultHttpClient {
    private final Log log = LogFactory.getLog(getClass());

    private final MetricRegistry registry;
    private final String name;
    private final HttpClientMetricNameStrategy metricNameStrategy;

    public InstrumentedHttpClient(MetricRegistry registry,
                                  InstrumentedClientConnManager manager,
                                  HttpParams params,
                                  String name,
                                  HttpClientMetricNameStrategy metricNameStrategy) {
        super(manager, params);
        this.registry = registry;
        this.name = name;
        this.metricNameStrategy = metricNameStrategy;
    }

    public InstrumentedHttpClient(MetricRegistry registry,
                                  InstrumentedClientConnManager manager,
                                  HttpParams params,
                                  String name) {
        this(registry, manager, params, name, METHOD_ONLY);
    }

    public InstrumentedHttpClient(MetricRegistry registry,
                                  HttpParams params) {
        this(registry, new InstrumentedClientConnManager(registry), params, null);
    }

    public InstrumentedHttpClient(MetricRegistry registry) {
        this(registry, new InstrumentedClientConnManager(registry), null, null);
    }

    public InstrumentedHttpClient(MetricRegistry registry, HttpClientMetricNameStrategy metricNameStrategy) {
        this(registry, new InstrumentedClientConnManager(registry), null, null, metricNameStrategy);
    }

    public InstrumentedHttpClient(MetricRegistry registry, String name, HttpClientMetricNameStrategy metricNameStrategy) {
        this(registry, new InstrumentedClientConnManager(registry), null, name, metricNameStrategy);
    }

    @Override
    protected RequestDirector createClientRequestDirector(HttpRequestExecutor requestExec,
                                                          ClientConnectionManager conman,
                                                          ConnectionReuseStrategy reustrat,
                                                          ConnectionKeepAliveStrategy kastrat,
                                                          HttpRoutePlanner rouplan,
                                                          HttpProcessor httpProcessor,
                                                          HttpRequestRetryHandler retryHandler,
                                                          RedirectStrategy redirectStrategy,
                                                          AuthenticationStrategy targetAuthStrategy,
                                                          AuthenticationStrategy proxyAuthStrategy,
                                                          UserTokenHandler userTokenHandler,
                                                          HttpParams params) {
        return new InstrumentedRequestDirector(
                registry,
                name,
                metricNameStrategy,
                log,
                requestExec,
                conman,
                reustrat,
                kastrat,
                rouplan,
                httpProcessor,
                retryHandler,
                redirectStrategy,
                targetAuthStrategy,
                proxyAuthStrategy,
                userTokenHandler,
                params);
    }
}=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_3bb71a7_2ca845b/rev_3bb71a7-2ca845b/metrics-httpclient/src/test/java/com/yammer/metrics/httpclient/InstrumentedHttpClientTest.java;<<<<<<< MINE
package com.yammer.metrics.httpclient;

import com.yammer.metrics.MetricRegistry;
import com.yammer.metrics.MetricRegistryListener;
import com.yammer.metrics.Timer;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import static org.mockito.Matchers.*;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class InstrumentedHttpClientTest {

    @Mock
    public HttpClientMetricNameStrategy metricNameStrategy;
    @Mock
    public MetricRegistryListener registryListener;

    private MetricRegistry metricRegistry;
    private HttpClient client;

    @Before
    public void init() {
        metricRegistry = new MetricRegistry();
        metricRegistry.addListener(registryListener);
        client = new InstrumentedHttpClient(metricRegistry, metricNameStrategy);
    }

    @Test
    public void registersExpectedMetricsGivenNameStrategy() throws Exception {
        HttpGet get = new HttpGet("http://google.com?q=anything");
        String metricName = "some.made.up.metric.name";

        when(metricNameStrategy.getNameFor(anyString(), eq(get))).thenReturn(metricName);

        try {
            client.execute(get);
        } catch (Exception e) {
        }

        verify(registryListener).onTimerAdded(eq(metricName), any(Timer.class));
    }
}=======
>>>>>>> YOURS
/experiment/projects/dropwizard-metrics/revisions/rev_8bdd210_4ff25d5/rev_8bdd210-4ff25d5/metrics-httpclient/src/main/java/com/codahale/metrics/httpclient/InstrumentedRequestDirector.java;<<<<<<< MINE
class InstrumentedRequestDirector extends DefaultRequestDirector {

    private final MetricRegistry registry;
    private final HttpClientMetricNameStrategy metricNameStrategy;
    private final String name;
=======
public class InstrumentedRequestDirector extends DefaultRequestDirector {
    private final static String GET = "GET", POST = "POST", HEAD = "HEAD", PUT = "PUT",
            OPTIONS = "OPTIONS", DELETE = "DELETE", TRACE = "TRACE",
            CONNECT = "CONNECT", MOVE = "MOVE", PATCH = "PATCH";

    private final Timer getTimer;
    private final Timer postTimer;
    private final Timer headTimer;
    private final Timer putTimer;
    private final Timer deleteTimer;
    private final Timer optionsTimer;
    private final Timer traceTimer;
    private final Timer connectTimer;
    private final Timer moveTimer;
    private final Timer patchTimer;
    private final Timer otherTimer;
>>>>>>> YOURS
